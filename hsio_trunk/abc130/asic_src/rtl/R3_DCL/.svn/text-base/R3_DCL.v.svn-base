//
// Module R3_formatter_lib.R3_DCL.struct
//
// Created:
//          by - smkilani.smkilani (kilani-vaio)
//          at - 16:34:36 04/20/12
//
// Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
//

`resetall
`timescale 1ns/10ps
module R3_DCL #(
   // synopsys template
   parameter CLSTR_NUM = 4
)
( 
   // Port Declarations
   input   wire             CLK, 
   input   wire             EN_01, 
   input   wire             FIFO_full, 
   input   wire    [255:0]  MEMA, 
   input   wire    [271:0]  MEMC, 
   input   wire             buffwrA, 
   input   wire             buffwrC, 
   input   wire             buffwrD, 
   input   wire             rst_b, 
   input   wire             wtdg_rst_b, 
   output  wire             FIFO_wr, 
   output  wire    [50:0]   PCKT_o, 
   output  wire             busy, 
   output  wire             wtdg_rstrt
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire          CLSTR_RDY;
wire  [15:0]  L0_BC_ID;
wire          NO_01;
wire          NO_0_1_o;
wire          OVER_FLOW;
wire          P;
wire          PCKT_RST;
wire          RST;
wire          SEG_ID;
wire          START;
wire          Vn;
wire          WR1;
wire          WR2;
wire  [3:0]   bitmap;
wire  [6:0]   clstr_adrs2;
wire  [127:0] data_o1;
wire  [271:0] data_out;
wire  [127:0] detected_hits;
wire  [127:0] detected_reg1;
wire  [6:0]   hit_pos;
wire  [127:0] hits;
wire  [127:0] next_hit;
wire          no_hits;


// Instances 
clstr_adrs_adder clstr_adrs_adder( 
   .clstr_pos  (hit_pos), 
   .head_pos   (P), 
   .clstr_adrs (clstr_adrs2)
); 

cluster_mux cluster_mux( 
   .data_i (data_o1), 
   .sel    (hit_pos), 
   .data_o (bitmap)
); 

hit_detector hit_detector( 
   .data_i (hits), 
   .data_o (detected_hits)
); 

hit_discriminator hit_discriminator( 
   .data_i (bitmap), 
   .Vn     (Vn), 
   .P      (P)
); 

hit_locator hit_locator( 
   .data_i   (detected_reg1), 
   .next_hit (next_hit), 
   .hit_pos  (hit_pos), 
   .no_hits  (no_hits)
); 

hit_register hit_register( 
   .CLK     (CLK), 
   .RST     (RST), 
   .WR1     (WR1), 
   .WR2     (WR2), 
   .data_i1 (detected_hits), 
   .data_i2 (next_hit), 
   .data_o  (detected_reg1)
); 

mux_256_128 mux_256_128( 
   .data_i   (data_out), 
   .sel      (SEG_ID), 
   .L0_BC_ID (L0_BC_ID), 
   .data_o   (hits)
); 

packet_constructor #(CLSTR_NUM) packet_constructor( 
   .CLK       (CLK), 
   .RST       (RST), 
   .CLSTR_RDY (CLSTR_RDY), 
   .PCKT_RST  (PCKT_RST), 
   .SEG_ID    (SEG_ID), 
   .L0_BC_ID  (L0_BC_ID), 
   .DATA_I    (clstr_adrs2), 
   .NO_0_1    (NO_0_1_o), 
   .PCKT_O    (PCKT_o), 
   .OVERFLOW  (OVER_FLOW)
); 

reg_128_1 reg_128_1( 
   .CLK    (CLK), 
   .RST    (RST), 
   .WR     (WR1), 
   .data_i (hits), 
   .data_o (data_o1)
); 

state_machine state_machine( 
   .CLK            (CLK), 
   .RST            (RST), 
   .EN             (START), 
   .NO_HITS        (no_hits), 
   .PCKT_OVER_FLOW (OVER_FLOW), 
   .Vn             (Vn), 
   .fifo_full      (FIFO_full), 
   .NO_0_1         (NO_01), 
   .WR1            (WR1), 
   .WR2            (WR2), 
   .PCKT_RDY       (FIFO_wr), 
   .CLSTR_RDY      (CLSTR_RDY), 
   .PCKT_RST       (PCKT_RST), 
   .busy           (busy), 
   .wtdg_rstrt     (wtdg_rstrt), 
   .NO_0_1_o       (NO_0_1_o), 
   .SEG_ID         (SEG_ID)
); 


zero_one_detector zero_one_detector( 
   .CLK      (CLK), 
   .RST      (RST), 
   .MEMA     (MEMA), 
   .MEMC     (MEMC), 
   .EN       (EN_01), 
   .buffwrA  (buffwrA), 
   .buffwrC  (buffwrC), 
   .buffwrD  (buffwrD), 
   .busy     (busy), 
   .data_out (data_out), 
   .START    (START), 
   .NO_0_1   (NO_01)
); 


// ModuleWare code(v1.9) for instance 'U_1' of 'and'
assign RST = rst_b & wtdg_rst_b;

endmodule // R3_DCL

