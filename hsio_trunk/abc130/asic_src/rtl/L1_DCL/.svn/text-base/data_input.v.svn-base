//--------------------------------------------------
//--                                                                               
//-- version 1.8  
//--                                                                               
//--------------------------------------------------
//--------------------------------------------------
//  
//      Verilog code generated by Visual Elite
//
//  Design Unit:
//  ------------
//      Unit    Name  :  data_input
//      Library Name  :  L1_DCL
//  
//      Creation Date :  Fri Apr 20 15:43:23 2012
//      Version       :  2011.02 v4.3.0 build 24. Date: Mar 21 2011. License: 2011.3
//  
//  Options Used:
//  -------------
//      Target
//         Language   :  Verilog
//         Purpose    :  Synthesis
//         Vendor     :  Leonardo
//  
//      Style
//         Use tasks                      :  No
//         Code Destination               :  Combined file
//         Attach Directives              :  Yes
//         Structural                     :  No
//         Free text style                :  / / ...
//         Preserve spacing for free text :  Yes
//         Declaration alignment          :  No
//
//--------------------------------------------------
//--------------------------------------------------
//  
//  Library Name :  L1_DCL
//  Unit    Name :  data_input
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
//////////////////////////////////////////
//////////////////////////////////////////
// Date        : Wed Feb 23 08:45:14 2011
//
// Author      : Pernecker Sébastien / Daniel La Marra
//
// Company     : Physics school - DPNC
//
// Description : Three time slot registers loaded from the pipeline
//
//////////////////////////////////////////
//////////////////////////////////////////


`timescale  1ns /  1ps

module data_input(clk, rst_b, wr_disable, mode, in_mema, in_memc, in_memd, buff_wra, buff_wrc, buff_wrd, scan, force_scan, hit_found, scan_finished, ch, hit0, hit1, hit2, hit3);

   output               hit_found, scan_finished;
   output [6:0]         ch;
   output [2:0]         hit0,hit1,hit2,hit3;
 			 
   input [127:0]        in_mema, in_memc, in_memd;
   input [1:0]          mode;
   input                buff_wra, buff_wrc, buff_wrd;
   input                wr_disable;
   input                force_scan;
   input                scan;
   input                rst_b;
   input                clk;
   
   // Register in the design
   reg [127:0] 	 pattern_new;
   reg [127:0] 	 pattern_middle;
   reg [127:0] 	 pattern_old;
   reg [6:0]     ch;
   reg           found, scan_finished;

   //Wire
   wire [2:0]    hit0,hit1,hit2,hit3;
   wire          stop_scan, force_scan, scan, hit_found;
   wire          buff_wra, buff_wrc, buff_wrd;

   assign        hit0[0] = pattern_new[0];
   assign        hit0[1] = pattern_middle[0];
   assign        hit0[2] = pattern_old[0];

   assign        hit1[0] = pattern_new[1];
   assign        hit1[1] = pattern_middle[1];
   assign        hit1[2] = pattern_old[1];

   assign        hit2[0] = pattern_new[2];
   assign        hit2[1] = pattern_middle[2];
   assign        hit2[2] = pattern_old[2];

   assign        hit3[0] = pattern_new[3];
   assign        hit3[1] = pattern_middle[3];
   assign        hit3[2] = pattern_old[3];

   assign stop_scan = (~mode[1] && ~mode[0] && ( pattern_new[0] || pattern_middle[0] || pattern_old[0] ) ||
                      ~mode[1] &&  mode[0] && pattern_middle[0] ||
                       mode[1] && ~mode[0] && ~pattern_old[0] && pattern_middle[0] ||
                       mode[1] &&  mode[0]) &&
                       ~force_scan;

   assign hit_found = found && stop_scan;
   
   always @(posedge clk or negedge rst_b) begin
      if(~rst_b) begin
         pattern_new[127:0] <= {128{1'b0}};
         pattern_middle[127:0] <= {128{1'b0}};
         pattern_old[127:0] <= {128{1'b0}};
         found <= 1'b0;
         ch <= 7'b0;
         scan_finished <= 1'b0;
      end
      else begin
	 if(buff_wra && ~wr_disable) begin
	    pattern_new[127:0] <= in_mema[127:0];
         end
         if(buff_wrc && ~wr_disable) begin
	    pattern_middle[127:0] <= in_memc[127:0];
         end
         if(buff_wrd && ~wr_disable) begin
	    pattern_old[127:0] <= in_memd[127:0];
            ch <= 7'b0;
            scan_finished <= 1'b0;
	 end
         case (mode)
           2'b00: begin
	      // Detector allignement
              found <= pattern_new[0] | pattern_middle[0] | pattern_old[0];
           end
           2'b01: begin
	      // Normal Data Taking: Level
              found <= pattern_middle[0];
           end
           2'b10: begin
	      // Normal Data Taking: Edge
              found <= ~pattern_old[0] & pattern_middle[0];
           end
           2'b11: begin
	      // Test mode
              found <= 1'b1;
           end
         endcase // case(mode)
         if (scan && ~stop_scan) begin
            pattern_new[127:0] <= {1'b0,pattern_new[127:1]};
            pattern_middle[127:0] <= {1'b0,pattern_middle[127:1]};
            pattern_old[127:0] <= {1'b0,pattern_old[127:1]};
            if (ch==7'b1111111) begin
               scan_finished <= 1'b1;
            end
            else begin
               ch <= ch + 1;
            end
         end // if (scan && ~stop_scan)
      end
   end 
endmodule



