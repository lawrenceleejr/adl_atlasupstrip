//--------------------------------------------------
//--                                                                               
//-- version 1.8  
//--                                                                               
//--------------------------------------------------
//--------------------------------------------------
//  
//      Verilog code generated by Visual Elite
//
//  Design Unit:
//  ------------
//      Unit    Name  :  top_l1_dcl
//      Library Name  :  L1_DCL
//  
//      Creation Date :  Fri Apr 20 15:42:59 2012
//      Version       :  2011.02 v4.3.0 build 24. Date: Mar 21 2011. License: 2011.3
//  
//  Options Used:
//  -------------
//      Target
//         Language   :  Verilog
//         Purpose    :  Synthesis
//         Vendor     :  Leonardo
//  
//      Style
//         Use tasks                      :  No
//         Code Destination               :  Combined file
//         Attach Directives              :  Yes
//         Structural                     :  No
//         Free text style                :  / / ...
//         Preserve spacing for free text :  Yes
//         Declaration alignment          :  No
//         Sort Ports by mode             :  No
//         New line for each Port         :  No
//         Attach comment to Port         :  No
//
//--------------------------------------------------
//--------------------------------------------------
//  
//  Library Name :  L1_DCL
//  Unit    Name :  top_l1_dcl
//  Unit    Type :  Block Diagram
//  
//----------------------------------------------------
 
 
`timescale 1ns/100ps
module top_l1_dcl (buff_wra, buff_wrc, buff_wrd, clk, packet, rst_b,
                   wtdg_rst_b, fifo_full, busy, fifowr, mode, mcluster,
                   in_mema, in_memc, in_memd, wtdg_rstrt
                   );
 
  input buff_wra;
  wire buff_wra;
  input buff_wrc;
  wire buff_wrc;
  input buff_wrd;
  wire buff_wrd;
  input clk;
  wire clk;
  output [50:0] packet;
  wire [50:0] packet;
  input rst_b;
  wire rst_b;
  input wtdg_rst_b;
  wire wtdg_rst_b;
  input fifo_full;
  wire fifo_full;
  output busy;
  wire busy;
  output fifowr;
  wire fifowr;
  input [1:0] mode;
  wire [1:0] mode;
  input mcluster;
  wire mcluster;
  input [271:0] in_mema;
  wire [271:0] in_mema;
  input [271:0] in_memc;
  wire [271:0] in_memc;
  input [271:0] in_memd;
  wire [271:0] in_memd;
  output wtdg_rstrt;
  wire wtdg_rstrt;
  wire datavalid;
  wire [127:0] even_mema;
  wire [127:0] even_memc;
  wire [127:0] even_memd;
  wire odd_scan;
  wire wtdg_fmgr_rstrt;
  wire even_hit_found;
  wire next_hit;
  wire even_force_scan;
  wire wtdg_ctrl_rstrt;
  wire even_scan;
  wire even_scan_finished;
  wire [6:0] odd_ch;
  wire even_selected;
  wire [2:0] odd_hit0;
  wire [2:0] odd_hit1;
  wire [2:0] odd_hit2;
  wire [2:0] hit0;
  wire [2:0] hit1;
  wire [2:0] odd_hit3;
  wire [2:0] hit2;
  wire [2:0] hit3;
  wire [6:0] even_ch;
  wire odd_hit_found;
  wire odd_scan_finished;
  wire [127:0] odd_mema;
  wire [7:0] ch;
  wire [127:0] odd_memc;
  wire [127:0] odd_memd;
  wire reset_b;
  wire [2:0] even_hit0;
  wire odd_selected;
  wire [2:0] even_hit1;
  wire [2:0] even_hit2;
  wire [2:0] even_hit3;
  wire odd_force_scan;
  wire [15:0] L1_BCids;
  wire finished;
 
  re_arrange  re_arange_mema
    (
     .data_even(even_mema[127:0]),
     .data_odd(odd_mema[127:0]),
     .indata(in_mema[255:0])
     );
 
  data_input_ids  data_input_ids
    (
     .clk(clk),
     .rst_b(reset_b),
     .buffwr(buff_wrc),
     .indata(in_memc[271:256]),
     .L1_BCids(L1_BCids[15:0])
     );
 
  fifo_manager  fifo_manager
    (
     .clk(clk),
     .rst_b(reset_b),
     .L1_BCids(L1_BCids[15:0]),
     .packet(packet[50:0]),
     .fifowr(fifowr),
     .fifo_full(fifo_full),
     .datavalid(datavalid),
     .next_hit(next_hit),
     .mcluster(mcluster),
     .ch(ch[7:0]),
     .hit0(hit0[2:0]),
     .hit1(hit1[2:0]),
     .hit2(hit2[2:0]),
     .hit3(hit3[2:0]),
     .finished(finished),
     .wtdg_rstrt(wtdg_fmgr_rstrt)
     );
 
  re_arrange  re_arange_memc
    (
     .data_even(even_memc[127:0]),
     .data_odd(odd_memc[127:0]),
     .indata(in_memc[255:0])
     );
 
  re_arrange  re_arrange_memd
    (
     .data_even(even_memd[127:0]),
     .data_odd(odd_memd[127:0]),
     .indata(in_memd[255:0])
     );
 
  controller  controller
    (
     .clk(clk),
     .rst_b(reset_b),
     .busy(busy),
     .buffwr(buff_wrd),
     .odd_scan(odd_scan),
     .even_scan(even_scan),
     .odd_hit_found(odd_hit_found),
     .even_hit_found(even_hit_found),
     .odd_selected(odd_selected),
     .even_selected(even_selected),
     .next_hit(next_hit),
     .datavalid(datavalid),
     .even_scan_finished(even_scan_finished),
     .odd_scan_finished(odd_scan_finished),
     .even_force_scan(even_force_scan),
     .odd_force_scan(odd_force_scan),
     .finished(finished),
     .wtdg_rstrt(wtdg_ctrl_rstrt)
     );
 
  even_odd_mux  mux
    (
     .ch(ch[7:0]),
     .even_ch(even_ch[6:0]),
     .even_hit0(even_hit0[2:0]),
     .even_hit1(even_hit1[2:0]),
     .even_hit2(even_hit2[2:0]),
     .even_hit3(even_hit3[2:0]),
     .even_selected(even_selected),
     .hit0(hit0[2:0]),
     .hit1(hit1[2:0]),
     .hit2(hit2[2:0]),
     .hit3(hit3[2:0]),
     .odd_ch(odd_ch[6:0]),
     .odd_hit0(odd_hit0[2:0]),
     .odd_hit1(odd_hit1[2:0]),
     .odd_hit2(odd_hit2[2:0]),
     .odd_hit3(odd_hit3[2:0]),
     .odd_selected(odd_selected)
     );
 
  data_input  odd_data_input
    (
     .clk(clk),
     .rst_b(reset_b),
     .wr_disable(busy),
     .mode(mode[1:0]),
     .in_mema(odd_mema[127:0]),
     .in_memc(odd_memc[127:0]),
     .in_memd(odd_memd[127:0]),
     .buff_wra(buff_wra),
     .buff_wrc(buff_wrc),
     .buff_wrd(buff_wrd),
     .scan(odd_scan),
     .force_scan(odd_force_scan),
     .hit_found(odd_hit_found),
     .scan_finished(odd_scan_finished),
     .ch(odd_ch[6:0]),
     .hit0(odd_hit0[2:0]),
     .hit1(odd_hit1[2:0]),
     .hit2(odd_hit2[2:0]),
     .hit3(odd_hit3[2:0])
     );
 
  data_input  even_data_input
    (
     .clk(clk),
     .rst_b(reset_b),
     .wr_disable(busy),
     .mode(mode[1:0]),
     .in_mema(even_mema[127:0]),
     .in_memc(even_memc[127:0]),
     .in_memd(even_memd[127:0]),
     .buff_wra(buff_wra),
     .buff_wrc(buff_wrc),
     .buff_wrd(buff_wrd),
     .scan(even_scan),
     .force_scan(even_force_scan),
     .hit_found(even_hit_found),
     .scan_finished(even_scan_finished),
     .ch(even_ch[6:0]),
     .hit0(even_hit0[2:0]),
     .hit1(even_hit1[2:0]),
     .hit2(even_hit2[2:0]),
     .hit3(even_hit3[2:0])
     );
 
  assign reset_b = ~((~ wtdg_rst_b) | (~ rst_b));
 
  assign wtdg_rstrt = ( wtdg_ctrl_rstrt) | ( wtdg_fmgr_rstrt);
 
 
endmodule

