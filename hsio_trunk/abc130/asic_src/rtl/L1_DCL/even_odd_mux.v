//--------------------------------------------------
//--                       
//-- version 1.4  
//--                       
//--------------------------------------------------
//--------------------------------------------------
//  
//      Verilog code generated by Visual Elite
//
//  Design Unit:
//  ------------
//      Unit    Name  :  even_odd_mux
//      Library Name  :  L1_DCL
//  
//      Creation Date :  Tue Sep 13 09:31:50 2011
//      Version       :  2011.02 v4.3.0 build 24. Date: Mar 21 2011. License: 2011.3
//  
//  Options Used:
//  -------------
//      Target
//         Language   :  Verilog
//         Purpose    :  Synthesis
//         Vendor     :  Leonardo
//  
//      Style
//         Use tasks                      :  No
//         Code Destination               :  Combined file
//         Attach Directives              :  Yes
//         Structural                     :  No
//         Free text style                :  / / ...
//         Preserve spacing for free text :  Yes
//         Declaration alignment          :  No
//
//--------------------------------------------------
//--------------------------------------------------
//  
//  Library Name :  L1_DCL
//  Unit    Name :  even_odd_mux
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
//////////////////////////////////////////
//////////////////////////////////////////
// Date        : Mon Feb 28 09:28:11 2011
//
// Author      : 
//
// Company     : 
//
// Description : 
//
//////////////////////////////////////////
//////////////////////////////////////////

`timescale 1ns/100ps

module  even_odd_mux(even_selected,odd_selected,
                     even_ch, even_hit0, even_hit1, even_hit2, even_hit3,
                     odd_ch, odd_hit0, odd_hit1, odd_hit2, odd_hit3,
                     ch, hit0,hit1,hit2,hit3);
   input even_selected, odd_selected;
   input [6:0] even_ch;
   input [2:0] even_hit0, even_hit1, even_hit2, even_hit3;
   input [6:0] odd_ch; 
   input [2:0] odd_hit0, odd_hit1, odd_hit2, odd_hit3;

   output [7:0] ch;
   output [2:0] hit0,hit1,hit2,hit3;

   wire       even_selected, odd_selected;
   wire [6:0] even_ch;
   wire [2:0] even_hit0, even_hit1, even_hit2, even_hit3;
   wire [6:0] odd_ch;
   wire [2:0] odd_hit0, odd_hit1, odd_hit2, odd_hit3;

   wire [7:0] ch;
   wire [2:0] hit0, hit1, hit2, hit3;

   assign     ch[7] = odd_selected & ~even_selected;

   assign     ch[6] = even_ch[6] & ~odd_selected & even_selected |
              odd_ch[6] & odd_selected & ~even_selected;
   
   assign     ch[5] = even_ch[5] & ~odd_selected & even_selected |
              odd_ch[5] & odd_selected & ~even_selected;
   
   assign     ch[4] = even_ch[4] & ~odd_selected & even_selected |
              odd_ch[4] & odd_selected & ~even_selected;
   
   assign     ch[3] = even_ch[3] & ~odd_selected & even_selected |
              odd_ch[3] & odd_selected & ~even_selected;
   
   assign     ch[2] = even_ch[2] & ~odd_selected & even_selected |
              odd_ch[2] & odd_selected & ~even_selected;
   
   assign     ch[1] = even_ch[1] & ~odd_selected & even_selected |
              odd_ch[1] & odd_selected & ~even_selected;
   
   assign     ch[0] = even_ch[0] & ~odd_selected & even_selected |
              odd_ch[0] & odd_selected & ~even_selected;
   
   assign hit0[0] = even_hit0[0] & ~odd_selected & even_selected |
                    odd_hit0[0] & odd_selected &~even_selected;

   assign hit0[1] = even_hit0[1] & ~odd_selected & even_selected |
                    odd_hit0[1] & odd_selected &~even_selected;

   assign hit0[2] = even_hit0[2] & ~odd_selected & even_selected |
                    odd_hit0[2] & odd_selected &~even_selected;

   assign hit1[0] = even_hit1[0] & ~odd_selected & even_selected |
                    odd_hit1[0] & odd_selected &~even_selected;

   assign hit1[1] = even_hit1[1] & ~odd_selected & even_selected |
                    odd_hit1[1] & odd_selected &~even_selected;

   assign hit1[2] = even_hit1[2] & ~odd_selected & even_selected |
                    odd_hit1[2] & odd_selected &~even_selected;

   assign hit2[0] = even_hit2[0] & ~odd_selected & even_selected |
                    odd_hit2[0] & odd_selected &~even_selected;

   assign hit2[1] = even_hit2[1] & ~odd_selected & even_selected |
                    odd_hit2[1] & odd_selected &~even_selected;

   assign hit2[2] = even_hit2[2] & ~odd_selected & even_selected |
                    odd_hit2[2] & odd_selected &~even_selected;

   assign hit3[0] = even_hit3[0] & ~odd_selected & even_selected |
                    odd_hit3[0] & odd_selected &~even_selected;
   
   assign hit3[1] = even_hit3[1] & ~odd_selected & even_selected |
                    odd_hit3[1] & odd_selected &~even_selected;
   
   assign hit3[2] = even_hit3[2] & ~odd_selected & even_selected |
                    odd_hit3[2] & odd_selected &~even_selected;
   
endmodule


