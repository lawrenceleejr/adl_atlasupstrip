//--------------------------------------------------
//--                                                                                                                      
//-- version 1.2 
//--                                                                                                                      
//--------------------------------------------------
//--------------------------------------------------
//  
//      Verilog code generated by Visual Elite
//
//  Design Unit:
//  ------------
//      Unit    Name  :  watchdog_counter
//      Library Name  :  WatchDog
//  
//      Creation Date :  Wed Jul 25 10:07:07 2012
//      Version       :  2011.02 v4.3.0 build 24. Date: Mar 21 2011. License: 2011.3
//  
//  Options Used:
//  -------------
//      Target
//         Language   :  Verilog
//         Purpose    :  Synthesis
//         Vendor     :  Leonardo
//  
//      Style
//         Use tasks                      :  No
//         Code Destination               :  Combined file
//         Attach Directives              :  Yes
//         Structural                     :  No
//         Free text style                :  / / ...
//         Preserve spacing for free text :  Yes
//         Declaration alignment          :  No
//
//--------------------------------------------------
//--------------------------------------------------
//  
//  Library Name :  WatchDog
//  Unit    Name :  watchdog_counter
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
//////////////////////////////////////////
//////////////////////////////////////////
// Date        : Fri Nov 04 08:28:07 2011
//
// Author      : Daniel La Marra
//
// Company     : Physics school - DPNC
//
// Description : Watchdog counter - wtdg_rst_b goes to "0" when counter reatches zéro
//
//////////////////////////////////////////
//////////////////////////////////////////

`timescale  1ns /  1ps

module watchdog_counter (clk, rst_b, enable, remove_flag, wtdg_rstrt, wtdg_rst_b, flag);

input clk, rst_b, enable, remove_flag, wtdg_rstrt;
output wtdg_rst_b, flag;

wire clk, rst_b, enable, remove_flag, wtdg_rstrt, wtdg_rst_b;

parameter counter_width=2;
parameter count_limit=2'h3;

reg [(counter_width-1):0] counter;
reg flag;

assign wtdg_rst_b = (|counter) || ~enable;

always @(posedge clk) begin
   if (~rst_b) begin
      flag <= 1'b0;
      counter <= count_limit;
   end
   else begin
      if (enable) begin
         if (~wtdg_rst_b) begin
            flag <= 1'b1;
         end
         else begin
            if (remove_flag) begin
               flag <= 1'b0;
            end
         end
         if (wtdg_rstrt) begin
            counter <= count_limit;
         end
         else begin
            counter <= counter - 1;
         end
      end
   end
end

endmodule

