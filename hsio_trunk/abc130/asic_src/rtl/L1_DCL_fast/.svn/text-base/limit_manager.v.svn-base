//--------------------------------------------------
//--                                                                                                                                                  
//--version 1.3  
//--                                                                                                                                                  
//--------------------------------------------------
//--------------------------------------------------
//  
//      Verilog code generated by Visual Elite
//
//  Design Unit:
//  ------------
//      Unit    Name  :  limit_manager
//      Library Name  :  L1_DCL_fast
//  
//      Creation Date :  Wed Sep 12 15:05:38 2012
//      Version       :  2011.02 v4.3.0 build 24. Date: Mar 21 2011. License: 2011.3
//  
//  Options Used:
//  -------------
//      Target
//         Language   :  Verilog
//         Purpose    :  Synthesis
//         Vendor     :  Leonardo
//  
//      Style
//         Use tasks                      :  No
//         Code Destination               :  Combined file
//         Attach Directives              :  Yes
//         Structural                     :  No
//         Free text style                :  / / ...
//         Preserve spacing for free text :  Yes
//         Declaration alignment          :  No
//
//--------------------------------------------------
//--------------------------------------------------
//  
//  Library Name :  L1_DCL_fast
//  Unit    Name :  limit_manager
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
//////////////////////////////////////////
//////////////////////////////////////////
// Date        : Wed Aug 29 15:02:23 2012
//
// Author      : Daniel La Marra
//
// Company     : Physics school - DPNC
//
// Description : Packet counter with limitation signal.
//
//////////////////////////////////////////
//////////////////////////////////////////

`timescale  1ns/1ps

module  limit_manager(clk, rst_b, packet_limit, limit_enable, fifowr, busy, limit_reached);

input [5:0] packet_limit;
input       clk, rst_b, limit_enable, fifowr, busy;

output      limit_reached;

wire  [5:0] packet_limit;
wire        clk, rst_b, limit_enable, fifowr, busy;

reg   [5:0] counter;
reg         limit_reached;

always @(posedge clk) begin
   if (~rst_b || ~limit_enable)
   begin
      limit_reached <= 1'b0;
   end
   else
   begin
      if (~busy) begin
         counter <= packet_limit - 1;
         limit_reached <= 1'b0;
      end
      else begin
         if (fifowr) begin
            if (counter==6'b000000) begin
               limit_reached <= 1'b1;
            end
            else begin
               counter <= counter - 1;
            end
         end
      end
   end
end
endmodule


