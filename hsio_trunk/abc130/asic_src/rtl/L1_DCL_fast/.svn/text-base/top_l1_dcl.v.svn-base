//--------------------------------------------------
//--                                                                                                                                                                                                        
//--version 1.5  
//--                                                                                                                                                                                                        
//--------------------------------------------------
//--------------------------------------------------
//  
//      Verilog code generated by Visual Elite
//
//  Design Unit:
//  ------------
//      Unit    Name  :  top_l1_dcl
//      Library Name  :  L1_DCL_fast
//  
//      Creation Date :  Mon Jan 14 11:47:46 2013
//      Version       :  2011.02 v4.3.0 build 24. Date: Mar 21 2011. License: 2011.3
//  
//  Options Used:
//  -------------
//      Target
//         Language   :  Verilog
//         Purpose    :  Synthesis
//         Vendor     :  Leonardo
//  
//      Style
//         Use tasks                      :  No
//         Code Destination               :  Combined file
//         Attach Directives              :  Yes
//         Structural                     :  No
//         Free text style                :  / / ...
//         Preserve spacing for free text :  Yes
//         Declaration alignment          :  No
//         Sort Ports by mode             :  No
//         New line for each Port         :  No
//         Attach comment to Port         :  No
//
//--------------------------------------------------
//--------------------------------------------------
//  
//  Library Name :  L1_DCL_fast
//  Unit    Name :  top_l1_dcl
//  Unit    Type :  Block Diagram
//  
//----------------------------------------------------
 
 
`timescale 1ns/1ps
module top_l1_dcl (wtdg_rstrt, packet_limit, fifo_full, fifowr, mcluster, busy,
                   two_cluster, wtdg_rst_b, buff_wra, mode, buff_wrc, buff_wrd,
                   clk, packet, rst_b, in_mema, limit_enable, in_memc, in_memd
                   );
 
  output wtdg_rstrt;
  wire wtdg_rstrt;
  input [5:0] packet_limit;
  wire [5:0] packet_limit;
  input fifo_full;
  wire fifo_full;
  output fifowr;
  wire fifowr;
  input mcluster;
  wire mcluster;
  output busy;
  wire busy;
  input two_cluster;
  wire two_cluster;
  input wtdg_rst_b;
  wire wtdg_rst_b;
  input buff_wra;
  wire buff_wra;
  input [1:0] mode;
  wire [1:0] mode;
  input buff_wrc;
  wire buff_wrc;
  input buff_wrd;
  wire buff_wrd;
  input clk;
  wire clk;
  output [50:0] packet;
  wire [50:0] packet;
  input rst_b;
  wire rst_b;
  input [255:0] in_mema;
  wire [255:0] in_mema;
  input limit_enable;
  wire limit_enable;
  input [271:0] in_memc;
  wire [271:0] in_memc;
  input [255:0] in_memd;
  wire [255:0] in_memd;
  wire [7:0] ch;
  wire odd_up_force_scan;
  wire even_dwn_force_scan;
  wire odd_dwn_force_scan;
  wire even_up_scan;
  wire [63:0] even_up_mema;
  wire [63:0] even_up_memc;
  wire [63:0] even_up_memd;
  wire wtdg_fmgr_rstrt;
  wire reset_b;
  wire [5:0] even_up_ch;
  wire [63:0] odd_up_mema;
  wire [63:0] odd_up_memc;
  wire [63:0] odd_up_memd;
  wire next_hit;
  wire [2:0] hit0;
  wire odd_up_scan_finished;
  wire [2:0] hit1;
  wire [5:0] even_dwn_ch;
  wire [2:0] hit2;
  wire [2:0] hit3;
  wire even_dwn_scan;
  wire odd_dwn_selected;
  wire [2:0] even_dwn_hit0;
  wire [2:0] even_dwn_hit1;
  wire [2:0] even_dwn_hit2;
  wire [2:0] even_dwn_hit3;
  wire odd_up_hit_found;
  wire [5:0] odd_dwn_ch;
  wire wtdg_ctrl_rstrt;
  wire [2:0] odd_up_hit0;
  wire odd_up_selected;
  wire [2:0] odd_up_hit1;
  wire datavalid;
  wire [2:0] odd_up_hit2;
  wire [2:0] odd_up_hit3;
  wire odd_dwn_scan;
  wire [2:0] odd_dwn_hit0;
  wire [2:0] odd_dwn_hit1;
  wire [2:0] odd_dwn_hit2;
  wire [2:0] odd_dwn_hit3;
  wire odd_dwn_scan_finished;
  wire even_up_force_scan;
  wire odd_dwn_hit_found;
  wire [63:0] odd_dwn_mema;
  wire [63:0] odd_dwn_memc;
  wire [63:0] odd_dwn_memd;
  wire finished;
  wire even_up_hit_found;
  wire [5:0] odd_up_ch;
  wire [15:0] L1_BCids;
  wire [63:0] even_dwn_mema;
  wire [63:0] even_dwn_memc;
  wire [63:0] even_dwn_memd;
  wire even_dwn_selected;
  wire even_up_scan_finished;
  wire [2:0] even_up_hit0;
  wire [2:0] even_up_hit1;
  wire [2:0] even_up_hit2;
  wire [2:0] even_up_hit3;
  wire even_up_selected;
  wire limit_reached;
  wire even_dwn_scan_finished;
  wire odd_up_scan;
  wire even_dwn_hit_found;
 
  data_input_ids  data_input_ids
    (
     .clk(clk),
     .rst_b(reset_b),
     .buffwr(buff_wrc),
     .indata(in_memc[271:256]),
     .L1_BCids(L1_BCids[15:0])
     );
 
  re_arrange  re_arange_mema
    (
     .indata(in_mema[255:0]),
     .data_odd_up(odd_up_mema[63:0]),
     .data_odd_down(odd_dwn_mema[63:0]),
     .data_even_up(even_up_mema[63:0]),
     .data_even_down(even_dwn_mema[63:0])
     );
 
  re_arrange  re_arange_memc
    (
     .indata(in_memc[255:0]),
     .data_odd_up(odd_up_memc[63:0]),
     .data_odd_down(odd_dwn_memc[63:0]),
     .data_even_up(even_up_memc[63:0]),
     .data_even_down(even_dwn_memc[63:0])
     );
 
  re_arrange  re_arrange_memd
    (
     .indata(in_memd[255:0]),
     .data_odd_up(odd_up_memd[63:0]),
     .data_odd_down(odd_dwn_memd[63:0]),
     .data_even_up(even_up_memd[63:0]),
     .data_even_down(even_dwn_memd[63:0])
     );
 
  data_input  odd_dwn_data_input
    (
     .clk(clk),
     .rst_b(reset_b),
     .wr_disable(busy),
     .mode(mode[1:0]),
     .in_mema(odd_dwn_mema[63:0]),
     .in_memc(odd_dwn_memc[63:0]),
     .in_memd(odd_dwn_memd[63:0]),
     .buff_wra(buff_wra),
     .buff_wrc(buff_wrc),
     .buff_wrd(buff_wrd),
     .scan(odd_dwn_scan),
     .force_scan(odd_dwn_force_scan),
     .hit_found(odd_dwn_hit_found),
     .scan_finished(odd_dwn_scan_finished),
     .ch(odd_dwn_ch[5:0]),
     .hit0(odd_dwn_hit0[2:0]),
     .hit1(odd_dwn_hit1[2:0]),
     .hit2(odd_dwn_hit2[2:0]),
     .hit3(odd_dwn_hit3[2:0])
     );
 
  even_odd_up_down_mux  mux
    (
     .even_dwn_selected(even_dwn_selected),
     .even_up_selected(even_up_selected),
     .odd_dwn_selected(odd_dwn_selected),
     .odd_up_selected(odd_up_selected),
     .even_dwn_ch(even_dwn_ch[5:0]),
     .even_dwn_hit0(even_dwn_hit0[2:0]),
     .even_dwn_hit1(even_dwn_hit1[2:0]),
     .even_dwn_hit2(even_dwn_hit2[2:0]),
     .even_dwn_hit3(even_dwn_hit3[2:0]),
     .even_up_ch(even_up_ch[5:0]),
     .even_up_hit0(even_up_hit0[2:0]),
     .even_up_hit1(even_up_hit1[2:0]),
     .even_up_hit2(even_up_hit2[2:0]),
     .even_up_hit3(even_up_hit3[2:0]),
     .odd_dwn_ch(odd_dwn_ch[5:0]),
     .odd_dwn_hit0(odd_dwn_hit0[2:0]),
     .odd_dwn_hit1(odd_dwn_hit1[2:0]),
     .odd_dwn_hit2(odd_dwn_hit2[2:0]),
     .odd_dwn_hit3(odd_dwn_hit3[2:0]),
     .odd_up_ch(odd_up_ch[5:0]),
     .odd_up_hit0(odd_up_hit0[2:0]),
     .odd_up_hit1(odd_up_hit1[2:0]),
     .odd_up_hit2(odd_up_hit2[2:0]),
     .odd_up_hit3(odd_up_hit3[2:0]),
     .ch(ch[7:0]),
     .hit0(hit0[2:0]),
     .hit1(hit1[2:0]),
     .hit2(hit2[2:0]),
     .hit3(hit3[2:0])
     );
 
  data_input  odd_up_data_input
    (
     .clk(clk),
     .rst_b(reset_b),
     .wr_disable(busy),
     .mode(mode[1:0]),
     .in_mema(odd_up_mema[63:0]),
     .in_memc(odd_up_memc[63:0]),
     .in_memd(odd_up_memd[63:0]),
     .buff_wra(buff_wra),
     .buff_wrc(buff_wrc),
     .buff_wrd(buff_wrd),
     .scan(odd_up_scan),
     .force_scan(odd_up_force_scan),
     .hit_found(odd_up_hit_found),
     .scan_finished(odd_up_scan_finished),
     .ch(odd_up_ch[5:0]),
     .hit0(odd_up_hit0[2:0]),
     .hit1(odd_up_hit1[2:0]),
     .hit2(odd_up_hit2[2:0]),
     .hit3(odd_up_hit3[2:0])
     );
 
  data_input  even_dwn_data_input
    (
     .clk(clk),
     .rst_b(reset_b),
     .wr_disable(busy),
     .mode(mode[1:0]),
     .in_mema(even_dwn_mema[63:0]),
     .in_memc(even_dwn_memc[63:0]),
     .in_memd(even_dwn_memd[63:0]),
     .buff_wra(buff_wra),
     .buff_wrc(buff_wrc),
     .buff_wrd(buff_wrd),
     .scan(even_dwn_scan),
     .force_scan(even_dwn_force_scan),
     .hit_found(even_dwn_hit_found),
     .scan_finished(even_dwn_scan_finished),
     .ch(even_dwn_ch[5:0]),
     .hit0(even_dwn_hit0[2:0]),
     .hit1(even_dwn_hit1[2:0]),
     .hit2(even_dwn_hit2[2:0]),
     .hit3(even_dwn_hit3[2:0])
     );
 
  data_input  even_up_data_input
    (
     .clk(clk),
     .rst_b(reset_b),
     .wr_disable(busy),
     .mode(mode[1:0]),
     .in_mema(even_up_mema[63:0]),
     .in_memc(even_up_memc[63:0]),
     .in_memd(even_up_memd[63:0]),
     .buff_wra(buff_wra),
     .buff_wrc(buff_wrc),
     .buff_wrd(buff_wrd),
     .scan(even_up_scan),
     .force_scan(even_up_force_scan),
     .hit_found(even_up_hit_found),
     .scan_finished(even_up_scan_finished),
     .ch(even_up_ch[5:0]),
     .hit0(even_up_hit0[2:0]),
     .hit1(even_up_hit1[2:0]),
     .hit2(even_up_hit2[2:0]),
     .hit3(even_up_hit3[2:0])
     );
 
  limit_manager  limit_manager
    (
     .clk(clk),
     .rst_b(reset_b),
     .packet_limit(packet_limit[5:0]),
     .limit_enable(limit_enable),
     .fifowr(fifowr),
     .busy(busy),
     .limit_reached(limit_reached)
     );
 
  controller  controller
    (
     .clk(clk),
     .rst_b(reset_b),
     .busy(busy),
     .buffwr(buff_wrd),
     .odd_dwn_scan(odd_dwn_scan),
     .even_dwn_scan(even_dwn_scan),
     .odd_up_scan(odd_up_scan),
     .even_up_scan(even_up_scan),
     .odd_dwn_hit_found(odd_dwn_hit_found),
     .even_dwn_hit_found(even_dwn_hit_found),
     .odd_up_hit_found(odd_up_hit_found),
     .even_up_hit_found(even_up_hit_found),
     .odd_dwn_selected(odd_dwn_selected),
     .even_dwn_selected(even_dwn_selected),
     .odd_up_selected(odd_up_selected),
     .even_up_selected(even_up_selected),
     .next_hit(next_hit),
     .datavalid(datavalid),
     .even_dwn_scan_finished(even_dwn_scan_finished),
     .odd_dwn_scan_finished(odd_dwn_scan_finished),
     .even_up_scan_finished(even_up_scan_finished),
     .odd_up_scan_finished(odd_up_scan_finished),
     .even_dwn_force_scan(even_dwn_force_scan),
     .odd_dwn_force_scan(odd_dwn_force_scan),
     .even_up_force_scan(even_up_force_scan),
     .odd_up_force_scan(odd_up_force_scan),
     .finished(finished),
     .wtdg_rstrt(wtdg_ctrl_rstrt),
     .limit_reached(limit_reached)
     );
 
  fifo_manager  fifo_manager
    (
     .clk(clk),
     .rst_b(reset_b),
     .L1_BCids(L1_BCids[15:0]),
     .packet(packet[50:0]),
     .fifowr(fifowr),
     .fifo_full(fifo_full),
     .datavalid(datavalid),
     .next_hit(next_hit),
     .mcluster(mcluster),
     .ch(ch[7:0]),
     .hit0(hit0[2:0]),
     .hit1(hit1[2:0]),
     .hit2(hit2[2:0]),
     .hit3(hit3[2:0]),
     .finished(finished),
     .wtdg_rstrt(wtdg_fmgr_rstrt),
     .limit_reached(limit_reached),
     .two_cluster(two_cluster)
     );
 
  assign reset_b = ~((~ wtdg_rst_b) | (~ rst_b));
 
  assign wtdg_rstrt = ( wtdg_ctrl_rstrt) | ( wtdg_fmgr_rstrt);
 
 
endmodule

