//--------------------------------------------------
//--                                                                                                                                                  
//--version 1.3  
//--                                                                                                                                                  
//--------------------------------------------------
//--------------------------------------------------
//  
//      Verilog code generated by Visual Elite
//
//  Design Unit:
//  ------------
//      Unit    Name  :  even_odd_up_down_mux
//      Library Name  :  L1_DCL_fast
//  
//      Creation Date :  Wed Sep 12 15:05:22 2012
//      Version       :  2011.02 v4.3.0 build 24. Date: Mar 21 2011. License: 2011.3
//  
//  Options Used:
//  -------------
//      Target
//         Language   :  Verilog
//         Purpose    :  Synthesis
//         Vendor     :  Leonardo
//  
//      Style
//         Use tasks                      :  No
//         Code Destination               :  Combined file
//         Attach Directives              :  Yes
//         Structural                     :  No
//         Free text style                :  / / ...
//         Preserve spacing for free text :  Yes
//         Declaration alignment          :  No
//
//--------------------------------------------------
//--------------------------------------------------
//  
//  Library Name :  L1_DCL_fast
//  Unit    Name :  even_odd_up_down_mux
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
//////////////////////////////////////////
//////////////////////////////////////////
// Date        : Mon Feb 28 09:28:11 2011
//
// Author      : 
//
// Company     : 
//
// Description : 
//
//////////////////////////////////////////
//////////////////////////////////////////

`timescale 1ns/1ps

module  even_odd_up_down_mux (even_dwn_selected, even_up_selected, odd_dwn_selected, odd_up_selected,
                              even_dwn_ch, even_dwn_hit0, even_dwn_hit1, even_dwn_hit2, even_dwn_hit3,
                              even_up_ch, even_up_hit0, even_up_hit1, even_up_hit2, even_up_hit3,
                              odd_dwn_ch, odd_dwn_hit0, odd_dwn_hit1, odd_dwn_hit2, odd_dwn_hit3,
                              odd_up_ch, odd_up_hit0, odd_up_hit1, odd_up_hit2, odd_up_hit3,
                              ch, hit0,hit1,hit2,hit3);

   input even_dwn_selected, even_up_selected, odd_dwn_selected, odd_up_selected;
   input even_dwn_ch, even_dwn_hit0, even_dwn_hit1, even_dwn_hit2, even_dwn_hit3;
   input even_up_ch, even_up_hit0, even_up_hit1, even_up_hit2, even_up_hit3;
   input odd_dwn_ch, odd_dwn_hit0, odd_dwn_hit1, odd_dwn_hit2, odd_dwn_hit3;
   input odd_up_ch, odd_up_hit0, odd_up_hit1, odd_up_hit2, odd_up_hit3;

   output ch, hit0,hit1,hit2,hit3;

   wire       even_dwn_selected,even_up_selected, odd_dwn_selected, odd_up_selected;
   wire [5:0] even_dwn_ch, even_up_ch;
   wire [2:0] even_dwn_hit0, even_dwn_hit1, even_dwn_hit2, even_dwn_hit3;
   wire [2:0] even_up_hit0, even_up_hit1, even_up_hit2, even_up_hit3;
   wire [5:0] odd_dwn_ch, odd_up_ch;
   wire [2:0] odd_dwn_hit0, odd_dwn_hit1, odd_dwn_hit2, odd_dwn_hit3;
   wire [2:0] odd_up_hit0, odd_up_hit1, odd_up_hit2, odd_up_hit3;

   wire [7:0] ch;
   wire [2:0] hit0, hit1, hit2, hit3;

   assign     ch[7] = odd_up_selected | odd_dwn_selected;

   assign     ch[6] = odd_up_selected | even_up_selected;
   
   assign     ch[5] = even_dwn_ch[5] & even_dwn_selected |
                      even_up_ch[5] & even_up_selected |
                      odd_dwn_ch[5] & odd_dwn_selected |
                      odd_up_ch[5] & odd_up_selected;
   
   assign     ch[4] = even_dwn_ch[4] & even_dwn_selected |
                      even_up_ch[4] & even_up_selected |
                      odd_dwn_ch[4] & odd_dwn_selected |
                      odd_up_ch[4] & odd_up_selected;
   
   assign     ch[3] = even_dwn_ch[3] & even_dwn_selected |
                      even_up_ch[3] & even_up_selected |
                      odd_dwn_ch[3] & odd_dwn_selected |
                      odd_up_ch[3] & odd_up_selected;
   
   assign     ch[2] = even_dwn_ch[2] & even_dwn_selected |
                      even_up_ch[2] & even_up_selected |
                      odd_dwn_ch[2] & odd_dwn_selected |
                      odd_up_ch[2] & odd_up_selected;
   
   assign     ch[1] = even_dwn_ch[1] & even_dwn_selected |
                      even_up_ch[1] & even_up_selected |
                      odd_dwn_ch[1] & odd_dwn_selected |
                      odd_up_ch[1] & odd_up_selected;
   
   assign     ch[0] = even_dwn_ch[0] & even_dwn_selected |
                      even_up_ch[0] & even_up_selected |
                      odd_dwn_ch[0] & odd_dwn_selected |
                      odd_up_ch[0] & odd_up_selected;
   
   assign   hit0[0] = even_dwn_hit0[0] & even_dwn_selected |
                      even_up_hit0[0] & even_up_selected |
                      odd_dwn_hit0[0] & odd_dwn_selected |
                      odd_up_hit0[0] & odd_up_selected;
   
   assign   hit0[1] = even_dwn_hit0[1] & even_dwn_selected |
                      even_up_hit0[1] & even_up_selected |
                      odd_dwn_hit0[1] & odd_dwn_selected |
                      odd_up_hit0[1] & odd_up_selected;
   
   assign   hit0[2] = even_dwn_hit0[2] & even_dwn_selected |
                      even_up_hit0[2] & even_up_selected |
                      odd_dwn_hit0[2] & odd_dwn_selected |
                      odd_up_hit0[2] & odd_up_selected;
   
   assign   hit1[0] = even_dwn_hit1[0] & even_dwn_selected |
                      even_up_hit1[0] & even_up_selected |
                      odd_dwn_hit1[0] & odd_dwn_selected |
                      odd_up_hit1[0] & odd_up_selected;
   
   assign   hit1[1] = even_dwn_hit1[1] & even_dwn_selected |
                      even_up_hit1[1] & even_up_selected |
                      odd_dwn_hit1[1] & odd_dwn_selected |
                      odd_up_hit1[1] & odd_up_selected;
   
   assign   hit1[2] = even_dwn_hit1[2] & even_dwn_selected |
                      even_up_hit1[2] & even_up_selected |
                      odd_dwn_hit1[2] & odd_dwn_selected |
                      odd_up_hit1[2] & odd_up_selected;
   
   assign   hit2[0] = even_dwn_hit2[0] & even_dwn_selected |
                      even_up_hit2[0] & even_up_selected |
                      odd_dwn_hit2[0] & odd_dwn_selected |
                      odd_up_hit2[0] & odd_up_selected;
   
   assign   hit2[1] = even_dwn_hit2[1] & even_dwn_selected |
                      even_up_hit2[1] & even_up_selected |
                      odd_dwn_hit2[1] & odd_dwn_selected |
                      odd_up_hit2[1] & odd_up_selected;
   
   assign   hit2[2] = even_dwn_hit2[2] & even_dwn_selected |
                      even_up_hit2[2] & even_up_selected |
                      odd_dwn_hit2[2] & odd_dwn_selected |
                      odd_up_hit2[2] & odd_up_selected;
   
   assign   hit3[0] = even_dwn_hit3[0] & even_dwn_selected |
                      even_up_hit3[0] & even_up_selected |
                      odd_dwn_hit3[0] & odd_dwn_selected |
                      odd_up_hit3[0] & odd_up_selected;
   
   assign   hit3[1] = even_dwn_hit3[1] & even_dwn_selected |
                      even_up_hit3[1] & even_up_selected |
                      odd_dwn_hit3[1] & odd_dwn_selected |
                      odd_up_hit3[1] & odd_up_selected;
   
   assign   hit3[2] = even_dwn_hit3[2] & even_dwn_selected |
                      even_up_hit3[2] & even_up_selected |
                      odd_dwn_hit3[2] & odd_dwn_selected |
                      odd_up_hit3[2] & odd_up_selected;
   
endmodule


