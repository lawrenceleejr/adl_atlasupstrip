-- VHDL Entity abc_emu.a13_drv_hsio_top.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
library UNISIM;
use UNISIM.Vcomponents.all;
library utils;
use utils.pkg_types.all;
library hsio;
use hsio.pkg_core_globals.all;

entity a13_drv_hsio_top is
   port( 
      clk160         : in     std_logic;
      clk40          : in     std_logic;
      clk80          : in     std_ulogic;
      outsigs        : in     std_logic_vector (15 downto 0);
      rawsigs        : in     std_logic_vector (15 downto 0);
      -- registers
      reg            : in     t_reg_bus;
      rst            : in     std_logic;
      rst_poweron_ni : in     std_logic;                       --PORESET_N
      a13_datl_o     : out    std_logic;
      a13_datr_o     : out    std_logic;
      ddr_l_o        : out    std_logic_vector (1 downto 0);
      ddr_r_o        : out    std_logic_vector (1 downto 0)
   );

-- Declarations

end a13_drv_hsio_top ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- abc_emu.a13_drv_hsio_top.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
library UNISIM;
use UNISIM.Vcomponents.all;
library utils;
use utils.pkg_types.all;
library hsio;
use hsio.pkg_core_globals.all;


architecture struct of a13_drv_hsio_top is

   -- Architecture declarations

   -- Internal signal declarations
   signal DAT21       : std_logic;
   signal HI          : std_logic;
   signal LO          : std_logic;
   signal XOFF12      : std_logic;
   signal XOFF21      : std_logic;
   signal ZERO13      : std_logic_vector(12 downto 0);
   signal ZERO16      : std_logic_vector(15 downto 0);
   signal ZERO2       : std_logic_vector(1 downto 0);
   signal ZERO4       : std_logic_vector(3 downto 0);
   signal ZERO8       : std_logic_vector(7 downto 0);
   signal a13_addr    : std_logic_vector(4 downto 0);
   signal a13_com     : std_logic;
   signal a13_dat12   : std_logic;
   signal a13_datl    : std_logic;
   signal a13_datr    : std_logic;
   signal a13_l0      : std_logic;
   signal a13_l1      : std_logic;
   signal a13_r3s     : std_logic;
   signal abc_din     : std_logic_vector(255 downto 0);
   signal addr2       : std_logic_vector(4 downto 0);
   signal clkn160     : std_logic;
   signal clkn40      : std_logic;
   signal clkn80      : std_logic;
   signal dclk        : std_ulogic;
   signal drv_coml0   : std_logic;                           -- LO_CMD
   signal drv_l1r3    : std_logic;                           -- R3
   signal hs_coml0    : std_logic;                           -- LO_CMD
   signal hs_dxin     : std_logic_vector(3 downto 0);
   signal hs_l1r3     : std_logic;                           -- R3
   -- hs_rstb_i         : in     std_logic;  -- used as a hard reset line for all the f/w
-- hs_shunt_ctl_sw_i : in     std_logic;
-- hs_reg_ena_i      : in     std_logic;
-- hs_reg_end_i      : in     std_logic;
-- hs_term_i         : in     std_logic;
-- hs_addr_i         : in     std_logic_vector (4 downto 0);
-- hs_scan_en_i      : in     std_logic;
-- hs_sdi_bc_i       : in     std_logic;
-- hs_sdo_bc_o       : out    std_logic;
-- hs_sdi_clk_i      : in     std_logic;
-- hs_sdo_clk_o      : out    std_logic;
-- hs_sw1_o          : out    std_logic;
   signal hs_p1_spare : std_logic_vector(13 downto 0);
   -- HSIO IB P2
-----------------------------------

-- hs_abcup_i        : in     std_logic;
-- hs_spare1_i       : in     std_logic;
-- hs_spare2_i       : in     std_logic;
-- hs_spare3_i       : in     std_logic;
-- hs_spare4_i       : in     std_logic;
-- hs_spare5_i       : in     std_logic;
   signal hs_p2_spare : std_logic_vector(3 downto 0);
   signal ibstb_data  : std_logic_vector(31 downto 0);
   -- registers
   signal reg_drv     : slv32_array(127 downto 0);
   signal rx_strm_o   : std_logic_vector(127 downto 120);
   signal sc_rstb     : std_logic;                           -- RSTB
   signal seqout_en   : std_logic;                           -- LO_CMD


   -- Component Declarations
   component driver_main
   port (
      clk40            : in     std_logic ;
      clk80            : in     std_logic ;
      clk160           : in     std_logic ;
      clkn40           : in     std_logic ;
      clkn80           : in     std_logic ;
      clkn160          : in     std_logic ;
      rst              : in     std_logic ;
      -- HSIO IB P1
      -----------------------------------
      hs_bco_i         : in     std_logic ;
      hs_coml0_i       : in     std_logic ;
      hs_l1r3_i        : in     std_logic ;
      hs_sp0_i         : in     std_logic ;
      hs_dxout_i       : in     std_logic_vector (3 downto 0);
      hs_dxin_o        : out    std_logic_vector (3 downto 0);
      hs_p1_spare_i    : in     std_logic_vector (13 downto 0);
      -- HSIO IB P2
      -----------------------------------
      hs_p2_spare_i    : in     std_logic_vector (3 downto 0);
      hs_i2c_sdc_io    : inout  std_logic ;
      hs_i2c_sda_io    : inout  std_logic ;
      ------------------------------------------------------------------
      -- DUT
      -------------------------------------------------------------------
      singlechip_sel_o : out    std_logic ;                    -- 0=hybrid, 1=single chip
      dir_data_o       : out    std_logic_vector (3 downto 0);
      dir_xoff_o       : out    std_logic_vector (3 downto 0);
      highz_data_o     : out    std_logic_vector (3 downto 0);
      highz_xoff_o     : out    std_logic_vector (3 downto 0);
      -- COMMON (all to P3)
      -------------------------------------------------------------
      shuntctl_o       : out    std_logic ;                    -- SHUNT_CTL_SW, becomes SHUNTCTL
      reg_en_ana_o     : out    std_logic ;                    -- REG_EN_A
      reg_en_dig_o     : out    std_logic ;                    -- REG_EN_D
      bco_o            : out    std_logic ;                    -- BCO
      drc_o            : out    std_logic ;                    -- DRC
      coml0_o          : out    std_logic ;                    -- LO_CMD
      l1r3_o           : out    std_logic ;                    -- R3
      data_i           : in     std_logic_vector (3 downto 0);
      xoff_i           : in     std_logic_vector (3 downto 0);
      data_o           : out    std_logic_vector (3 downto 0);
      xoff_o           : out    std_logic_vector (3 downto 0);
      -- BDP8                             -- XOFF_R0_P
      -- BDP9                             -- DATA_R0_P___FCCLK_N  *INVERT
      -- BDP14                            -- DATA3_P___FC1_P
      -- BDP15                            -- XOFF_R3_P___FC2_P
      -- BDP10                            -- DATA_1_P___DATA_L_N  *INVERT
      -- BDP10                            -- DATA_1_P___DATA_L_N  *INVERT
      -- BDP11                            -- XOFF_1_P___XOFF_L_P
      -- BDP11                            -- XOFF_1_P___XOFF_L_P
      -- BDP13                            -- DATA_R2_P___DATA_R_N  *INVERT
      -- BDP13                            -- DATA_R2_P___DATA_R_N  *INVERT
      -- BDP12                            -- XOFF_R2_P___XOFF_R_P
      -- BDP12                            -- XOFF_R2_P___XOFF_R_P
      
      -- ASIC Only Signals (P4)
      ---------------------------------------------------------------
      sc_term_o        : out    std_logic ;                    -- TERM
      sc_addr_o        : out    std_logic_vector (4 downto 0); -- ADDR0-4
      sc_rstb_o        : out    std_logic ;                    -- RSTB
      sc_abcup_o       : out    std_logic ;                    -- ABCUP
      sc_sdo_bc_i      : in     std_logic ;                    -- SDO_BC           --SCN_O_BC
      sc_sdi_bc_o      : out    std_logic ;                    -- SDI_BC           --SCN_I_BC
      sc_sdo_clk_i     : in     std_logic ;                    -- SDO_CLK          --SCN_O_CK
      sc_sdi_clk_o     : out    std_logic ;                    -- SDI_CLK          --SCN_I_CK
      sc_scan_enable_o : out    std_logic ;                    -- SCAN_ENABLE
      sc_switch1_i     : in     std_logic ;                    -- SWITCH1
      -- Infra
      ---------------------------------------------------------------
      reg              : in     slv32_array (127 downto 0)
   );
   end component;
   component abc130_hsio_top
   generic (
      START_PATT : std_logic_vector(15 downto 0) := x"0001"
   );
   port (
      DATL_i         : in     std_logic ;
      DATR_i         : in     std_logic ;
      FastCLK_div2_i : in     std_logic ;                    -- // ***
      FastCLK_i      : in     std_logic ;
      RSTB           : in     std_logic ;
      XOFFL_i        : in     std_logic ;
      XOFFR_i        : in     std_logic ;
      addr_i         : in     std_logic_vector (4 downto 0);
      bco            : in     std_logic ;
      com_i          : in     std_logic ;
      din            : in     std_logic_vector (255 downto 0);
      drc            : in     std_ulogic ;
      l0_i           : in     std_logic ;
      l1_i           : in     std_logic ;
      r3s_i          : in     std_logic ;
      rst_poweron_ni : in     std_logic ;                    --PORESET_N
      DATL_o         : out    std_logic ;
      DATR_o         : out    std_logic ;
      XOFFL_o        : out    std_logic ;
      XOFFR_o        : out    std_logic ;
      dataOutFC1_o   : out    std_logic ;
      dataOutFC2_o   : out    std_logic ;
      dbg_strips_o   : out    std_logic_vector (255 downto 0)
   );
   end component;
   component strip_data_gen
   generic (
      START_PATT : std_logic_vector(15 downto 0) := X"0001"
   );
   port (
      clk40     : in     std_logic;
      inc_i     : in     std_logic;
      rst       : in     std_logic;
      strips1_o : out    std_logic_vector (255 downto 0);
      strips2_o : out    std_logic_vector (255 downto 0);
      strips3_o : out    std_logic_vector (255 downto 0);
      strips4_o : out    std_logic_vector (255 downto 0);
      strips5_o : out    std_logic_vector (255 downto 0)
   );
   end component;
   component ff_ddr_rx
   port (
      q0_o   : out    std_logic ;
      q1_o   : out    std_logic ;
      swap_i : in     std_logic ;
      d_i    : in     std_logic ;
      clk    : in     std_logic ;
      rst    : in     std_logic 
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 4 eb4
   -- eb3 3
   HI <= '1';
   LO <= '0';
   ZERO2 <=  "00";
   ZERO4 <=  "0000";
   ZERO8 <=  "00000000";
   ZERO13 <= "0000000000000";
   ZERO16 <= "0000000000000000";

   -- HDL Embedded Text Block 5 eb5
   -- eb1 1
   seqout_en <= reg(R_CONTROL1)(CTL_RAWOUT_EN);
   
   hs_coml0 <= 
     outsigs(OS_STT_COM) when (seqout_en ='0') else
     rawsigs(OD_COML0);
   hs_l1r3 <= 
     outsigs(OS_STT_L1R) when (seqout_en ='0') else
     rawsigs(OD_L1R3);
   
   hs_p1_spare <= reg(R_DRV_CONF)(13 downto 0);
   
   hs_p2_spare <= "0000"; 
   
   reg_drv <= (others => (others => '0'));


   -- ModuleWare code(v1.12) for instance 'U_2' of 'buff'
   a13_datr <= a13_dat12;

   -- ModuleWare code(v1.12) for instance 'U_3' of 'buff'
   dclk <= clk80;

   -- ModuleWare code(v1.12) for instance 'U_4' of 'buff'
   a13_datr_o <= a13_datr;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'buff'
   a13_datl_o <= a13_datl;

   -- Instance port mappings.
   Udrvmain : driver_main
      port map (
         clk40            => clk40,
         clk80            => clk80,
         clk160           => clk160,
         clkn40           => clkn40,
         clkn80           => clkn80,
         clkn160          => clkn160,
         rst              => rst,
         hs_bco_i         => clk40,
         hs_coml0_i       => hs_coml0,
         hs_l1r3_i        => hs_l1r3,
         hs_sp0_i         => LO,
         hs_dxout_i       => ZERO4,
         hs_dxin_o        => hs_dxin,
         hs_p1_spare_i    => hs_p1_spare,
         hs_p2_spare_i    => hs_p2_spare,
         hs_i2c_sdc_io    => open,
         hs_i2c_sda_io    => open,
         singlechip_sel_o => open,
         dir_data_o       => open,
         dir_xoff_o       => open,
         highz_data_o     => open,
         highz_xoff_o     => open,
         shuntctl_o       => open,
         reg_en_ana_o     => open,
         reg_en_dig_o     => open,
         bco_o            => open,
         drc_o            => open,
         coml0_o          => drv_coml0,
         l1r3_o           => drv_l1r3,
         data_i           => ZERO4,
         xoff_i           => ZERO4,
         data_o           => open,
         xoff_o           => open,
         sc_term_o        => open,
         sc_addr_o        => a13_addr,
         sc_rstb_o        => sc_rstb,
         sc_abcup_o       => open,
         sc_sdo_bc_i      => LO,
         sc_sdi_bc_o      => open,
         sc_sdo_clk_i     => LO,
         sc_sdi_clk_o     => open,
         sc_scan_enable_o => open,
         sc_switch1_i     => LO,
         reg              => reg_drv
      );
   Uabc1 : abc130_hsio_top
      generic map (
         START_PATT => x"0001"
      )
      port map (
         DATL_i         => LO,
         DATR_i         => LO,
         FastCLK_div2_i => clk40,
         FastCLK_i      => clk80,
         RSTB           => sc_rstb,
         XOFFL_i        => LO,
         XOFFR_i        => LO,
         addr_i         => a13_addr,
         bco            => clk40,
         com_i          => a13_com,
         din            => abc_din,
         drc            => dclk,
         l0_i           => a13_l0,
         l1_i           => a13_l1,
         r3s_i          => a13_r3s,
         rst_poweron_ni => rst_poweron_ni,
         DATL_o         => a13_datl,
         DATR_o         => a13_dat12,
         XOFFL_o        => open,
         XOFFR_o        => open,
         dataOutFC1_o   => ibstb_data(28),
         dataOutFC2_o   => ibstb_data(29),
         dbg_strips_o   => open
      );
   Usdg : strip_data_gen
      generic map (
         START_PATT => x"0001"
      )
      port map (
         inc_i     => rawsigs(RS_STB_L0),
         strips1_o => abc_din,
         strips2_o => open,
         strips3_o => open,
         strips4_o => open,
         strips5_o => open,
         clk40     => clk40,
         rst       => rst
      );
   Uddrcoml0 : ff_ddr_rx
      port map (
         q0_o   => a13_com,
         q1_o   => a13_l0,
         swap_i => LO,
         d_i    => drv_coml0,
         clk    => clk40,
         rst    => rst
      );
   Uddrcoml1 : ff_ddr_rx
      port map (
         q0_o   => a13_l1,
         q1_o   => a13_r3s,
         swap_i => LO,
         d_i    => drv_l1r3,
         clk    => clk40,
         rst    => rst
      );
   Uddrdx0 : ff_ddr_rx
      port map (
         q0_o   => rx_strm_o(120),
         q1_o   => rx_strm_o(121),
         swap_i => LO,
         d_i    => hs_dxin(0),
         clk    => clk80,
         rst    => rst
      );
   Uddrdx2 : ff_ddr_rx
      port map (
         q0_o   => rx_strm_o(122),
         q1_o   => rx_strm_o(123),
         swap_i => LO,
         d_i    => hs_dxin(2),
         clk    => clk80,
         rst    => rst
      );
   Uddrl : ff_ddr_rx
      port map (
         q0_o   => ddr_l_o(0),
         q1_o   => ddr_l_o(1),
         swap_i => LO,
         d_i    => a13_datl,
         clk    => clk80,
         rst    => rst
      );
   Uddrr : ff_ddr_rx
      port map (
         q0_o   => ddr_r_o(0),
         q1_o   => ddr_r_o(1),
         swap_i => LO,
         d_i    => a13_datr,
         clk    => clk80,
         rst    => rst
      );

end struct;
