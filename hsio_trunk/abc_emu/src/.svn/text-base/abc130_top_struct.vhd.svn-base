-- VHDL Entity abc_emu.abc130_top.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

entity abc130_top is
   port( 
      BC_i           : in     std_logic;
      CLK_i          : in     std_logic;
      -- /* ***
      -- input COM_LZERO_padP, COM_LZERO_padN; //serial command input port, embedded LZERO trigger on falling-edge
      -- input LONERTHREE_padP, LONERTHREE_padN;   //Level-1 and R3 trigger code
      -- */
      COM_i          : in     std_logic;                        -- //***
      DATLi          : in     std_logic;
      DATRi          : in     std_logic;
      DIN_i          : in     std_logic_vector (255 downto 0);
      FastCLK_div2_i : in     std_logic;                        -- // ***
      FastCLK_i      : in     std_logic;
      -- /* ***
      -- input COM_LZERO_padP, COM_LZERO_padN; //serial command input port, embedded LZERO trigger on falling-edge
      -- input LONERTHREE_padP, LONERTHREE_padN;   //Level-1 and R3 trigger code
      -- */
      LONE_i         : in     std_logic;                        -- //***
      -- /* ***
      -- input COM_LZERO_padP, COM_LZERO_padN; //serial command input port, embedded LZERO trigger on falling-edge
      -- input LONERTHREE_padP, LONERTHREE_padN;   //Level-1 and R3 trigger code
      -- */
      LZERO_i        : in     std_logic;                        -- //***
      RSTB_i         : in     std_logic;
      -- /* ***
      -- input COM_LZERO_padP, COM_LZERO_padN; //serial command input port, embedded LZERO trigger on falling-edge
      -- input LONERTHREE_padP, LONERTHREE_padN;   //Level-1 and R3 trigger code
      -- */
      RTHREE_i       : in     std_logic;                        -- //***
      XOFFLi         : in     std_logic;
      XOFFRi         : in     std_logic;
      padID_i        : in     std_logic_vector (4 downto 0);
      padTerm_i      : in     std_logic;
      powerUpRstb_i  : in     std_logic;
      DATLo          : out    std_logic;
      DATLoen        : out    std_logic;                        -- // ***
      DATRo          : out    std_logic;
      DATRoen        : out    std_logic;                        -- // ***
      XOFFLo         : out    std_logic;
      XOFFLoen       : out    std_logic;                        -- // ***
      XOFFRo         : out    std_logic;
      XOFFRoen       : out    std_logic;                        -- // ***
      dataOutFC1_o   : out    std_logic;
      dataOutFC2_o   : out    std_logic
   );

-- Declarations

end abc130_top ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- abc_emu.abc130_top.struct
--
-- Created by Matt Warren 2014
--

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


architecture struct of abc130_top is

   -- Architecture declarations

   -- Internal signal declarations
   signal HI          : std_logic;
   signal LO          : std_logic;
   signal cal_en      : std_logic_vector(255 downto 0);
   signal cal_en0     : std_logic_vector(255 downto 0);
   signal cal_pulse   : std_logic;
   signal cal_pulse_n : std_logic;
   signal cal_q       : std_logic_vector(4 downto 0);
   signal digi_cal    : std_logic;
   -- //verification testbench I/O's.  Not part of the actual chip
-- /* ***
-- `ifdef VTB
--  R3_ReadEnable,
--  L1_ReadEnable,
--  L1_DCL_Packet,
--  L1_DCL_busy,
--  L1_DCL_fifowr,
--  L1_DCL_Mcluster,
--  R3_DCL_fifowr,
--  R3_DCL_busy,
--  R3_DCL_PCKT_o,
--  OP_DIR,
-- `endif
-- */
-- //data from the detector
   signal strips      : std_logic_vector(255 downto 0);    -- //Strip Data
   signal strips_cal  : std_logic_vector(255 downto 0);


   -- Component Declarations
   component ABCN13_DIG
   port (
      -- //verification testbench I/O's.  Not part of the actual chip
      -- /* ***
      -- `ifdef VTB
      --  R3_ReadEnable,
      --  L1_ReadEnable,
      --  L1_DCL_Packet,
      --  L1_DCL_busy,
      --  L1_DCL_fifowr,
      --  L1_DCL_Mcluster,
      --  R3_DCL_fifowr,
      --  R3_DCL_busy,
      --  R3_DCL_PCKT_o,
      --  OP_DIR,
      -- `endif
      -- */
      -- //data from the detector
      DIN          : in     std_logic_vector (255 downto 0); -- //Strip Data
      -- // *** input CLK_padP, CLK_padN; //80 or 160MHz clock diff-pair
      CLK          : in     std_logic ;                      -- // ***
      -- // *** input BC_padP, BC_padN;   //40 MHz machine clock 'bunch crossing clock'
      BC           : in     std_logic ;                      -- // ***
      -- // ***input COM_LZERO_padP, COM_LZERO_padN; //serial command input port, embedded LZERO trigger on falling-edge
      COM          : in     std_logic ;                      -- // ***
      -- // ***input LONERTHREE_padP, LONERTHREE_padN;   //Level-1 and R3 trigger code
      LONE         : in     std_logic ;                      -- // ***
      LZERO        : in     std_logic ;                      -- // ***
      RTHREE       : in     std_logic ;                      -- // ***
      -- //right edge signals
      padID        : in     std_logic_vector (4 downto 0);   -- //Chip ID
      padTerm      : in     std_logic ;
      -- // *** input FastCLK_padP, FastCLK_padN; //160 or 320MHz or 640MHz clock diff-pair
      FastCLK      : in     std_logic ;                      -- // ***
      FastCLK_div2 : in     std_logic ;                      -- // ***
      -- /* ***
      -- inout XOFFL, XOFFLB;
      -- inout DATL, DATLB;
      -- inout XOFFR, XOFFRB;
      -- inout DATR, DATRB;
      -- */
      XOFFLi       : in     std_logic ;                      -- // ***
      XOFFLo       : out    std_logic ;                      -- // ***
      DATLi        : in     std_logic ;                      -- // ***
      DATLo        : out    std_logic ;                      -- // ***
      XOFFRi       : in     std_logic ;                      -- // ***
      XOFFRo       : out    std_logic ;                      -- // ***
      DATRi        : in     std_logic ;                      -- // ***
      DATRo        : out    std_logic ;                      -- // ***
      DATLoen      : out    std_logic ;                      -- // ***
      DATRoen      : out    std_logic ;                      -- // ***
      XOFFLoen     : out    std_logic ;                      -- // ***
      XOFFRoen     : out    std_logic ;                      -- // ***
      -- /* ***
      -- XOFFL,
      -- XOFFLB,
      -- DATL,
      -- DATLB,
      -- XOFFR,
      -- XOFFRB,
      -- DATR,
      -- DATRB,
      -- */
      -- 
      -- /* ***
      -- dataOutFC1_padP,
      -- dataOutFC1_padN,
      -- dataOutFC2_padP,
      -- dataOutFC2_padN,
      -- */
      dataOutFC1   : out    std_logic ;                      -- // ***
      dataOutFC2   : out    std_logic ;                      -- // ***
      -- // *** input RSTB_pad;     //asynchronous hard reset
      RSTB         : in     std_logic ;                      -- // ***
      -- // *** input abcup_pad;
      abcup        : in     std_logic ;                      -- // ***
      Prompt       : in     std_logic ;
      -- // RST_padN,
      -- // Towards FE
      CalPulseTo   : out    std_logic ;
      -- /* ***
      --  regADCS1,
      --  regADCS2,
      --  regADCS3,
      --  regADCS6,
      --  regADCS7,
      --  regChannel0,
      --  regChannel1,
      --  regChannel2,
      --  regChannel3,
      --  regChannel4,
      --  regChannel5,
      --  regChannel6,
      --  regChannel7,
      --  regChannel8,
      --  regChannel9,
      -- regChannel10,
      -- regChannel11,
      -- regChannel12,
      -- regChannel13,
      -- regChannel14,
      -- regChannel15,
      -- regChannel16,
      -- regChannel17,
      -- regChannel18,
      -- regChannel19,
      -- regChannel20,
      -- regChannel21,
      -- regChannel22,
      -- regChannel23,
      -- regChannel24,
      -- regChannel25,
      -- regChannel26,
      -- regChannel27,
      -- regChannel28,
      -- regChannel29,
      -- regChannel30,
      -- regChannel31,
      -- regChannel32,
      -- regChannel33,
      -- regChannel34,
      -- regChannel35,
      -- regChannel36,
      -- regChannel37,
      -- regChannel38,
      -- regChannel39,
      -- */
      -- // CAL_EN
      regChannel40 : out    std_logic_vector (31 downto 0);
      regChannel41 : out    std_logic_vector (31 downto 0);
      regChannel42 : out    std_logic_vector (31 downto 0);
      regChannel43 : out    std_logic_vector (31 downto 0);
      regChannel44 : out    std_logic_vector (31 downto 0);
      regChannel45 : out    std_logic_vector (31 downto 0);
      regChannel46 : out    std_logic_vector (31 downto 0);
      regChannel47 : out    std_logic_vector (31 downto 0);
      -- // from Power circuit
      powerUpRstb  : in     std_logic 
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   HI <= '1';
   LO <= '0';

   -- HDL Embedded Text Block 2 eb2
   cal_q(0) <= cal_pulse when rising_edge(BC_i);
   cal_q(1) <= cal_q(0) when rising_edge(BC_i);
   cal_q(2) <= cal_q(1) when rising_edge(BC_i);
   cal_q(3) <= cal_q(2) when rising_edge(BC_i);
   cal_q(4) <= cal_q(3) when rising_edge(BC_i);
   
   digi_cal <= '1' when (cal_q(4 downto 3) = "01") else 
                 '0';
   
   strips_cal <= cal_en when (digi_cal = '1') else
                 (others => '0');
   
   strips <= strips_cal when (cal_pulse = '1') else 
             DIN_i;


   -- ModuleWare code(v1.12) for instance 'U_2' of 'inv'
   cal_pulse <= not(cal_pulse_n);

   -- Instance port mappings.
   Uabcn130dig : ABCN13_DIG
      port map (
         DIN          => strips,
         CLK          => CLK_i,
         BC           => BC_i,
         COM          => COM_i,
         LONE         => LONE_i,
         LZERO        => LZERO_i,
         RTHREE       => RTHREE_i,
         padID        => padID_i,
         padTerm      => padTerm_i,
         FastCLK      => FastCLK_i,
         FastCLK_div2 => FastCLK_div2_i,
         XOFFLi       => XOFFLi,
         XOFFLo       => XOFFLo,
         DATLi        => DATLi,
         DATLo        => DATLo,
         XOFFRi       => XOFFRi,
         XOFFRo       => XOFFRo,
         DATRi        => DATRi,
         DATRo        => DATRo,
         DATLoen      => DATLoen,
         DATRoen      => DATRoen,
         XOFFLoen     => XOFFLoen,
         XOFFRoen     => XOFFRoen,
         dataOutFC1   => dataOutFC1_o,
         dataOutFC2   => dataOutFC2_o,
         RSTB         => RSTB_i,
         abcup        => LO,
         Prompt       => LO,
         CalPulseTo   => cal_pulse_n,
         regChannel40 => cal_en0(31 downto 0),
         regChannel41 => cal_en0(63 downto 32),
         regChannel42 => cal_en0(95 downto 64),
         regChannel43 => cal_en0(127 downto 96),
         regChannel44 => cal_en0(159 downto 128),
         regChannel45 => cal_en0(191 downto 160),
         regChannel46 => cal_en0(223 downto 192),
         regChannel47 => cal_en0(255 downto 224),
         powerUpRstb  => powerUpRstb_i
      );

   g0: FOR i IN 0 TO 127 GENERATE

      -- ModuleWare code(v1.12) for instance 'U_0' of 'buff'
      cal_en(i*2) <= cal_en0(i);

      -- ModuleWare code(v1.12) for instance 'U_1' of 'buff'
      cal_en(i*2+1) <= cal_en0(i+128);
   end generate g0;

end struct;
