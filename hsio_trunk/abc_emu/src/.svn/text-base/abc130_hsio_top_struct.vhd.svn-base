-- VHDL Entity abc_emu.abc130_hsio_top.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

entity abc130_hsio_top is
   generic( 
      START_PATT : std_logic_vector(15 downto 0) := x"0001"
   );
   port( 
      DATL_i         : in     std_logic;
      DATR_i         : in     std_logic;
      FastCLK_div2_i : in     std_logic;                        -- // ***
      FastCLK_i      : in     std_logic;
      RSTB           : in     std_logic;
      XOFFL_i        : in     std_logic;
      XOFFR_i        : in     std_logic;
      addr_i         : in     std_logic_vector (4 downto 0);
      bco            : in     std_logic;
      com_i          : in     std_logic;
      din            : in     std_logic_vector (255 downto 0);
      drc            : in     std_ulogic;
      l0_i           : in     std_logic;
      l1_i           : in     std_logic;
      r3s_i          : in     std_logic;
      rst_poweron_ni : in     std_logic;                        --PORESET_N
      DATL_o         : out    std_logic;
      DATR_o         : out    std_logic;
      XOFFL_o        : out    std_logic;
      XOFFR_o        : out    std_logic;
      dataOutFC1_o   : out    std_logic;
      dataOutFC2_o   : out    std_logic;
      dbg_strips_o   : out    std_logic_vector (255 downto 0)
   );

-- Declarations

end abc130_hsio_top ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- abc_emu.abc130_hsio_top.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;


architecture struct of abc130_hsio_top is

   -- Architecture declarations

   -- Internal signal declarations
   signal HI : std_logic;
   signal LO : std_logic;


   -- Component Declarations
   component abc130_top
   port (
      BC_i           : in     std_logic ;
      CLK_i          : in     std_logic ;
      -- /* ***
      -- input COM_LZERO_padP, COM_LZERO_padN; //serial command input port, embedded LZERO trigger on falling-edge
      -- input LONERTHREE_padP, LONERTHREE_padN;   //Level-1 and R3 trigger code
      -- */
      COM_i          : in     std_logic ;                    -- //***
      DATLi          : in     std_logic ;
      DATRi          : in     std_logic ;
      DIN_i          : in     std_logic_vector (255 downto 0);
      FastCLK_div2_i : in     std_logic ;                    -- // ***
      FastCLK_i      : in     std_logic ;
      -- /* ***
      -- input COM_LZERO_padP, COM_LZERO_padN; //serial command input port, embedded LZERO trigger on falling-edge
      -- input LONERTHREE_padP, LONERTHREE_padN;   //Level-1 and R3 trigger code
      -- */
      LONE_i         : in     std_logic ;                    -- //***
      -- /* ***
      -- input COM_LZERO_padP, COM_LZERO_padN; //serial command input port, embedded LZERO trigger on falling-edge
      -- input LONERTHREE_padP, LONERTHREE_padN;   //Level-1 and R3 trigger code
      -- */
      LZERO_i        : in     std_logic ;                    -- //***
      RSTB_i         : in     std_logic ;
      -- /* ***
      -- input COM_LZERO_padP, COM_LZERO_padN; //serial command input port, embedded LZERO trigger on falling-edge
      -- input LONERTHREE_padP, LONERTHREE_padN;   //Level-1 and R3 trigger code
      -- */
      RTHREE_i       : in     std_logic ;                    -- //***
      XOFFLi         : in     std_logic ;
      XOFFRi         : in     std_logic ;
      padID_i        : in     std_logic_vector (4 downto 0);
      padTerm_i      : in     std_logic ;
      powerUpRstb_i  : in     std_logic ;
      DATLo          : out    std_logic ;
      DATLoen        : out    std_logic ;                    -- // ***
      DATRo          : out    std_logic ;
      DATRoen        : out    std_logic ;                    -- // ***
      XOFFLo         : out    std_logic ;
      XOFFLoen       : out    std_logic ;                    -- // ***
      XOFFRo         : out    std_logic ;
      XOFFRoen       : out    std_logic ;                    -- // ***
      dataOutFC1_o   : out    std_logic ;
      dataOutFC2_o   : out    std_logic 
   );
   end component;
   component m_power
   port (
      hi : out    std_logic ;
      lo : out    std_logic 
   );
   end component;


begin

   -- Instance port mappings.
   Uabc130 : abc130_top
      port map (
         BC_i           => bco,
         CLK_i          => drc,
         COM_i          => com_i,
         DATLi          => DATL_i,
         DATRi          => DATR_i,
         DIN_i          => din,
         FastCLK_div2_i => FastCLK_div2_i,
         FastCLK_i      => FastCLK_i,
         LONE_i         => l1_i,
         LZERO_i        => l0_i,
         RSTB_i         => RSTB,
         RTHREE_i       => r3s_i,
         XOFFLi         => XOFFL_i,
         XOFFRi         => XOFFR_i,
         padID_i        => addr_i,
         padTerm_i      => LO,
         powerUpRstb_i  => rst_poweron_ni,
         DATLo          => DATL_o,
         DATLoen        => open,
         DATRo          => DATR_o,
         DATRoen        => open,
         XOFFLo         => XOFFL_o,
         XOFFLoen       => open,
         XOFFRo         => XOFFR_o,
         XOFFRoen       => open,
         dataOutFC1_o   => dataOutFC1_o,
         dataOutFC2_o   => dataOutFC2_o
      );
   Umpower : m_power
      port map (
         hi => HI,
         lo => LO
      );

   g0: FOR a IN 0 TO 127 GENERATE

      -- ModuleWare code(v1.12) for instance 'U_0' of 'buff'
      dbg_strips_o(a) <= din(a*2);
   end generate g0;

   g1: FOR b IN 0 TO 127 GENERATE

      -- ModuleWare code(v1.12) for instance 'U_1' of 'buff'
      dbg_strips_o(128+b) <= din(b*2+1);
   end generate g1;

end struct;
