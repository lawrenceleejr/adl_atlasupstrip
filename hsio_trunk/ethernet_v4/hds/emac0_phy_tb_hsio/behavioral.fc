DocumentHdrVersion "1.1"
Header (DocumentHdr
version 2
dmPackageRefs [
]
machine (Machine
name "p_bitclock"
children [
(Machine
name "p_bitclock"
children [
]
)
(Machine
name "p_monitor"
children [
]
)
(Machine
name "p_stimulus"
children [
]
)
(Machine
name "p_rx_even_odd"
children [
]
)
(Machine
name "p_rx_encode"
children [
]
)
(Machine
name "p_tx_decode"
children [
]
)
]
)
properties [
(HdrProperty
class "HDS"
name "DocView"
value "/home/warren/odr/Stage1/EthernetInterface2/emac0_phy_tb.vhd"
)
(HdrProperty
class "HDS"
name "DocViewState"
value "1209549185"
)
]
)
version "18.1"
appVersion "2007.1 (Build 19)"
model (FlowChart
VExpander (VariableExpander
vvMap [
(vvPair
variable "HDLDir"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/hdl"
)
(vvPair
variable "HDSDir"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/hds"
)
(vvPair
variable "SideDataDesignDir"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/hds/emac0_phy_tb/behavioral.fc.info"
)
(vvPair
variable "SideDataUserDir"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/hds/emac0_phy_tb/behavioral.fc.user"
)
(vvPair
variable "SourceDir"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/hds"
)
(vvPair
variable "appl"
value "HDL Designer"
)
(vvPair
variable "arch_name"
value "behavioral"
)
(vvPair
variable "config"
value "%(unit)_config"
)
(vvPair
variable "d"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/hds/emac0_phy_tb"
)
(vvPair
variable "d_logical"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/hds/emac0_phy_tb"
)
(vvPair
variable "date"
value "05/27/08"
)
(vvPair
variable "day"
value "Tue"
)
(vvPair
variable "day_long"
value "Tuesday"
)
(vvPair
variable "dd"
value "27"
)
(vvPair
variable "entity_name"
value "emac0_phy_tb"
)
(vvPair
variable "ext"
value "<TBD>"
)
(vvPair
variable "f"
value "behavioral.fc"
)
(vvPair
variable "f_logical"
value "behavioral.fc"
)
(vvPair
variable "f_noext"
value "behavioral"
)
(vvPair
variable "group"
value "man"
)
(vvPair
variable "host"
value "pc140.hep.ucl.ac.uk"
)
(vvPair
variable "language"
value "VHDL"
)
(vvPair
variable "library"
value "EthernetInterface2"
)
(vvPair
variable "library_downstream_HdsLintPlugin"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/designcheck"
)
(vvPair
variable "library_downstream_ModelSimCompiler"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/sim"
)
(vvPair
variable "library_downstream_PrecisionSynthesisDataPrep"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/ps"
)
(vvPair
variable "mm"
value "05"
)
(vvPair
variable "module_name"
value "emac0_phy_tb"
)
(vvPair
variable "month"
value "May"
)
(vvPair
variable "month_long"
value "May"
)
(vvPair
variable "p"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/hds/emac0_phy_tb/behavioral.fc"
)
(vvPair
variable "p_logical"
value "/home/warren/odr/Stage1/EthernetInterface2/hdldesigner/hds/emac0_phy_tb/behavioral.fc"
)
(vvPair
variable "package_name"
value "<Undefined Variable>"
)
(vvPair
variable "project_name"
value "odr"
)
(vvPair
variable "series"
value "HDL Designer Series"
)
(vvPair
variable "task_DesignCompilerPath"
value "<TBD>"
)
(vvPair
variable "task_LeonardoPath"
value "<TBD>"
)
(vvPair
variable "task_ModelSimPath"
value "$HDS_HOME/../Modeltech/linux_x86_64"
)
(vvPair
variable "task_NC-SimPath"
value "<TBD>"
)
(vvPair
variable "task_PrecisionRTLPath"
value "$HDS_HOME/../Precision/Mgc_home/bin"
)
(vvPair
variable "task_QuestaSimPath"
value "<TBD>"
)
(vvPair
variable "task_VCSPath"
value "<TBD>"
)
(vvPair
variable "this_ext"
value "fc"
)
(vvPair
variable "this_file"
value "behavioral"
)
(vvPair
variable "this_file_logical"
value "behavioral"
)
(vvPair
variable "time"
value "16:00:57"
)
(vvPair
variable "unit"
value "emac0_phy_tb"
)
(vvPair
variable "user"
value "warren"
)
(vvPair
variable "version"
value "2007.1 (Build 19)"
)
(vvPair
variable "view"
value "behavioral"
)
(vvPair
variable "year"
value "2008"
)
(vvPair
variable "yy"
value "08"
)
]
)
optionalChildren [
*1 (ConcurrentFC
uid 1,0
topDiagram (FlowDiagram
LanguageMgr "None"
uid 2,0
optionalChildren [
*2 (StartPoint
uid 27,0
optionalChildren [
*3 (CommentText
uid 32,0
ps "EdgeToEdgeStrategy"
shape (Rectangle
uid 33,0
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "13000,13000,28000,17000"
)
text (MLText
uid 34,0
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "13200,13200,28200,16800"
st "
   behavioral


  --------------------------------------------------------------------
   Clock drivers
  --------------------------------------------------------------------

   drives bitclock at 1.25GHz
  
"
tm "CommentText"
wrapOption 3
visibleHeight 4000
visibleWidth 15000
)
included 1
)
]
shape (RoundedRectangle
uid 28,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,12000,13000,14000"
radius 400
)
label (Text
uid 29,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "8500,12500,11500,13500"
st "Start"
ju 0
blo "10000,13300"
)
outConnect (FlowConnect
uid 30,0
ps "OnEdgeStrategy"
shape (Triangle
uid 31,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,13500,10500,14500"
)
direction 1
position 1
)
)
*4 (ActionBox
uid 35,0
shape (Rectangle
uid 36,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "5150,18050,14850,19950"
)
name (TextAssociate
uid 37,0
ps "CenterOffsetStrategy"
text (Text
uid 38,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5150,17100,6150,18000"
st "a0"
blo "5150,17800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 39,0
ps "CenterOffsetStrategy"
text (MLText
uid 40,0
va (VaSet
font "courier,8,0"
)
xt "5650,18550,14350,19450"
st "bitclock <= '0';"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 41,0
ps "OnEdgeStrategy"
shape (Triangle
uid 42,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,17550,10500,18550"
)
direction 0
)
outConnect (FlowConnect
uid 43,0
ps "OnEdgeStrategy"
shape (Triangle
uid 44,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,19450,10500,20450"
)
direction 1
position 1
)
)
*5 (WaitBox
uid 47,0
shape (Octagon
uid 48,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,23000,11000,25000"
)
name (TextAssociate
uid 49,0
ps "CenterOffsetStrategy"
text (Text
uid 50,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,22050,10000,22950"
st "w0"
blo "9000,22750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 51,0
ps "CenterOffsetStrategy"
text (MLText
uid 52,0
va (VaSet
font "courier,8,0"
)
xt "11250,23550,27250,24450"
st "wait for UI / 2;               
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 53,0
ps "OnEdgeStrategy"
shape (Triangle
uid 54,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,22500,10500,23500"
)
direction 0
)
outConnect (FlowConnect
uid 55,0
ps "OnEdgeStrategy"
shape (Triangle
uid 56,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,24500,10500,25500"
)
direction 1
position 1
)
)
*6 (ActionBox
uid 59,0
shape (Rectangle
uid 60,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "5150,28050,14850,29950"
)
name (TextAssociate
uid 61,0
ps "CenterOffsetStrategy"
text (Text
uid 62,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5150,27100,6150,28000"
st "a1"
blo "5150,27800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 63,0
ps "CenterOffsetStrategy"
text (MLText
uid 64,0
va (VaSet
font "courier,8,0"
)
xt "5650,28550,14350,29450"
st "bitclock <= '1';"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 65,0
ps "OnEdgeStrategy"
shape (Triangle
uid 66,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,27550,10500,28550"
)
direction 0
)
outConnect (FlowConnect
uid 67,0
ps "OnEdgeStrategy"
shape (Triangle
uid 68,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,29450,10500,30450"
)
direction 1
position 1
)
)
*7 (WaitBox
uid 71,0
shape (Octagon
uid 72,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,34000,11000,36000"
)
name (TextAssociate
uid 73,0
ps "CenterOffsetStrategy"
text (Text
uid 74,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,33050,10000,33950"
st "w1"
blo "9000,33750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 75,0
ps "CenterOffsetStrategy"
text (MLText
uid 76,0
va (VaSet
font "courier,8,0"
)
xt "11250,34550,19750,36350"
st "wait for UI / 2;

"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 77,0
ps "OnEdgeStrategy"
shape (Triangle
uid 78,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,33500,10500,34500"
)
direction 0
)
outConnect (FlowConnect
uid 79,0
ps "OnEdgeStrategy"
shape (Triangle
uid 80,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,35500,10500,36500"
)
direction 1
position 1
)
)
*8 (EndPoint
uid 83,0
shape (RoundedRectangle
uid 84,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,39000,13000,41000"
radius 400
)
label (Text
uid 85,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "9100,39500,10900,40500"
st "End"
ju 0
blo "10000,40300"
)
inConnect (FlowConnect
uid 86,0
ps "OnEdgeStrategy"
shape (Triangle
uid 87,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,38500,10500,39500"
)
direction 0
)
)
*9 (Property
uid 2287,0
pclass "HDS"
pname "DocView"
pvalue "/home/warren/odr/Stage1/EthernetInterface2/emac0_phy_tb.vhd"
ptn "String"
)
*10 (Property
uid 2288,0
pclass "HDS"
pname "DocViewState"
pvalue "1209549185"
ptn "String"
)
*11 (Flow
uid 45,0
shape (OrthoPolyLine
uid 46,0
va (VaSet
vasetType 3
)
xt "10000,14000,10000,18050"
pts [
"10000,14000"
"10000,18050"
]
arrow 1
)
start &2
end &4
)
*12 (Flow
uid 57,0
shape (OrthoPolyLine
uid 58,0
va (VaSet
vasetType 3
)
xt "10000,19950,10000,23000"
pts [
"10000,19950"
"10000,23000"
]
arrow 1
)
start &4
end &5
)
*13 (Flow
uid 69,0
shape (OrthoPolyLine
uid 70,0
va (VaSet
vasetType 3
)
xt "10000,25000,10000,28050"
pts [
"10000,25000"
"10000,28050"
]
arrow 1
)
start &5
end &6
)
*14 (Flow
uid 81,0
shape (OrthoPolyLine
uid 82,0
va (VaSet
vasetType 3
)
xt "10000,29950,10000,34000"
pts [
"10000,29950"
"10000,34000"
]
arrow 1
)
start &6
end &7
)
*15 (Flow
uid 88,0
shape (OrthoPolyLine
uid 89,0
va (VaSet
vasetType 3
)
xt "10000,36000,10000,39000"
pts [
"10000,36000"
"10000,39000"
]
arrow 1
)
start &7
end &8
)
]
bg "65535,65535,65535"
grid (Grid
origin "0,0"
isVisible 0
isActive 1
xSpacing 1000
xySpacing 1000
xShown 1
yShown 1
color "26368,26368,26368"
)
packageList *16 (PackageList
uid 15,0
stg "VerticalLayoutStrategy"
textVec [
*17 (Text
uid 16,0
va (VaSet
font "courier,8,1"
)
xt "-64125,4050,-57625,4950"
st "Package List"
blo "-64125,4750"
)
*18 (MLText
uid 17,0
va (VaSet
font "courier,8,0"
)
xt "-64125,4950,-47625,8550"
tm "FcPackageListTextMgr"
)
]
)
compDirBlock (MlTextGroup
uid 18,0
stg "VerticalLayoutStrategy"
textVec [
*19 (Text
uid 19,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-49125,4500,-39125,5400"
st "Compiler Directives"
blo "-49125,5200"
)
*20 (Text
uid 20,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-49125,5400,-37625,6300"
st "Pre-module directives:"
blo "-49125,6100"
)
*21 (MLText
uid 21,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-49125,6300,-39025,8100"
st "`resetall
`timescale 1ns/10ps"
tm "FcCompilerDirectivesTextMgr"
)
*22 (Text
uid 22,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-49125,8100,-37125,9000"
st "Post-module directives:"
blo "-49125,8800"
)
*23 (MLText
uid 23,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-49125,4500,-49125,4500"
tm "FcCompilerDirectivesTextMgr"
)
*24 (Text
uid 24,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-49125,9000,-37625,9900"
st "End-module directives:"
blo "-49125,9700"
)
*25 (MLText
uid 25,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-49125,9900,-49125,9900"
tm "FcCompilerDirectivesTextMgr"
)
]
associable 1
)
windowSize "0,0,1015,690"
viewArea "0,0,0,0"
cachedDiagramExtent "0,0,0,0"
pageBreakOrigin "0,0"
isTopLevel 1
defaultCommentText (CommentText
shape (Rectangle
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "0,0,15000,5000"
)
text (MLText
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "200,200,2200,1100"
st "
Text
"
tm "CommentText"
wrapOption 3
visibleHeight 4600
visibleWidth 14600
)
)
defaultPanel (Panel
shape (RectFrame
va (VaSet
vasetType 1
fg "65535,65535,65535"
lineColor "32768,0,0"
lineWidth 3
)
xt "0,0,20000,20000"
)
title (TextAssociate
ps "TopLeftStrategy"
text (Text
va (VaSet
font "courier,8,1"
)
xt "1000,1000,4000,1900"
st "Panel0"
blo "1000,1700"
tm "PanelText"
)
)
)
archDeclarativeBlock *26 (BiTextGroup
uid 3,0
stg "VerticalLayoutStrategy"
first (Text
uid 4,0
va (VaSet
font "courier,8,1"
)
xt "-69125,10750,-56125,11650"
st "Architecture Declarations"
blo "-69125,11450"
)
second (MLText
uid 5,0
va (VaSet
font "courier,8,0"
)
xt "-69125,11650,-1125,819850"
st "

  
  ----------------------------------------------------------------------
  -- types to support frame data
  ----------------------------------------------------------------------
  -- Tx Data and Data_valid record
  type data_typ is record
      data : bit_vector(7 downto 0);  -- data
      valid : bit;                    -- data_valid
      error : bit;                    -- data_error
  end record;
  type frame_of_data_typ is array (natural range <>) of data_typ;

  -- Tx Data, Data_valid and underrun record
  type frame_typ is record
      columns   : frame_of_data_typ(0 to 65);-- data field
      bad_frame : boolean;  -- does this frame contain an error?
  end record;
  type frame_typ_ary is array (natural range <>) of frame_typ;

  ----------------------------------------------------------------------
  -- Stimulus - Frame data 
  ----------------------------------------------------------------------
  -- The following constant holds the stimulus for the testbench. It is 
  -- an ordered array of frames, with frame 0 the first to be injected 
  -- into the core receiver PHY interface by the testbench. 
  ----------------------------------------------------------------------
  constant frame_data : frame_typ_ary := (
   -------------
   -- Frame 0
   -------------
    0          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'),   -- 46th Byte of Data
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 1
   -------------
    1          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"80\", VALID => '1', ERROR => '0'), -- Length/Type = Type = 8000
       13      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), 
       60      => ( DATA => X\"2F\", VALID => '1', ERROR => '0'), -- 47th Data byte
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 2
   -------------
    2          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '1'), -- assert error here
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

       -- Error this frame
      bad_frame => true),


   -------------
   -- Frame 3
   -------------
   3          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"03\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 03
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), -- Therefore padding is required
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'), 
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Padding starts here
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false));



  ----------------------------------------------------------------------
  -- CRC engine 
  ----------------------------------------------------------------------
  function calc_crc (data : in std_logic_vector;
                     fcs  : in std_logic_vector)
  return std_logic_vector is   

     variable crc          : std_logic_vector(31 downto 0);
     variable crc_feedback : std_logic;     
  begin

    crc := not fcs;

    for I in 0 to 7 loop
      crc_feedback      := crc(0) xor data(I);

      crc(4 downto 0)   := crc(5 downto 1);
      crc(5)            := crc(6)  xor crc_feedback;
      crc(7 downto 6)   := crc(8 downto 7);
      crc(8)            := crc(9)  xor crc_feedback;
      crc(9)            := crc(10) xor crc_feedback;
      crc(14 downto 10) := crc(15 downto 11);
      crc(15)           := crc(16) xor crc_feedback;
      crc(18 downto 16) := crc(19 downto 17);
      crc(19)           := crc(20) xor crc_feedback;
      crc(20)           := crc(21) xor crc_feedback;
      crc(21)           := crc(22) xor crc_feedback;
      crc(22)           := crc(23);
      crc(23)           := crc(24) xor crc_feedback;
      crc(24)           := crc(25) xor crc_feedback;
      crc(25)           := crc(26);
      crc(26)           := crc(27) xor crc_feedback;
      crc(27)           := crc(28) xor crc_feedback;
      crc(28)           := crc(29);
      crc(29)           := crc(30) xor crc_feedback;
      crc(30)           := crc(31) xor crc_feedback;
      crc(31)           :=             crc_feedback;
    end loop; 
      
    -- return the CRC result                                  
    return not crc;

  end calc_crc;



  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B decoding
  ----------------------------------------------------------------------

  -- Decode the 8B10B code. No disparity verification is performed, just
  -- a simple table lookup.
  procedure decode_8b10b (
    constant d10  : in  std_logic_vector(0 to 9);
    variable q8   : out std_logic_vector(7 downto 0);
    variable is_k : out boolean) is
    variable k28 : boolean;
    variable d10_rev : std_logic_vector(9 downto 0);
  begin
    -- reverse the 10B codeword
    for i in 0 to 9 loop
      d10_rev(i) := d10(i);
    end loop;  -- i
    -- do the 6B5B decode
    case d10_rev(5 downto 0) is
      when \"000110\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"111001\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"010001\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"101110\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"010010\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"101101\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"100011\" =>
        q8(4 downto 0) := \"00011\";   --D.3
      when \"010100\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"101011\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"100101\" =>
        q8(4 downto 0) := \"00101\";   --D.5
      when \"100110\" =>
        q8(4 downto 0) := \"00110\";   --D.6
      when \"000111\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"111000\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"011000\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"100111\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"101001\" =>
        q8(4 downto 0) := \"01001\";   --D.9
      when \"101010\" =>
        q8(4 downto 0) := \"01010\";   --D.10
      when \"001011\" =>
        q8(4 downto 0) := \"01011\";   --D.11
      when \"101100\" =>
        q8(4 downto 0) := \"01100\";   --D.12
      when \"001101\" =>
        q8(4 downto 0) := \"01101\";   --D.13
      when \"001110\" =>
        q8(4 downto 0) := \"01110\";   --D.14
      when \"000101\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"111010\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"110110\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"001001\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"110001\" =>
        q8(4 downto 0) := \"10001\";   --D.17
      when \"110010\" =>
        q8(4 downto 0) := \"10010\";   --D.18
      when \"010011\" =>
        q8(4 downto 0) := \"10011\";   --D.19
      when \"110100\" =>
        q8(4 downto 0) := \"10100\";   --D.20
      when \"010101\" =>
        q8(4 downto 0) := \"10101\";   --D.21
      when \"010110\" =>
        q8(4 downto 0) := \"10110\";   --D.22
      when \"010111\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"101000\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"001100\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"110011\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"011001\" =>
        q8(4 downto 0) := \"11001\";   --D.25
      when \"011010\" =>
        q8(4 downto 0) := \"11010\";   --D.26
      when \"011011\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"100100\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"011100\" =>
        q8(4 downto 0) := \"11100\";   --D.28
      when \"111100\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"000011\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"011101\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"100010\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"011110\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"100001\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"110101\" =>
        q8(4 downto 0) := \"11111\";   --D.31
      when \"001010\" =>
        q8(4 downto 0) := \"11111\";   --D.31
        
      when others   =>
        q8(4 downto 0) := \"11110\";  --CODE VIOLATION - return /E/
    end case;

    k28 := not((d10(2) OR d10(3) OR d10(4) OR d10(5)
                OR NOT(d10(8) XOR d10(9)))) = '1';
    
    -- do the 4B3B decode
    case d10_rev(9 downto 6) is
      when \"0010\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1101\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1001\" =>
        if not k28 then
          q8(7 downto 5) := \"001\";     --D/K.x.1
        else
          q8(7 downto 5) := \"110\";     --K28.6
        end if;
      when \"0110\" =>
        if k28 then
          q8(7 downto 5) := \"001\";     --K.28.1
        else
          q8(7 downto 5) := \"110\";     --D/K.x.6
        end if;
      when \"1010\" =>
        if not k28 then
          q8(7 downto 5) := \"010\";     --D/K.x.2
        else
          q8(7 downto 5) := \"101\";     --K28.5
        end if;
      when \"0101\" =>
        if k28 then
          q8(7 downto 5) := \"010\";     --K28.2
        else
          q8(7 downto 5) := \"101\";     --D/K.x.5
        end if;
      when \"0011\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"1100\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"0100\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"1011\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"0111\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1000\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1110\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7
      when \"0001\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7

      when others =>
        q8(7 downto 5) := \"111\";   --CODE VIOLATION - return /E/
    end case;

    is_k := ((d10(2) and d10(3) and d10(4) and d10(5))
            or not (d10(2) or d10(3) or d10(4) or d10(5))
            or ((d10(4) xor d10(5))
              and ((d10(5) and d10(7) and d10(8) and d10(9))
                or not(d10(5) or d10(7) or d10(8) or d10(9))))) = '1' ;
  end decode_8b10b;


  
  ----------------------------------------------------------------------
  -- Procedure to perform comma detection
  ----------------------------------------------------------------------

  function is_comma (
    constant codegroup : in std_logic_vector(0 to 9))
    return boolean is
  begin  -- is_comma
    case codegroup(0 to 6) is
      when \"0011111\" =>
        return true;
      when \"1100000\" =>
        return true;
      when others =>
        return false;
    end case;
  end is_comma;


  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B encoding
  ----------------------------------------------------------------------

  procedure encode_8b10b (
    constant d8                : in  std_logic_vector(7 downto 0);
    constant is_k              : in  boolean;
    variable q10               : out std_logic_vector(0 to 9);
    constant disparity_pos_in  : in  boolean;
    variable disparity_pos_out : out boolean) is
    variable b6                       : std_logic_vector(5 downto 0);
    variable b4                       : std_logic_vector(3 downto 0);
    variable k28, pdes6, a7, l13, l31 : boolean;
    variable a, b, c, d, e            : boolean;
  begin  -- encode_8b10b
    -- precalculate some common terms
    a := d8(0) = '1';
    b := d8(1) = '1';
    c := d8(2) = '1';
    d := d8(3) = '1';
    e := d8(4) = '1';

    k28 := is_k and d8(4 downto 0) = \"11100\";
    l13 := (((a xor b) and not (c or d))
            or ((c xor d) and not(a or b)));

    l31 := (((a xor b) and (c and d))
             or
             ((c xor d) and (a and b)));

    a7 := is_k or ((l31 and d and not e and disparity_pos_in)
                   or (l13 and not d and e and not disparity_pos_in));

    -- Do the 5B/6B conversion (calculate the 6b symbol)
    if k28 then                         --K.28
      if not disparity_pos_in then
        b6 := \"111100\";
      else
        b6 := \"000011\";
      end if;
    else
      case d8(4 downto 0) is
        when \"00000\" =>                 --D.0
          if disparity_pos_in then
            b6 := \"000110\";
          else
            b6 := \"111001\";
          end if;
        when \"00001\" =>                 --D.1
          if disparity_pos_in then
            b6 := \"010001\";
          else
            b6 := \"101110\";
          end if;
        when \"00010\" =>                 --D.2
          if disparity_pos_in then
            b6 := \"010010\";
          else
            b6 := \"101101\";
          end if;
        when \"00011\" =>
          b6 := \"100011\";               --D.3
        when \"00100\" =>                 --D.4
          if disparity_pos_in then
            b6 := \"010100\";
          else
            b6 := \"101011\";
          end if;
        when \"00101\" =>
          b6 := \"100101\";               --D.5
        when \"00110\" =>
          b6 := \"100110\";               --D.6
        when \"00111\" =>                 --D.7   
          if not disparity_pos_in then
            b6 := \"000111\";
          else
            b6 := \"111000\";
          end if;
        when \"01000\" =>                 --D.8
          if disparity_pos_in then
            b6 := \"011000\";
          else
            b6 := \"100111\";
          end if;
        when \"01001\" =>
          b6 := \"101001\";               --D.9
        when \"01010\" =>
          b6 := \"101010\";               --D.10
        when \"01011\" =>
          b6 := \"001011\";               --D.11
        when \"01100\" =>
          b6 := \"101100\";               --D.12
        when \"01101\" =>
          b6 := \"001101\";               --D.13
        when \"01110\" =>
          b6 := \"001110\";               --D.14
        when \"01111\" =>                 --D.15
          if disparity_pos_in then
            b6 := \"000101\";
          else
            b6 := \"111010\";
          end if;
        when \"10000\" =>                 --D.16
          if not disparity_pos_in then
            b6 := \"110110\";
          else
            b6 := \"001001\";
          end if;
        when \"10001\" =>
          b6 := \"110001\";               --D.17
        when \"10010\" =>
          b6 := \"110010\";               --D.18
        when \"10011\" =>
          b6 := \"010011\";               --D.19
        when \"10100\" =>
          b6 := \"110100\";               --D.20
        when \"10101\" =>
          b6 := \"010101\";               --D.21
        when \"10110\" =>
          b6 := \"010110\";               --D.22
        when \"10111\" =>                 --D/K.23
          if not disparity_pos_in then
            b6 := \"010111\";
          else
            b6 := \"101000\";
          end if;
        when \"11000\" =>                 --D.24
          if disparity_pos_in then
            b6 := \"001100\";
          else
            b6 := \"110011\";
          end if;
        when \"11001\" =>
          b6 := \"011001\";               --D.25
        when \"11010\" =>
          b6 := \"011010\";               --D.26
        when \"11011\" =>                 --D/K.27
          if not disparity_pos_in then
            b6 := \"011011\";
          else
            b6 := \"100100\";
          end if;
        when \"11100\" =>
          b6 := \"011100\";               --D.28
        when \"11101\" =>                 --D/K.29
          if not disparity_pos_in then
            b6 := \"011101\";
          else
            b6 := \"100010\";
          end if;
        when \"11110\" =>                 --D/K.30
          if not disparity_pos_in then
            b6 := \"011110\";
          else
            b6 := \"100001\";
          end if;
        when \"11111\" =>                 --D.31
          if not disparity_pos_in then
            b6 := \"110101\";
          else
            b6 := \"001010\";
          end if;
        when others =>
          b6 := \"XXXXXX\";
      end case;
    end if;

    -- reverse the bits
    for i in 0 to 5 loop
      q10(i) := b6(i);
    end loop;  -- i

    -- calculate the running disparity after the 5B6B block encode
    if k28 then
      pdes6 := not disparity_pos_in;
    else
      case d8(4 downto 0) is
        when \"00000\" => pdes6 := not disparity_pos_in;
        when \"00001\" => pdes6 := not disparity_pos_in;
        when \"00010\" => pdes6 := not disparity_pos_in;
        when \"00011\" => pdes6 := disparity_pos_in;
        when \"00100\" => pdes6 := not disparity_pos_in;
        when \"00101\" => pdes6 := disparity_pos_in;
        when \"00110\" => pdes6 := disparity_pos_in;
        when \"00111\" => pdes6 := disparity_pos_in;

        when \"01000\" => pdes6 := not disparity_pos_in;
        when \"01001\" => pdes6 := disparity_pos_in;
        when \"01010\" => pdes6 := disparity_pos_in;
        when \"01011\" => pdes6 := disparity_pos_in;
        when \"01100\" => pdes6 := disparity_pos_in;
        when \"01101\" => pdes6 := disparity_pos_in;
        when \"01110\" => pdes6 := disparity_pos_in;
        when \"01111\" => pdes6 := not disparity_pos_in;

        when \"10000\" => pdes6 := not disparity_pos_in;
        when \"10001\" => pdes6 := disparity_pos_in;
        when \"10010\" => pdes6 := disparity_pos_in;
        when \"10011\" => pdes6 := disparity_pos_in;
        when \"10100\" => pdes6 := disparity_pos_in;
        when \"10101\" => pdes6 := disparity_pos_in;
        when \"10110\" => pdes6 := disparity_pos_in;
        when \"10111\" => pdes6 := not disparity_pos_in;

        when \"11000\" => pdes6 := not disparity_pos_in;
        when \"11001\" => pdes6 := disparity_pos_in;
        when \"11010\" => pdes6 := disparity_pos_in;
        when \"11011\" => pdes6 := not disparity_pos_in;
        when \"11100\" => pdes6 := disparity_pos_in;
        when \"11101\" => pdes6 := not disparity_pos_in;
        when \"11110\" => pdes6 := not disparity_pos_in;
        when \"11111\" => pdes6 := not disparity_pos_in;
        when others  => pdes6 := disparity_pos_in;
      end case;
    end if;

    case d8(7 downto 5) is
      when \"000\" =>                     --D/K.x.0
        if pdes6 then
          b4 := \"0010\";
        else
          b4 := \"1101\";
        end if;
      when \"001\" =>                     --D/K.x.1
        if k28 and not pdes6 then
          b4 := \"0110\";
        else
          b4 := \"1001\";
        end if;
      when \"010\" =>                     --D/K.x.2
        if k28 and not pdes6 then
          b4 := \"0101\";
        else
          b4 := \"1010\";
        end if;
      when \"011\" =>                     --D/K.x.3
        if not pdes6 then
          b4 := \"0011\";
        else
          b4 := \"1100\";
        end if;
      when \"100\" =>                     --D/K.x.4
        if pdes6 then
          b4 := \"0100\";
        else
          b4 := \"1011\";
        end if;
      when \"101\" =>                     --D/K.x.5
        if k28 and not pdes6 then
          b4 := \"1010\";
        else
          b4 := \"0101\";
        end if;
      when \"110\" =>                     --D/K.x.6
        if k28 and not pdes6 then
          b4 := \"1001\";
        else
          b4 := \"0110\";
        end if;
      when \"111\" =>                     --D.x.P7
        if not a7 then
          if not pdes6 then
            b4 := \"0111\";
          else
            b4 := \"1000\";
          end if;
        else                            --D/K.y.A7
          if not pdes6 then
            b4 := \"1110\";
          else
            b4 := \"0001\";
          end if;
        end if;
      when others =>
        b4 := \"XXXX\";
    end case;

    -- Reverse the bits
    for i in 0 to 3 loop
      q10(i+6) := b4(i);
    end loop;  -- i

    -- Calculate the running disparity after the 4B group
    case d8(7 downto 5) is
      when \"000\"  =>
        disparity_pos_out := not pdes6;
      when \"001\"  =>
        disparity_pos_out := pdes6;
      when \"010\"  =>
        disparity_pos_out := pdes6;
      when \"011\"  =>
        disparity_pos_out := pdes6;
      when \"100\"  =>
        disparity_pos_out := not pdes6;
      when \"101\"  =>
        disparity_pos_out := pdes6;
      when \"110\"  =>
        disparity_pos_out := pdes6;
      when \"111\"  =>
        disparity_pos_out := not pdes6;
      when others =>
        disparity_pos_out := pdes6;
    end case;
    
  end encode_8b10b;



  ----------------------------------------------------------------------
  -- testbench signals and constants
  ----------------------------------------------------------------------

  -- Unit Interval for Gigabit Ethernet
  constant UI  : time := 800 ps;

  -- testbench clocks and sampling
  signal bitclock             : std_logic;   -- clock running at RocketIO serial frequency
  signal stim_rx_sample       : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 
  signal mon_tx_sample        : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 

  -- signals for the Tx monitor following 8B10B decode
  signal tx_pdata       : std_logic_vector(7 downto 0);  
  signal tx_is_k        : std_logic;

  -- signals for the Rx stimulus prior to 8B10B encode
  signal rx_pdata       : std_logic_vector(7 downto 0) := \"10111100\";
  signal rx_is_k        : boolean := true;
  signal rx_even        : std_logic := '1'; -- Keep track of the even/odd position
  signal rx_rundisp_pos : boolean := false; -- Indicates +ve running disparity

  -- testbench control signals
  signal current_speed       : string(1 to 6) := \"1gig  \";


  
"
tm "FcArchDeclTextMgr"
)
associable 1
)
archConcurrentStatementBlock *27 (BiTextGroup
uid 6,0
stg "VerticalLayoutStrategy"
first (Text
uid 7,0
va (VaSet
font "courier,8,1"
)
xt "-69125,823850,-58125,824750"
st "Concurrent Statements"
blo "-69125,824550"
)
second (MLText
uid 8,0
va (VaSet
font "courier,8,0"
)
xt "-69125,824750,-33625,837350"
st "
----------------------------------------------------------------------
-- Simulus processes
--------------------
-- Send four frames through the MAC and Design Example
--      -- frame 0 = minimum length frame
--      -- frame 1 = type frame
--      -- frame 2 = errored frame
--      -- frame 3 = padded frame
----------------------------------------------------------------------
-- sample on every clock
stim_rx_sample <= '1'; 
-- sample on every clock
mon_tx_sample <= '1';
"
tm "FcArchConcStmtTextMgr"
)
associable 1
)
processDeclarativeBlock *28 (BiTextGroup
uid 9,0
stg "VerticalLayoutStrategy"
first (Text
uid 10,0
va (VaSet
font "courier,8,1"
)
xt "-69125,847150,-58625,848050"
st "Process Declarations"
blo "-69125,847850"
)
second (MLText
uid 11,0
va (VaSet
font "courier,8,0"
)
xt "-69125,848050,-69125,848050"
tm "FcProcDeclTextMgr"
)
associable 1
)
sensitivityListBlock *29 (BiTextGroup
uid 12,0
stg "VerticalLayoutStrategy"
first (Text
uid 13,0
va (VaSet
font "courier,8,1"
)
xt "-69125,841350,-60625,842250"
st "Sensitivity List"
blo "-69125,842050"
)
second (MLText
uid 14,0
va (VaSet
font "courier,8,0"
)
xt "-69125,842250,-62125,843150"
tm "FcSensListTextMgr"
)
)
)
genChar (FcGenChar
uid 26,0
machineMode 1
resetActions ""
resetMode 1
resetName ""
resetCondition ""
vlogResetSensitivity ""
resetPolarity 0
clockPolarity 0
clockSigName ""
clockCondition ""
verilogProcessStatementType 0
verilogBlockType 0
instrumentForAnimation 0
insertSetResetPragma 0
setresetPragma 0
)
name "p_bitclock"
)
*30 (ConcurrentFC
uid 90,0
topDiagram (FlowDiagram
LanguageMgr "None"
uid 91,0
optionalChildren [
*31 (StartPoint
uid 116,0
optionalChildren [
*32 (CommentText
uid 121,0
ps "EdgeToEdgeStrategy"
shape (Rectangle
uid 122,0
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "13000,13000,28000,17000"
)
text (MLText
uid 123,0
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "13200,13200,27700,16800"
st "



   Tx Monitor process. This process checks the frames coming out
   of the Gigabit Transceiver transmitter to make sure that they   
   match those injected into the Gigabit Transceiver receiver.
  
"
tm "CommentText"
wrapOption 3
visibleHeight 4000
visibleWidth 15000
)
included 1
)
]
shape (RoundedRectangle
uid 117,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,12000,13000,14000"
radius 400
)
label (Text
uid 118,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "8500,12500,11500,13500"
st "Start"
ju 0
blo "10000,13300"
)
outConnect (FlowConnect
uid 119,0
ps "OnEdgeStrategy"
shape (Triangle
uid 120,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,13500,10500,14500"
)
direction 1
position 1
)
)
*33 (ActionBox
uid 124,0
shape (Rectangle
uid 125,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "1000,17700,19000,22300"
)
name (TextAssociate
uid 126,0
ps "CenterOffsetStrategy"
text (Text
uid 127,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "1000,16750,2000,17650"
st "a0"
blo "1000,17450"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 128,0
ps "CenterOffsetStrategy"
text (MLText
uid 129,0
va (VaSet
font "courier,8,0"
)
xt "1500,18200,18500,21800"
st "-- process p_monitor
monitor_finished_1g   <= false;  
monitor_finished_100m <= false;
monitor_finished_10m  <= false;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 130,0
ps "OnEdgeStrategy"
shape (Triangle
uid 131,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,17200,10500,18200"
)
direction 0
)
outConnect (FlowConnect
uid 132,0
ps "OnEdgeStrategy"
shape (Triangle
uid 133,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,21800,10500,22800"
)
direction 1
position 1
)
)
*34 (WaitBox
uid 136,0
shape (Octagon
uid 137,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,26000,11000,28000"
)
name (TextAssociate
uid 138,0
ps "CenterOffsetStrategy"
text (Text
uid 139,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,25050,10000,25950"
st "w0"
blo "9000,25750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 140,0
ps "CenterOffsetStrategy"
text (MLText
uid 141,0
va (VaSet
font "courier,8,0"
)
xt "11250,26550,33550,28350"
st "-- first, get synced up with the TX clock
wait until clk125m'event and clk125m = '1';
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 142,0
ps "OnEdgeStrategy"
shape (Triangle
uid 143,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,25500,10500,26500"
)
direction 0
)
outConnect (FlowConnect
uid 144,0
ps "OnEdgeStrategy"
shape (Triangle
uid 145,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,27500,10500,28500"
)
direction 1
position 1
)
)
*35 (WaitBox
uid 148,0
shape (Octagon
uid 149,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,31000,11000,33000"
)
name (TextAssociate
uid 150,0
ps "CenterOffsetStrategy"
text (Text
uid 151,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,30050,10000,30950"
st "w1"
blo "9000,30750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 152,0
ps "CenterOffsetStrategy"
text (MLText
uid 153,0
va (VaSet
font "courier,8,0"
)
xt "11250,31550,33550,32450"
st "wait until clk125m'event and clk125m = '1';
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 154,0
ps "OnEdgeStrategy"
shape (Triangle
uid 155,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,30500,10500,31500"
)
direction 0
)
outConnect (FlowConnect
uid 156,0
ps "OnEdgeStrategy"
shape (Triangle
uid 157,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,32500,10500,33500"
)
direction 1
position 1
)
)
*36 (ActionBox
uid 160,0
shape (Rectangle
uid 161,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-3500,36800,23500,43200"
)
name (TextAssociate
uid 162,0
ps "CenterOffsetStrategy"
text (Text
uid 163,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-3500,35850,-2500,36750"
st "a1"
blo "-3500,36550"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 164,0
ps "CenterOffsetStrategy"
text (MLText
uid 165,0
va (VaSet
font "courier,8,0"
)
xt "-3000,37300,23000,42700"
st "

 ------------------------------------
 -- Compare the four frames
 ------------------------------------
 -- loop over all the frames in the stimulus vector
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 166,0
ps "OnEdgeStrategy"
shape (Triangle
uid 167,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,36300,10500,37300"
)
direction 0
)
outConnect (FlowConnect
uid 168,0
ps "OnEdgeStrategy"
shape (Triangle
uid 169,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,42700,10500,43700"
)
direction 1
position 1
)
)
*37 (StartLoop
uid 172,0
shape (Ellipse
uid 173,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,47000,13000,49000"
)
label (Text
uid 174,0
va (VaSet
font "courier,8,1"
)
xt "9000,47550,11000,48450"
st "Loop"
ju 0
blo "10000,48250"
)
name (TextAssociate
uid 175,0
ps "CenterOffsetStrategy"
text (Text
uid 176,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,46050,8000,46950"
st "l0"
blo "7000,46750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 177,0
ps "CenterOffsetStrategy"
text (MLText
uid 178,0
va (VaSet
font "courier,8,0"
)
xt "10000,48000,10000,48000"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 179,0
ps "OnEdgeStrategy"
shape (Triangle
uid 180,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,46500,10500,47500"
)
direction 0
)
outConnect (FlowConnect
uid 181,0
ps "OnEdgeStrategy"
shape (Triangle
uid 182,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,48500,10500,49500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 183,0
ps "OnEdgeStrategy"
shape (Triangle
uid 184,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,47500,7500,48500"
)
direction 0
position 2
)
)
*38 (ActionBox
uid 187,0
shape (Rectangle
uid 188,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "5000,52050,15000,53950"
)
name (TextAssociate
uid 189,0
ps "CenterOffsetStrategy"
text (Text
uid 190,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,51100,6000,52000"
st "a2"
blo "5000,51800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 191,0
ps "CenterOffsetStrategy"
text (MLText
uid 192,0
va (VaSet
font "courier,8,0"
)
xt "5500,52550,14500,53450"
st "current_col := 0;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 193,0
ps "OnEdgeStrategy"
shape (Triangle
uid 194,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,51550,10500,52550"
)
direction 0
)
outConnect (FlowConnect
uid 195,0
ps "OnEdgeStrategy"
shape (Triangle
uid 196,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,53450,10500,54450"
)
direction 1
position 1
)
)
*39 (ActionBox
uid 199,0
shape (Rectangle
uid 200,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-8250,57150,28250,60850"
)
name (TextAssociate
uid 201,0
ps "CenterOffsetStrategy"
text (Text
uid 202,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-8250,56200,-7250,57100"
st "a3"
blo "-8250,56900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 203,0
ps "CenterOffsetStrategy"
text (MLText
uid 204,0
va (VaSet
font "courier,8,0"
)
xt "-7750,57650,27750,60350"
st "-- If the current frame had an error inserted then it would have been 
-- dropped by the FIFO in the design example.  Therefore move 
-- immediately on to the next frame.
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 205,0
ps "OnEdgeStrategy"
shape (Triangle
uid 206,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,56650,10500,57650"
)
direction 0
)
outConnect (FlowConnect
uid 207,0
ps "OnEdgeStrategy"
shape (Triangle
uid 208,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,60350,10500,61350"
)
direction 1
position 1
)
)
*40 (StartLoop
uid 211,0
shape (Ellipse
uid 212,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,64000,13000,66000"
)
label (Text
uid 213,0
va (VaSet
font "courier,8,1"
)
xt "9000,64550,11000,65450"
st "Loop"
ju 0
blo "10000,65250"
)
name (TextAssociate
uid 214,0
ps "CenterOffsetStrategy"
text (Text
uid 215,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,63050,8000,63950"
st "l1"
blo "7000,63750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 216,0
ps "CenterOffsetStrategy"
text (MLText
uid 217,0
va (VaSet
font "courier,8,0"
)
xt "10000,65000,31000,65900"
st "while frame_data(current_frame).bad_frame"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 218,0
ps "OnEdgeStrategy"
shape (Triangle
uid 219,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,63500,10500,64500"
)
direction 0
)
outConnect (FlowConnect
uid 220,0
ps "OnEdgeStrategy"
shape (Triangle
uid 221,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,65500,10500,66500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 222,0
ps "OnEdgeStrategy"
shape (Triangle
uid 223,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,64500,7500,65500"
)
direction 0
position 2
)
)
*41 (ActionBox
uid 226,0
shape (Rectangle
uid 227,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "500,70050,19500,71950"
)
name (TextAssociate
uid 228,0
ps "CenterOffsetStrategy"
text (Text
uid 229,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "500,69100,1500,70000"
st "a4"
blo "500,69800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 230,0
ps "CenterOffsetStrategy"
text (MLText
uid 231,0
va (VaSet
font "courier,8,0"
)
xt "1000,70550,19000,71450"
st "current_frame := current_frame + 1;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 232,0
ps "OnEdgeStrategy"
shape (Triangle
uid 233,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,69550,10500,70550"
)
direction 0
)
outConnect (FlowConnect
uid 234,0
ps "OnEdgeStrategy"
shape (Triangle
uid 235,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,71450,10500,72450"
)
direction 1
position 1
)
)
*42 (DecisionBox
uid 238,0
shape (Diamond
uid 239,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,76000,15000,80000"
)
name (TextAssociate
uid 240,0
ps "EdgeToEdgeStrategy"
text (Text
uid 241,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,75050,6000,75950"
st "d0"
blo "5000,75750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 242,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 243,0
va (VaSet
font "courier,8,0"
)
xt "450,77550,19550,78450"
st " current_frame = frame_data'high + 1 "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 244,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,80500,11000,81400"
st "T"
blo "10500,81200"
)
falseLabel (Text
uid 245,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,76600,16000,77500"
st "F"
blo "15500,77300"
)
inConnect (FlowConnect
uid 246,0
ps "OnEdgeStrategy"
shape (Triangle
uid 247,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,75500,10500,76500"
)
direction 0
)
trueConnect (FlowConnect
uid 248,0
ps "OnEdgeStrategy"
shape (Triangle
uid 249,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,79500,10500,80500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 250,0
ps "OnEdgeStrategy"
shape (Triangle
uid 251,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,77500,15500,78500"
)
direction 1
position 3
)
elsif 1
)
*43 (ActionBox
uid 254,0
shape (Rectangle
uid 255,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "8250,84050,11750,85950"
)
name (TextAssociate
uid 256,0
ps "CenterOffsetStrategy"
text (Text
uid 257,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "8250,83100,9250,84000"
st "a5"
blo "8250,83800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 258,0
ps "CenterOffsetStrategy"
text (MLText
uid 259,0
va (VaSet
font "courier,8,0"
)
xt "8750,84550,11250,85450"
st "exit;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 260,0
ps "OnEdgeStrategy"
shape (Triangle
uid 261,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,83550,10500,84550"
)
direction 0
)
outConnect (FlowConnect
uid 262,0
ps "OnEdgeStrategy"
shape (Triangle
uid 263,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,85450,10500,86450"
)
direction 1
position 1
)
)
*44 (EndLoop
uid 282,0
shape (Ellipse
uid 283,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,93000,13000,95000"
)
label (Text
uid 284,0
va (VaSet
font "courier,8,1"
)
xt "8000,93550,12000,94450"
st "End Loop"
ju 0
blo "10000,94250"
)
inConnect (FlowConnect
uid 285,0
ps "OnEdgeStrategy"
shape (Triangle
uid 286,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,92500,10500,93500"
)
direction 0
)
outConnect (FlowConnect
uid 287,0
ps "OnEdgeStrategy"
shape (Triangle
uid 288,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,94500,10500,95500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 289,0
ps "OnEdgeStrategy"
shape (Triangle
uid 290,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,93500,7500,94500"
)
direction 1
position 2
)
)
*45 (ActionBox
uid 295,0
shape (Rectangle
uid 296,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-750,98150,20750,101850"
)
name (TextAssociate
uid 297,0
ps "CenterOffsetStrategy"
text (Text
uid 298,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-750,97200,250,98100"
st "a6"
blo "-750,97900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 299,0
ps "CenterOffsetStrategy"
text (MLText
uid 300,0
va (VaSet
font "courier,8,0"
)
xt "-250,98650,20250,101350"
st "

-- There are only 4 frames in this test.
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 301,0
ps "OnEdgeStrategy"
shape (Triangle
uid 302,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,97650,10500,98650"
)
direction 0
)
outConnect (FlowConnect
uid 303,0
ps "OnEdgeStrategy"
shape (Triangle
uid 304,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,101350,10500,102350"
)
direction 1
position 1
)
)
*46 (DecisionBox
uid 307,0
shape (Diamond
uid 308,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,106000,15000,110000"
)
name (TextAssociate
uid 309,0
ps "EdgeToEdgeStrategy"
text (Text
uid 310,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,105050,6000,105950"
st "d1"
blo "5000,105750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 311,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 312,0
va (VaSet
font "courier,8,0"
)
xt "450,107550,19550,108450"
st " current_frame = frame_data'high + 1 "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 313,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,110500,11000,111400"
st "T"
blo "10500,111200"
)
falseLabel (Text
uid 314,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,106600,16000,107500"
st "F"
blo "15500,107300"
)
inConnect (FlowConnect
uid 315,0
ps "OnEdgeStrategy"
shape (Triangle
uid 316,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,105500,10500,106500"
)
direction 0
)
trueConnect (FlowConnect
uid 317,0
ps "OnEdgeStrategy"
shape (Triangle
uid 318,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,109500,10500,110500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 319,0
ps "OnEdgeStrategy"
shape (Triangle
uid 320,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,107500,15500,108500"
)
direction 1
position 3
)
elsif 1
)
*47 (ActionBox
uid 323,0
shape (Rectangle
uid 324,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "8250,113050,11750,114950"
)
name (TextAssociate
uid 325,0
ps "CenterOffsetStrategy"
text (Text
uid 326,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "8250,112100,9250,113000"
st "a7"
blo "8250,112800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 327,0
ps "CenterOffsetStrategy"
text (MLText
uid 328,0
va (VaSet
font "courier,8,0"
)
xt "8750,113550,11250,114450"
st "exit;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 329,0
ps "OnEdgeStrategy"
shape (Triangle
uid 330,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,112550,10500,113550"
)
direction 0
)
outConnect (FlowConnect
uid 331,0
ps "OnEdgeStrategy"
shape (Triangle
uid 332,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,114450,10500,115450"
)
direction 1
position 1
)
)
*48 (ActionBox
uid 351,0
shape (Rectangle
uid 352,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "2250,123150,17750,126850"
)
name (TextAssociate
uid 353,0
ps "CenterOffsetStrategy"
text (Text
uid 354,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "2250,122200,3250,123100"
st "a8"
blo "2250,122900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 355,0
ps "CenterOffsetStrategy"
text (MLText
uid 356,0
va (VaSet
font "courier,8,0"
)
xt "2750,123650,17250,126350"
st "

-- Detect the Start of Frame
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 357,0
ps "OnEdgeStrategy"
shape (Triangle
uid 358,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,122650,10500,123650"
)
direction 0
)
outConnect (FlowConnect
uid 359,0
ps "OnEdgeStrategy"
shape (Triangle
uid 360,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,126350,10500,127350"
)
direction 1
position 1
)
)
*49 (StartLoop
uid 363,0
shape (Ellipse
uid 364,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,130000,13000,132000"
)
label (Text
uid 365,0
va (VaSet
font "courier,8,1"
)
xt "9000,130550,11000,131450"
st "Loop"
ju 0
blo "10000,131250"
)
name (TextAssociate
uid 366,0
ps "CenterOffsetStrategy"
text (Text
uid 367,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,129050,8000,129950"
st "l2"
blo "7000,129750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 368,0
ps "CenterOffsetStrategy"
text (MLText
uid 369,0
va (VaSet
font "courier,8,0"
)
xt "10000,131000,22000,131900"
st "while tx_pdata /= X\"FB\""
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 370,0
ps "OnEdgeStrategy"
shape (Triangle
uid 371,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,129500,10500,130500"
)
direction 0
)
outConnect (FlowConnect
uid 372,0
ps "OnEdgeStrategy"
shape (Triangle
uid 373,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,131500,10500,132500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 374,0
ps "OnEdgeStrategy"
shape (Triangle
uid 375,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,130500,7500,131500"
)
direction 0
position 2
)
)
*50 (WaitBox
uid 378,0
shape (Octagon
uid 379,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,136000,11000,138000"
)
name (TextAssociate
uid 380,0
ps "CenterOffsetStrategy"
text (Text
uid 381,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,135050,10000,135950"
st "w2"
blo "9000,135750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 382,0
ps "CenterOffsetStrategy"
text (MLText
uid 383,0
va (VaSet
font "courier,8,0"
)
xt "11250,136550,37550,139250"
st "-- /K27.7/ character
        wait until clk125m'event and clk125m = '1';
      
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 384,0
ps "OnEdgeStrategy"
shape (Triangle
uid 385,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,135500,10500,136500"
)
direction 0
)
outConnect (FlowConnect
uid 386,0
ps "OnEdgeStrategy"
shape (Triangle
uid 387,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,137500,10500,138500"
)
direction 1
position 1
)
)
*51 (EndLoop
uid 390,0
shape (Ellipse
uid 391,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,141000,13000,143000"
)
label (Text
uid 392,0
va (VaSet
font "courier,8,1"
)
xt "8000,141550,12000,142450"
st "End Loop"
ju 0
blo "10000,142250"
)
inConnect (FlowConnect
uid 393,0
ps "OnEdgeStrategy"
shape (Triangle
uid 394,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,140500,10500,141500"
)
direction 0
)
outConnect (FlowConnect
uid 395,0
ps "OnEdgeStrategy"
shape (Triangle
uid 396,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,142500,10500,143500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 397,0
ps "OnEdgeStrategy"
shape (Triangle
uid 398,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,141500,7500,142500"
)
direction 1
position 2
)
)
*52 (ActionBox
uid 403,0
shape (Rectangle
uid 404,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-14050,146150,34050,149850"
)
name (TextAssociate
uid 405,0
ps "CenterOffsetStrategy"
text (Text
uid 406,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-14050,145200,-13050,146100"
st "a9"
blo "-14050,145900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 407,0
ps "CenterOffsetStrategy"
text (MLText
uid 408,0
va (VaSet
font "courier,8,0"
)
xt "-13550,146650,33550,149350"
st "assert false
report \"EMAC0: Comparing Frame \" & integer'image(current_frame) & \" at \" & current_speed & cr
severity note;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 409,0
ps "OnEdgeStrategy"
shape (Triangle
uid 410,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,145650,10500,146650"
)
direction 0
)
outConnect (FlowConnect
uid 411,0
ps "OnEdgeStrategy"
shape (Triangle
uid 412,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,149350,10500,150350"
)
direction 1
position 1
)
)
*53 (ActionBox
uid 415,0
shape (Rectangle
uid 416,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-4350,154050,24350,155950"
)
name (TextAssociate
uid 417,0
ps "CenterOffsetStrategy"
text (Text
uid 418,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-4350,153100,-2850,154000"
st "a10"
blo "-4350,153800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 419,0
ps "CenterOffsetStrategy"
text (MLText
uid 420,0
va (VaSet
font "courier,8,0"
)
xt "-3850,154550,23850,155450"
st "fcs         := (others => '0'); -- reset the FCS field"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 421,0
ps "OnEdgeStrategy"
shape (Triangle
uid 422,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,153550,10500,154550"
)
direction 0
)
outConnect (FlowConnect
uid 423,0
ps "OnEdgeStrategy"
shape (Triangle
uid 424,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,155450,10500,156450"
)
direction 1
position 1
)
)
*54 (WaitBox
uid 427,0
shape (Octagon
uid 428,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,159000,11000,161000"
)
name (TextAssociate
uid 429,0
ps "CenterOffsetStrategy"
text (Text
uid 430,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,158050,10000,158950"
st "w3"
blo "9000,158750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 431,0
ps "CenterOffsetStrategy"
text (MLText
uid 432,0
va (VaSet
font "courier,8,0"
)
xt "11250,159550,45750,161350"
st "-- Move past the Start of Frame code to the 1st byte of preamble
wait until clk125m'event and clk125m = '1' and mon_tx_sample = '1';
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 433,0
ps "OnEdgeStrategy"
shape (Triangle
uid 434,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,158500,10500,159500"
)
direction 0
)
outConnect (FlowConnect
uid 435,0
ps "OnEdgeStrategy"
shape (Triangle
uid 436,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,160500,10500,161500"
)
direction 1
position 1
)
)
*55 (ActionBox
uid 439,0
shape (Rectangle
uid 440,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-9500,164150,29500,167850"
)
name (TextAssociate
uid 441,0
ps "CenterOffsetStrategy"
text (Text
uid 442,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-9500,163200,-8000,164100"
st "a11"
blo "-9500,163900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 443,0
ps "CenterOffsetStrategy"
text (MLText
uid 444,0
va (VaSet
font "courier,8,0"
)
xt "-9000,164650,29000,167350"
st "-- wait until the SFD code is detected.  
-- NOTE: It is neccessary to resynchronise on the SFD as the preamble field
--       may have shrunk.
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 445,0
ps "OnEdgeStrategy"
shape (Triangle
uid 446,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,163650,10500,164650"
)
direction 0
)
outConnect (FlowConnect
uid 447,0
ps "OnEdgeStrategy"
shape (Triangle
uid 448,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,167350,10500,168350"
)
direction 1
position 1
)
)
*56 (StartLoop
uid 451,0
shape (Ellipse
uid 452,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,172000,13000,174000"
)
label (Text
uid 453,0
va (VaSet
font "courier,8,1"
)
xt "9000,172550,11000,173450"
st "Loop"
ju 0
blo "10000,173250"
)
name (TextAssociate
uid 454,0
ps "CenterOffsetStrategy"
text (Text
uid 455,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,171050,8000,171950"
st "l3"
blo "7000,171750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 456,0
ps "CenterOffsetStrategy"
text (MLText
uid 457,0
va (VaSet
font "courier,8,0"
)
xt "10000,173000,22000,173900"
st "while tx_pdata /= X\"D5\""
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 458,0
ps "OnEdgeStrategy"
shape (Triangle
uid 459,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,171500,10500,172500"
)
direction 0
)
outConnect (FlowConnect
uid 460,0
ps "OnEdgeStrategy"
shape (Triangle
uid 461,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,173500,10500,174500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 462,0
ps "OnEdgeStrategy"
shape (Triangle
uid 463,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,172500,7500,173500"
)
direction 0
position 2
)
)
*57 (WaitBox
uid 466,0
shape (Octagon
uid 467,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,177000,11000,179000"
)
name (TextAssociate
uid 468,0
ps "CenterOffsetStrategy"
text (Text
uid 469,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,176050,10000,176950"
st "w4"
blo "9000,176750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 470,0
ps "CenterOffsetStrategy"
text (MLText
uid 471,0
va (VaSet
font "courier,8,0"
)
xt "11250,177550,45750,179350"
st "wait until clk125m'event and clk125m = '1' and mon_tx_sample = '1';

"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 472,0
ps "OnEdgeStrategy"
shape (Triangle
uid 473,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,176500,10500,177500"
)
direction 0
)
outConnect (FlowConnect
uid 474,0
ps "OnEdgeStrategy"
shape (Triangle
uid 475,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,178500,10500,179500"
)
direction 1
position 1
)
)
*58 (EndLoop
uid 478,0
shape (Ellipse
uid 479,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,182000,13000,184000"
)
label (Text
uid 480,0
va (VaSet
font "courier,8,1"
)
xt "8000,182550,12000,183450"
st "End Loop"
ju 0
blo "10000,183250"
)
inConnect (FlowConnect
uid 481,0
ps "OnEdgeStrategy"
shape (Triangle
uid 482,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,181500,10500,182500"
)
direction 0
)
outConnect (FlowConnect
uid 483,0
ps "OnEdgeStrategy"
shape (Triangle
uid 484,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,183500,10500,184500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 485,0
ps "OnEdgeStrategy"
shape (Triangle
uid 486,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,182500,7500,183500"
)
direction 1
position 2
)
)
*59 (WaitBox
uid 491,0
shape (Octagon
uid 492,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,188000,11000,190000"
)
name (TextAssociate
uid 493,0
ps "CenterOffsetStrategy"
text (Text
uid 494,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,187050,10000,187950"
st "w5"
blo "9000,187750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 495,0
ps "CenterOffsetStrategy"
text (MLText
uid 496,0
va (VaSet
font "courier,8,0"
)
xt "11250,188550,45750,189450"
st "wait until clk125m'event and clk125m = '1' and mon_tx_sample = '1';
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 497,0
ps "OnEdgeStrategy"
shape (Triangle
uid 498,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,187500,10500,188500"
)
direction 0
)
outConnect (FlowConnect
uid 499,0
ps "OnEdgeStrategy"
shape (Triangle
uid 500,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,189500,10500,190500"
)
direction 1
position 1
)
)
*60 (ActionBox
uid 503,0
shape (Rectangle
uid 504,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-2750,193050,22750,194950"
)
name (TextAssociate
uid 505,0
ps "CenterOffsetStrategy"
text (Text
uid 506,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-2750,192100,-1250,193000"
st "a12"
blo "-2750,192800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 507,0
ps "CenterOffsetStrategy"
text (MLText
uid 508,0
va (VaSet
font "courier,8,0"
)
xt "-2250,193550,22250,194450"
st "-- frame has started, loop over columns of frame"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 509,0
ps "OnEdgeStrategy"
shape (Triangle
uid 510,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,192550,10500,193550"
)
direction 0
)
outConnect (FlowConnect
uid 511,0
ps "OnEdgeStrategy"
shape (Triangle
uid 512,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,194450,10500,195450"
)
direction 1
position 1
)
)
*61 (StartLoop
uid 515,0
shape (Ellipse
uid 516,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,198000,13000,200000"
)
label (Text
uid 517,0
va (VaSet
font "courier,8,1"
)
xt "9000,198550,11000,199450"
st "Loop"
ju 0
blo "10000,199250"
)
name (TextAssociate
uid 518,0
ps "CenterOffsetStrategy"
text (Text
uid 519,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,197050,8000,197950"
st "l4"
blo "7000,197750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 520,0
ps "CenterOffsetStrategy"
text (MLText
uid 521,0
va (VaSet
font "courier,8,0"
)
xt "10000,199000,43700,199900"
st "while ((frame_data(current_frame).columns(current_col).valid)='1')"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 522,0
ps "OnEdgeStrategy"
shape (Triangle
uid 523,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,197500,10500,198500"
)
direction 0
)
outConnect (FlowConnect
uid 524,0
ps "OnEdgeStrategy"
shape (Triangle
uid 525,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,199500,10500,200500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 526,0
ps "OnEdgeStrategy"
shape (Triangle
uid 527,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,198500,7500,199500"
)
direction 0
position 2
)
)
*62 (ActionBox
uid 530,0
shape (Rectangle
uid 531,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-11500,203700,31500,208300"
)
name (TextAssociate
uid 532,0
ps "CenterOffsetStrategy"
text (Text
uid 533,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-11500,202750,-10000,203650"
st "a13"
blo "-11500,203450"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 534,0
ps "CenterOffsetStrategy"
text (MLText
uid 535,0
va (VaSet
font "courier,8,0"
)
xt "-11000,204200,31000,207800"
st "


-- The transmitted Destination Address was the Source Address of the injected frame
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 536,0
ps "OnEdgeStrategy"
shape (Triangle
uid 537,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,203200,10500,204200"
)
direction 0
)
outConnect (FlowConnect
uid 538,0
ps "OnEdgeStrategy"
shape (Triangle
uid 539,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,207800,10500,208800"
)
direction 1
position 1
)
)
*63 (DecisionBox
uid 542,0
shape (Diamond
uid 543,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,212000,15000,216000"
)
name (TextAssociate
uid 544,0
ps "EdgeToEdgeStrategy"
text (Text
uid 545,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,211050,6000,211950"
st "d2"
blo "5000,211750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 546,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 547,0
va (VaSet
font "courier,8,0"
)
xt "5500,213550,14500,214450"
st " current_col < 6 "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 548,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,216500,11000,217400"
st "T"
blo "10500,217200"
)
falseLabel (Text
uid 549,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,212600,16000,213500"
st "F"
blo "15500,213300"
)
inConnect (FlowConnect
uid 550,0
ps "OnEdgeStrategy"
shape (Triangle
uid 551,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,211500,10500,212500"
)
direction 0
)
trueConnect (FlowConnect
uid 552,0
ps "OnEdgeStrategy"
shape (Triangle
uid 553,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,215500,10500,216500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 554,0
ps "OnEdgeStrategy"
shape (Triangle
uid 555,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,213500,15500,214500"
)
direction 1
position 3
)
elsif 1
)
*64 (ActionBox
uid 558,0
shape (Rectangle
uid 559,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-14500,220050,34500,221950"
)
name (TextAssociate
uid 560,0
ps "CenterOffsetStrategy"
text (Text
uid 561,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-14500,219100,-13000,220000"
st "a14"
blo "-14500,219800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 562,0
ps "CenterOffsetStrategy"
text (MLText
uid 563,0
va (VaSet
font "courier,8,0"
)
xt "-14000,220550,34000,221450"
st "fcs := calc_crc(to_stdlogicvector(frame_data(current_frame).columns(current_col+6).data), fcs);"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 564,0
ps "OnEdgeStrategy"
shape (Triangle
uid 565,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,219550,10500,220550"
)
direction 0
)
outConnect (FlowConnect
uid 566,0
ps "OnEdgeStrategy"
shape (Triangle
uid 567,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,221450,10500,222450"
)
direction 1
position 1
)
)
*65 (ActionBox
uid 570,0
shape (Rectangle
uid 571,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-14000,225250,34000,230750"
)
name (TextAssociate
uid 572,0
ps "CenterOffsetStrategy"
text (Text
uid 573,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-14000,224300,-12500,225200"
st "a15"
blo "-14000,225000"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 574,0
ps "CenterOffsetStrategy"
text (MLText
uid 575,0
va (VaSet
font "courier,8,0"
)
xt "-13500,225750,33500,230250"
st "  assert (tx_pdata =
        to_stdlogicvector(frame_data(current_frame).columns(current_col+6).data(7 downto 0)))
    report \"** Error EMAC0: data incorrect during Destination Address\" & cr
    severity error;
-- The transmitted Source Address was the Destination Address of the injected frame
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 576,0
ps "OnEdgeStrategy"
shape (Triangle
uid 577,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,224750,10500,225750"
)
direction 0
)
outConnect (FlowConnect
uid 578,0
ps "OnEdgeStrategy"
shape (Triangle
uid 579,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,230250,10500,231250"
)
direction 1
position 1
)
)
*66 (DecisionBox
uid 582,0
shape (Diamond
uid 583,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "56000,217000,66000,221000"
)
name (TextAssociate
uid 584,0
ps "EdgeToEdgeStrategy"
text (Text
uid 585,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "56000,216050,57000,216950"
st "d3"
blo "56000,216750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 586,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 587,0
va (VaSet
font "courier,8,0"
)
xt "51250,218550,70750,219450"
st " current_col >= 6 and current_col < 12"
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 588,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "61500,221500,62000,222400"
st "T"
blo "61500,222200"
)
falseLabel (Text
uid 589,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "66500,217600,67000,218500"
st "F"
blo "66500,218300"
)
inConnect (FlowConnect
uid 590,0
ps "OnEdgeStrategy"
shape (Triangle
uid 591,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "60500,216500,61500,217500"
)
direction 0
)
trueConnect (FlowConnect
uid 592,0
ps "OnEdgeStrategy"
shape (Triangle
uid 593,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "60500,220500,61500,221500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 594,0
ps "OnEdgeStrategy"
shape (Triangle
uid 595,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "65500,218500,66500,219500"
)
direction 1
position 3
)
elsif 1
)
*67 (ActionBox
uid 598,0
shape (Rectangle
uid 599,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "36500,225050,85500,226950"
)
name (TextAssociate
uid 600,0
ps "CenterOffsetStrategy"
text (Text
uid 601,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "36500,224100,38000,225000"
st "a16"
blo "36500,224800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 602,0
ps "CenterOffsetStrategy"
text (MLText
uid 603,0
va (VaSet
font "courier,8,0"
)
xt "37000,225550,85000,226450"
st "fcs := calc_crc(to_stdlogicvector(frame_data(current_frame).columns(current_col-6).data), fcs);"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 604,0
ps "OnEdgeStrategy"
shape (Triangle
uid 605,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "60500,224550,61500,225550"
)
direction 0
)
outConnect (FlowConnect
uid 606,0
ps "OnEdgeStrategy"
shape (Triangle
uid 607,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "60500,226450,61500,227450"
)
direction 1
position 1
)
)
*68 (ActionBox
uid 610,0
shape (Rectangle
uid 611,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "37000,230800,85000,237200"
)
name (TextAssociate
uid 612,0
ps "CenterOffsetStrategy"
text (Text
uid 613,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "37000,229850,38500,230750"
st "a17"
blo "37000,230550"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 614,0
ps "CenterOffsetStrategy"
text (MLText
uid 615,0
va (VaSet
font "courier,8,0"
)
xt "37500,231300,84500,236700"
st "  assert (tx_pdata =
        to_stdlogicvector(frame_data(current_frame).columns(current_col-6).data(7 downto 0)))
    report \"** Error EMAC0: data incorrect during Source Address\" & cr
    severity error;   
     
-- for remainder of frame
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 616,0
ps "OnEdgeStrategy"
shape (Triangle
uid 617,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "60500,230300,61500,231300"
)
direction 0
)
outConnect (FlowConnect
uid 618,0
ps "OnEdgeStrategy"
shape (Triangle
uid 619,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "60500,236700,61500,237700"
)
direction 1
position 1
)
)
*69 (ActionBox
uid 622,0
shape (Rectangle
uid 623,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "88000,222050,136000,223950"
)
name (TextAssociate
uid 624,0
ps "CenterOffsetStrategy"
text (Text
uid 625,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "88000,221100,89500,222000"
st "a18"
blo "88000,221800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 626,0
ps "CenterOffsetStrategy"
text (MLText
uid 627,0
va (VaSet
font "courier,8,0"
)
xt "88500,222550,135500,223450"
st "fcs := calc_crc(to_stdlogicvector(frame_data(current_frame).columns(current_col).data), fcs);"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 628,0
ps "OnEdgeStrategy"
shape (Triangle
uid 629,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "111500,221550,112500,222550"
)
direction 0
)
outConnect (FlowConnect
uid 630,0
ps "OnEdgeStrategy"
shape (Triangle
uid 631,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "111500,223450,112500,224450"
)
direction 1
position 1
)
)
*70 (ActionBox
uid 634,0
shape (Rectangle
uid 635,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "89250,226700,134750,231300"
)
name (TextAssociate
uid 636,0
ps "CenterOffsetStrategy"
text (Text
uid 637,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "89250,225750,90750,226650"
st "a19"
blo "89250,226450"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 638,0
ps "CenterOffsetStrategy"
text (MLText
uid 639,0
va (VaSet
font "courier,8,0"
)
xt "89750,227200,134250,230800"
st "assert (tx_pdata(7 downto 0) =
     to_stdlogicvector(frame_data(current_frame).columns(current_col).data(7 downto 0)))
 report \"** Error EMAC0: data incorrect\"   & cr
 severity error;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 640,0
ps "OnEdgeStrategy"
shape (Triangle
uid 641,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "111500,226200,112500,227200"
)
direction 0
)
outConnect (FlowConnect
uid 642,0
ps "OnEdgeStrategy"
shape (Triangle
uid 643,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "111500,230800,112500,231800"
)
direction 1
position 1
)
)
*71 (ActionBox
uid 666,0
shape (Rectangle
uid 667,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-250,248600,20250,251400"
)
name (TextAssociate
uid 668,0
ps "CenterOffsetStrategy"
text (Text
uid 669,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-250,247650,1250,248550"
st "a20"
blo "-250,248350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 670,0
ps "CenterOffsetStrategy"
text (MLText
uid 671,0
va (VaSet
font "courier,8,0"
)
xt "250,249100,19750,250900"
st "-- wait for next column of data
current_col        := current_col + 1;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 672,0
ps "OnEdgeStrategy"
shape (Triangle
uid 673,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,248100,10500,249100"
)
direction 0
)
outConnect (FlowConnect
uid 674,0
ps "OnEdgeStrategy"
shape (Triangle
uid 675,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,250900,10500,251900"
)
direction 1
position 1
)
)
*72 (WaitBox
uid 678,0
shape (Octagon
uid 679,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,255000,11000,257000"
)
name (TextAssociate
uid 680,0
ps "CenterOffsetStrategy"
text (Text
uid 681,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,254050,10000,254950"
st "w6"
blo "9000,254750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 682,0
ps "CenterOffsetStrategy"
text (MLText
uid 683,0
va (VaSet
font "courier,8,0"
)
xt "11250,255550,45750,257350"
st "wait until clk125m'event and clk125m = '1' and mon_tx_sample = '1';

"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 684,0
ps "OnEdgeStrategy"
shape (Triangle
uid 685,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,254500,10500,255500"
)
direction 0
)
outConnect (FlowConnect
uid 686,0
ps "OnEdgeStrategy"
shape (Triangle
uid 687,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,256500,10500,257500"
)
direction 1
position 1
)
)
*73 (EndLoop
uid 690,0
shape (Ellipse
uid 691,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,260000,13000,262000"
)
label (Text
uid 692,0
va (VaSet
font "courier,8,1"
)
xt "8000,260550,12000,261450"
st "End Loop"
ju 0
blo "10000,261250"
)
inConnect (FlowConnect
uid 693,0
ps "OnEdgeStrategy"
shape (Triangle
uid 694,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,259500,10500,260500"
)
direction 0
)
outConnect (FlowConnect
uid 695,0
ps "OnEdgeStrategy"
shape (Triangle
uid 696,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,261500,10500,262500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 697,0
ps "OnEdgeStrategy"
shape (Triangle
uid 698,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,260500,7500,261500"
)
direction 1
position 2
)
)
*74 (ActionBox
uid 703,0
shape (Rectangle
uid 704,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "4500,265050,15500,266950"
)
name (TextAssociate
uid 705,0
ps "CenterOffsetStrategy"
text (Text
uid 706,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "4500,264100,6000,265000"
st "a21"
blo "4500,264800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 707,0
ps "CenterOffsetStrategy"
text (MLText
uid 708,0
va (VaSet
font "courier,8,0"
)
xt "5000,265550,15000,266450"
st "-- while data valid"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 709,0
ps "OnEdgeStrategy"
shape (Triangle
uid 710,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,264550,10500,265550"
)
direction 0
)
outConnect (FlowConnect
uid 711,0
ps "OnEdgeStrategy"
shape (Triangle
uid 712,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,266450,10500,267450"
)
direction 1
position 1
)
)
*75 (ActionBox
uid 715,0
shape (Rectangle
uid 716,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-5000,270600,25000,273400"
)
name (TextAssociate
uid 717,0
ps "CenterOffsetStrategy"
text (Text
uid 718,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-5000,269650,-3500,270550"
st "a22"
blo "-5000,270350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 719,0
ps "CenterOffsetStrategy"
text (MLText
uid 720,0
va (VaSet
font "courier,8,0"
)
xt "-4500,271100,24500,272900"
st "-- Check the FCS
-- Having checked all data columns, txd must contain FCS.
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 721,0
ps "OnEdgeStrategy"
shape (Triangle
uid 722,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,270100,10500,271100"
)
direction 0
)
outConnect (FlowConnect
uid 723,0
ps "OnEdgeStrategy"
shape (Triangle
uid 724,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,272900,10500,273900"
)
direction 1
position 1
)
)
*76 (StartLoop
uid 727,0
shape (Ellipse
uid 728,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,277000,13000,279000"
)
label (Text
uid 729,0
va (VaSet
font "courier,8,1"
)
xt "9000,277550,11000,278450"
st "Loop"
ju 0
blo "10000,278250"
)
name (TextAssociate
uid 730,0
ps "CenterOffsetStrategy"
text (Text
uid 731,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,276050,8000,276950"
st "l5"
blo "7000,276750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 732,0
ps "CenterOffsetStrategy"
text (MLText
uid 733,0
va (VaSet
font "courier,8,0"
)
xt "10000,278000,18000,278900"
st "for j in 0 to 3"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 734,0
ps "OnEdgeStrategy"
shape (Triangle
uid 735,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,276500,10500,277500"
)
direction 0
)
outConnect (FlowConnect
uid 736,0
ps "OnEdgeStrategy"
shape (Triangle
uid 737,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,278500,10500,279500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 738,0
ps "OnEdgeStrategy"
shape (Triangle
uid 739,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,277500,7500,278500"
)
direction 0
position 2
)
)
*77 (ActionBox
uid 742,0
shape (Rectangle
uid 743,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-6500,282150,26500,285850"
)
name (TextAssociate
uid 744,0
ps "CenterOffsetStrategy"
text (Text
uid 745,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-6500,281200,-5000,282100"
st "a23"
blo "-6500,281900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 746,0
ps "CenterOffsetStrategy"
text (MLText
uid 747,0
va (VaSet
font "courier,8,0"
)
xt "-6000,282650,26000,285350"
st "assert (tx_pdata = fcs(((8*j)+7) downto (8*j)))
report \"** Error EMAC0: data incorrect during FCS field\"   & cr
severity error;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 748,0
ps "OnEdgeStrategy"
shape (Triangle
uid 749,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,281650,10500,282650"
)
direction 0
)
outConnect (FlowConnect
uid 750,0
ps "OnEdgeStrategy"
shape (Triangle
uid 751,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,285350,10500,286350"
)
direction 1
position 1
)
)
*78 (WaitBox
uid 754,0
shape (Octagon
uid 755,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,289000,11000,291000"
)
name (TextAssociate
uid 756,0
ps "CenterOffsetStrategy"
text (Text
uid 757,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,288050,10000,288950"
st "w7"
blo "9000,288750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 758,0
ps "CenterOffsetStrategy"
text (MLText
uid 759,0
va (VaSet
font "courier,8,0"
)
xt "11250,289550,45750,291350"
st "wait until clk125m'event and clk125m = '1' and mon_tx_sample = '1';

"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 760,0
ps "OnEdgeStrategy"
shape (Triangle
uid 761,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,288500,10500,289500"
)
direction 0
)
outConnect (FlowConnect
uid 762,0
ps "OnEdgeStrategy"
shape (Triangle
uid 763,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,290500,10500,291500"
)
direction 1
position 1
)
)
*79 (EndLoop
uid 766,0
shape (Ellipse
uid 767,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,294000,13000,296000"
)
label (Text
uid 768,0
va (VaSet
font "courier,8,1"
)
xt "8000,294550,12000,295450"
st "End Loop"
ju 0
blo "10000,295250"
)
inConnect (FlowConnect
uid 769,0
ps "OnEdgeStrategy"
shape (Triangle
uid 770,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,293500,10500,294500"
)
direction 0
)
outConnect (FlowConnect
uid 771,0
ps "OnEdgeStrategy"
shape (Triangle
uid 772,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,295500,10500,296500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 773,0
ps "OnEdgeStrategy"
shape (Triangle
uid 774,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,294500,7500,295500"
)
direction 1
position 2
)
)
*80 (ActionBox
uid 779,0
shape (Rectangle
uid 780,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "8500,300050,11500,301950"
)
name (TextAssociate
uid 781,0
ps "CenterOffsetStrategy"
text (Text
uid 782,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "8500,299100,10000,300000"
st "a24"
blo "8500,299800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 783,0
ps "CenterOffsetStrategy"
text (MLText
uid 784,0
va (VaSet
font "courier,8,0"
)
xt "9000,300550,11000,301450"
st "-- j"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 785,0
ps "OnEdgeStrategy"
shape (Triangle
uid 786,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,299550,10500,300550"
)
direction 0
)
outConnect (FlowConnect
uid 787,0
ps "OnEdgeStrategy"
shape (Triangle
uid 788,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,301450,10500,302450"
)
direction 1
position 1
)
)
*81 (ActionBox
uid 791,0
shape (Rectangle
uid 792,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "3000,305050,17000,306950"
)
name (TextAssociate
uid 793,0
ps "CenterOffsetStrategy"
text (Text
uid 794,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "3000,304100,4500,305000"
st "a25"
blo "3000,304800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 795,0
ps "CenterOffsetStrategy"
text (MLText
uid 796,0
va (VaSet
font "courier,8,0"
)
xt "3500,305550,16500,306450"
st "-- move to the next frame"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 797,0
ps "OnEdgeStrategy"
shape (Triangle
uid 798,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,304550,10500,305550"
)
direction 0
)
outConnect (FlowConnect
uid 799,0
ps "OnEdgeStrategy"
shape (Triangle
uid 800,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,306450,10500,307450"
)
direction 1
position 1
)
)
*82 (DecisionBox
uid 803,0
shape (Diamond
uid 804,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,311000,15000,315000"
)
name (TextAssociate
uid 805,0
ps "EdgeToEdgeStrategy"
text (Text
uid 806,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,310050,6000,310950"
st "d4"
blo "5000,310750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 807,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 808,0
va (VaSet
font "courier,8,0"
)
xt "1450,312550,18550,313450"
st " current_frame = frame_data'high "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 809,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,315500,11000,316400"
st "T"
blo "10500,316200"
)
falseLabel (Text
uid 810,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,311600,16000,312500"
st "F"
blo "15500,312300"
)
inConnect (FlowConnect
uid 811,0
ps "OnEdgeStrategy"
shape (Triangle
uid 812,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,310500,10500,311500"
)
direction 0
)
trueConnect (FlowConnect
uid 813,0
ps "OnEdgeStrategy"
shape (Triangle
uid 814,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,314500,10500,315500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 815,0
ps "OnEdgeStrategy"
shape (Triangle
uid 816,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,312500,15500,313500"
)
direction 1
position 3
)
elsif 1
)
*83 (ActionBox
uid 819,0
shape (Rectangle
uid 820,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "8250,319050,11750,320950"
)
name (TextAssociate
uid 821,0
ps "CenterOffsetStrategy"
text (Text
uid 822,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "8250,318100,9750,319000"
st "a26"
blo "8250,318800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 823,0
ps "CenterOffsetStrategy"
text (MLText
uid 824,0
va (VaSet
font "courier,8,0"
)
xt "8750,319550,11250,320450"
st "exit;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 825,0
ps "OnEdgeStrategy"
shape (Triangle
uid 826,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,318550,10500,319550"
)
direction 0
)
outConnect (FlowConnect
uid 827,0
ps "OnEdgeStrategy"
shape (Triangle
uid 828,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,320450,10500,321450"
)
direction 1
position 1
)
)
*84 (ActionBox
uid 831,0
shape (Rectangle
uid 832,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "20500,316050,39500,317950"
)
name (TextAssociate
uid 833,0
ps "CenterOffsetStrategy"
text (Text
uid 834,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "20500,315100,22000,316000"
st "a27"
blo "20500,315800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 835,0
ps "CenterOffsetStrategy"
text (MLText
uid 836,0
va (VaSet
font "courier,8,0"
)
xt "21000,316550,39000,317450"
st "current_frame := current_frame + 1;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 837,0
ps "OnEdgeStrategy"
shape (Triangle
uid 838,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "29500,315550,30500,316550"
)
direction 0
)
outConnect (FlowConnect
uid 839,0
ps "OnEdgeStrategy"
shape (Triangle
uid 840,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "29500,317450,30500,318450"
)
direction 1
position 1
)
)
*85 (EndLoop
uid 859,0
shape (Ellipse
uid 860,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,328000,13000,330000"
)
label (Text
uid 861,0
va (VaSet
font "courier,8,1"
)
xt "8000,328550,12000,329450"
st "End Loop"
ju 0
blo "10000,329250"
)
inConnect (FlowConnect
uid 862,0
ps "OnEdgeStrategy"
shape (Triangle
uid 863,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,327500,10500,328500"
)
direction 0
)
outConnect (FlowConnect
uid 864,0
ps "OnEdgeStrategy"
shape (Triangle
uid 865,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,329500,10500,330500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 866,0
ps "OnEdgeStrategy"
shape (Triangle
uid 867,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,328500,7500,329500"
)
direction 1
position 2
)
)
*86 (ActionBox
uid 872,0
shape (Rectangle
uid 873,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "5750,333050,14250,334950"
)
name (TextAssociate
uid 874,0
ps "CenterOffsetStrategy"
text (Text
uid 875,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5750,332100,7250,333000"
st "a28"
blo "5750,332800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 876,0
ps "CenterOffsetStrategy"
text (MLText
uid 877,0
va (VaSet
font "courier,8,0"
)
xt "6250,333550,13750,334450"
st "-- four frames"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 878,0
ps "OnEdgeStrategy"
shape (Triangle
uid 879,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,332550,10500,333550"
)
direction 0
)
outConnect (FlowConnect
uid 880,0
ps "OnEdgeStrategy"
shape (Triangle
uid 881,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,334450,10500,335450"
)
direction 1
position 1
)
)
*87 (ActionBox
uid 884,0
shape (Rectangle
uid 885,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "1750,338050,18250,339950"
)
name (TextAssociate
uid 886,0
ps "CenterOffsetStrategy"
text (Text
uid 887,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "1750,337100,3250,338000"
st "a29"
blo "1750,337800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 888,0
ps "CenterOffsetStrategy"
text (MLText
uid 889,0
va (VaSet
font "courier,8,0"
)
xt "2250,338550,17750,339450"
st "monitor_finished_1g   <= true;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 890,0
ps "OnEdgeStrategy"
shape (Triangle
uid 891,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,337550,10500,338550"
)
direction 0
)
outConnect (FlowConnect
uid 892,0
ps "OnEdgeStrategy"
shape (Triangle
uid 893,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,339450,10500,340450"
)
direction 1
position 1
)
)
*88 (WaitBox
uid 896,0
shape (Octagon
uid 897,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,344000,11000,346000"
)
name (TextAssociate
uid 898,0
ps "CenterOffsetStrategy"
text (Text
uid 899,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,343050,10000,343950"
st "w8"
blo "9000,343750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 900,0
ps "CenterOffsetStrategy"
text (MLText
uid 901,0
va (VaSet
font "courier,8,0"
)
xt "11250,344550,23750,347250"
st "-- Our work here is done
 wait;

"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 902,0
ps "OnEdgeStrategy"
shape (Triangle
uid 903,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,343500,10500,344500"
)
direction 0
)
outConnect (FlowConnect
uid 904,0
ps "OnEdgeStrategy"
shape (Triangle
uid 905,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,345500,10500,346500"
)
direction 1
position 1
)
)
*89 (EndPoint
uid 908,0
shape (RoundedRectangle
uid 909,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,349000,13000,351000"
radius 400
)
label (Text
uid 910,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "9100,349500,10900,350500"
st "End"
ju 0
blo "10000,350300"
)
inConnect (FlowConnect
uid 911,0
ps "OnEdgeStrategy"
shape (Triangle
uid 912,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,348500,10500,349500"
)
direction 0
)
)
*90 (Flow
uid 134,0
shape (OrthoPolyLine
uid 135,0
va (VaSet
vasetType 3
)
xt "10000,14000,10000,17700"
pts [
"10000,14000"
"10000,17700"
]
arrow 1
)
start &31
end &33
)
*91 (Flow
uid 146,0
shape (OrthoPolyLine
uid 147,0
va (VaSet
vasetType 3
)
xt "10000,22300,10000,26000"
pts [
"10000,22300"
"10000,26000"
]
arrow 1
)
start &33
end &34
)
*92 (Flow
uid 158,0
shape (OrthoPolyLine
uid 159,0
va (VaSet
vasetType 3
)
xt "10000,28000,10000,31000"
pts [
"10000,28000"
"10000,31000"
]
arrow 1
)
start &34
end &35
)
*93 (Flow
uid 170,0
shape (OrthoPolyLine
uid 171,0
va (VaSet
vasetType 3
)
xt "10000,33000,10000,36800"
pts [
"10000,33000"
"10000,36800"
]
arrow 1
)
start &35
end &36
)
*94 (Flow
uid 185,0
shape (OrthoPolyLine
uid 186,0
va (VaSet
vasetType 3
)
xt "10000,43200,10000,47000"
pts [
"10000,43200"
"10000,47000"
]
arrow 1
)
start &36
end &37
)
*95 (Flow
uid 197,0
shape (OrthoPolyLine
uid 198,0
va (VaSet
vasetType 3
)
xt "10000,49000,10000,52050"
pts [
"10000,49000"
"10000,52050"
]
arrow 1
)
start &37
end &38
)
*96 (Flow
uid 209,0
shape (OrthoPolyLine
uid 210,0
va (VaSet
vasetType 3
)
xt "10000,53950,10000,57150"
pts [
"10000,53950"
"10000,57150"
]
arrow 1
)
start &38
end &39
)
*97 (Flow
uid 224,0
shape (OrthoPolyLine
uid 225,0
va (VaSet
vasetType 3
)
xt "10000,60850,10000,64000"
pts [
"10000,60850"
"10000,64000"
]
arrow 1
)
start &39
end &40
)
*98 (Flow
uid 236,0
shape (OrthoPolyLine
uid 237,0
va (VaSet
vasetType 3
)
xt "10000,66000,10000,70050"
pts [
"10000,66000"
"10000,70050"
]
arrow 1
)
start &40
end &41
)
*99 (Flow
uid 252,0
shape (OrthoPolyLine
uid 253,0
va (VaSet
vasetType 3
)
xt "10000,71950,10000,76000"
pts [
"10000,71950"
"10000,76000"
]
arrow 1
)
start &41
end &42
)
*100 (Flow
uid 264,0
shape (OrthoPolyLine
uid 265,0
va (VaSet
vasetType 3
)
xt "10000,80000,10000,84050"
pts [
"10000,80000"
"10000,84050"
]
arrow 1
)
start &42
end &43
)
*101 (Flow
uid 276,0
optionalChildren [
*102 (FlowJoin
uid 278,0
ps "OnFlowStrategy"
shape (Circle
uid 279,0
va (VaSet
vasetType 1
)
xt "9700,90700,10300,91300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 277,0
va (VaSet
vasetType 3
)
xt "10000,85950,10000,93000"
pts [
"10000,85950"
"10000,93000"
]
arrow 1
)
start &43
end &44
)
*103 (Flow
uid 280,0
shape (OrthoPolyLine
uid 281,0
va (VaSet
vasetType 3
)
xt "10000,78000,22000,91000"
pts [
"15000,78000"
"22000,78000"
"22000,91000"
"10000,91000"
]
arrow 1
)
start &42
end &102
)
*104 (Flow
uid 293,0
shape (OrthoPolyLine
uid 294,0
va (VaSet
vasetType 3
)
xt "-2000,65000,7000,94000"
pts [
"7000,94000"
"-2000,94000"
"-2000,65000"
"7000,65000"
]
arrow 1
)
start &44
end &40
)
*105 (Flow
uid 305,0
shape (OrthoPolyLine
uid 306,0
va (VaSet
vasetType 3
)
xt "10000,95000,10000,98150"
pts [
"10000,95000"
"10000,98150"
]
arrow 1
)
start &44
end &45
)
*106 (Flow
uid 321,0
shape (OrthoPolyLine
uid 322,0
va (VaSet
vasetType 3
)
xt "10000,101850,10000,106000"
pts [
"10000,101850"
"10000,106000"
]
arrow 1
)
start &45
end &46
)
*107 (Flow
uid 333,0
shape (OrthoPolyLine
uid 334,0
va (VaSet
vasetType 3
)
xt "10000,110000,10000,113050"
pts [
"10000,110000"
"10000,113050"
]
arrow 1
)
start &46
end &47
)
*108 (Flow
uid 345,0
optionalChildren [
*109 (FlowJoin
uid 347,0
ps "OnFlowStrategy"
shape (Circle
uid 348,0
va (VaSet
vasetType 1
)
xt "9700,120700,10300,121300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 346,0
va (VaSet
vasetType 3
)
xt "10000,114950,10000,123150"
pts [
"10000,114950"
"10000,123150"
]
arrow 1
)
start &47
end &48
)
*110 (Flow
uid 349,0
shape (OrthoPolyLine
uid 350,0
va (VaSet
vasetType 3
)
xt "10000,108000,22000,121000"
pts [
"15000,108000"
"22000,108000"
"22000,121000"
"10000,121000"
]
arrow 1
)
start &46
end &109
)
*111 (Flow
uid 376,0
shape (OrthoPolyLine
uid 377,0
va (VaSet
vasetType 3
)
xt "10000,126850,10000,130000"
pts [
"10000,126850"
"10000,130000"
]
arrow 1
)
start &48
end &49
)
*112 (Flow
uid 388,0
shape (OrthoPolyLine
uid 389,0
va (VaSet
vasetType 3
)
xt "10000,132000,10000,136000"
pts [
"10000,132000"
"10000,136000"
]
arrow 1
)
start &49
end &50
)
*113 (Flow
uid 399,0
shape (OrthoPolyLine
uid 400,0
va (VaSet
vasetType 3
)
xt "10000,138000,10000,141000"
pts [
"10000,138000"
"10000,141000"
]
arrow 1
)
start &50
end &51
)
*114 (Flow
uid 401,0
shape (OrthoPolyLine
uid 402,0
va (VaSet
vasetType 3
)
xt "-6000,131000,7000,142000"
pts [
"7000,142000"
"-6000,142000"
"-6000,131000"
"7000,131000"
]
arrow 1
)
start &51
end &49
)
*115 (Flow
uid 413,0
shape (OrthoPolyLine
uid 414,0
va (VaSet
vasetType 3
)
xt "10000,143000,10000,146150"
pts [
"10000,143000"
"10000,146150"
]
arrow 1
)
start &51
end &52
)
*116 (Flow
uid 425,0
shape (OrthoPolyLine
uid 426,0
va (VaSet
vasetType 3
)
xt "10000,149850,10000,154050"
pts [
"10000,149850"
"10000,154050"
]
arrow 1
)
start &52
end &53
)
*117 (Flow
uid 437,0
shape (OrthoPolyLine
uid 438,0
va (VaSet
vasetType 3
)
xt "10000,155950,10000,159000"
pts [
"10000,155950"
"10000,159000"
]
arrow 1
)
start &53
end &54
)
*118 (Flow
uid 449,0
shape (OrthoPolyLine
uid 450,0
va (VaSet
vasetType 3
)
xt "10000,161000,10000,164150"
pts [
"10000,161000"
"10000,164150"
]
arrow 1
)
start &54
end &55
)
*119 (Flow
uid 464,0
shape (OrthoPolyLine
uid 465,0
va (VaSet
vasetType 3
)
xt "10000,167850,10000,172000"
pts [
"10000,167850"
"10000,172000"
]
arrow 1
)
start &55
end &56
)
*120 (Flow
uid 476,0
shape (OrthoPolyLine
uid 477,0
va (VaSet
vasetType 3
)
xt "10000,174000,10000,177000"
pts [
"10000,174000"
"10000,177000"
]
arrow 1
)
start &56
end &57
)
*121 (Flow
uid 487,0
shape (OrthoPolyLine
uid 488,0
va (VaSet
vasetType 3
)
xt "10000,179000,10000,182000"
pts [
"10000,179000"
"10000,182000"
]
arrow 1
)
start &57
end &58
)
*122 (Flow
uid 489,0
shape (OrthoPolyLine
uid 490,0
va (VaSet
vasetType 3
)
xt "-10000,173000,7000,183000"
pts [
"7000,183000"
"-10000,183000"
"-10000,173000"
"7000,173000"
]
arrow 1
)
start &58
end &56
)
*123 (Flow
uid 501,0
shape (OrthoPolyLine
uid 502,0
va (VaSet
vasetType 3
)
xt "10000,184000,10000,188000"
pts [
"10000,184000"
"10000,188000"
]
arrow 1
)
start &58
end &59
)
*124 (Flow
uid 513,0
shape (OrthoPolyLine
uid 514,0
va (VaSet
vasetType 3
)
xt "10000,190000,10000,193050"
pts [
"10000,190000"
"10000,193050"
]
arrow 1
)
start &59
end &60
)
*125 (Flow
uid 528,0
shape (OrthoPolyLine
uid 529,0
va (VaSet
vasetType 3
)
xt "10000,194950,10000,198000"
pts [
"10000,194950"
"10000,198000"
]
arrow 1
)
start &60
end &61
)
*126 (Flow
uid 540,0
shape (OrthoPolyLine
uid 541,0
va (VaSet
vasetType 3
)
xt "10000,200000,10000,203700"
pts [
"10000,200000"
"10000,203700"
]
arrow 1
)
start &61
end &62
)
*127 (Flow
uid 556,0
shape (OrthoPolyLine
uid 557,0
va (VaSet
vasetType 3
)
xt "10000,208300,10000,212000"
pts [
"10000,208300"
"10000,212000"
]
arrow 1
)
start &62
end &63
)
*128 (Flow
uid 568,0
shape (OrthoPolyLine
uid 569,0
va (VaSet
vasetType 3
)
xt "10000,216000,10000,220050"
pts [
"10000,216000"
"10000,220050"
]
arrow 1
)
start &63
end &64
)
*129 (Flow
uid 580,0
shape (OrthoPolyLine
uid 581,0
va (VaSet
vasetType 3
)
xt "10000,221950,10000,225250"
pts [
"10000,221950"
"10000,225250"
]
arrow 1
)
start &64
end &65
)
*130 (Flow
uid 596,0
shape (OrthoPolyLine
uid 597,0
va (VaSet
vasetType 3
)
xt "15000,214000,61000,217000"
pts [
"15000,214000"
"61000,214000"
"61000,217000"
]
arrow 1
)
start &63
end &66
)
*131 (Flow
uid 608,0
shape (OrthoPolyLine
uid 609,0
va (VaSet
vasetType 3
)
xt "61000,221000,61000,225050"
pts [
"61000,221000"
"61000,225050"
]
arrow 1
)
start &66
end &67
)
*132 (Flow
uid 620,0
shape (OrthoPolyLine
uid 621,0
va (VaSet
vasetType 3
)
xt "61000,226950,61000,230800"
pts [
"61000,226950"
"61000,230800"
]
arrow 1
)
start &67
end &68
)
*133 (Flow
uid 632,0
shape (OrthoPolyLine
uid 633,0
va (VaSet
vasetType 3
)
xt "66000,219000,112000,222050"
pts [
"66000,219000"
"112000,219000"
"112000,222050"
]
arrow 1
)
start &66
end &69
)
*134 (Flow
uid 644,0
shape (OrthoPolyLine
uid 645,0
va (VaSet
vasetType 3
)
xt "112000,223950,112000,226700"
pts [
"112000,223950"
"112000,226700"
]
arrow 1
)
start &69
end &70
)
*135 (Flow
uid 656,0
optionalChildren [
*136 (FlowJoin
uid 658,0
ps "OnFlowStrategy"
shape (Circle
uid 659,0
va (VaSet
vasetType 1
)
xt "9700,246700,10300,247300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 657,0
va (VaSet
vasetType 3
)
xt "10000,230750,10000,248600"
pts [
"10000,230750"
"10000,248600"
]
arrow 1
)
start &65
end &71
)
*137 (Flow
uid 660,0
optionalChildren [
*138 (FlowJoin
uid 662,0
ps "OnFlowStrategy"
shape (Circle
uid 663,0
va (VaSet
vasetType 1
)
xt "60700,246700,61300,247300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 661,0
va (VaSet
vasetType 3
)
xt "10000,237200,61000,247000"
pts [
"61000,237200"
"61000,247000"
"10000,247000"
]
arrow 1
)
start &68
end &136
)
*139 (Flow
uid 664,0
shape (OrthoPolyLine
uid 665,0
va (VaSet
vasetType 3
)
xt "61000,231300,112000,247000"
pts [
"112000,231300"
"112000,247000"
"61000,247000"
]
arrow 1
)
start &70
end &138
)
*140 (Flow
uid 688,0
shape (OrthoPolyLine
uid 689,0
va (VaSet
vasetType 3
)
xt "10000,251400,10000,255000"
pts [
"10000,251400"
"10000,255000"
]
arrow 1
)
start &71
end &72
)
*141 (Flow
uid 699,0
shape (OrthoPolyLine
uid 700,0
va (VaSet
vasetType 3
)
xt "10000,257000,10000,260000"
pts [
"10000,257000"
"10000,260000"
]
arrow 1
)
start &72
end &73
)
*142 (Flow
uid 701,0
shape (OrthoPolyLine
uid 702,0
va (VaSet
vasetType 3
)
xt "-17000,199000,7000,261000"
pts [
"7000,261000"
"-17000,261000"
"-17000,199000"
"7000,199000"
]
arrow 1
)
start &73
end &61
)
*143 (Flow
uid 713,0
shape (OrthoPolyLine
uid 714,0
va (VaSet
vasetType 3
)
xt "10000,262000,10000,265050"
pts [
"10000,262000"
"10000,265050"
]
arrow 1
)
start &73
end &74
)
*144 (Flow
uid 725,0
shape (OrthoPolyLine
uid 726,0
va (VaSet
vasetType 3
)
xt "10000,266950,10000,270600"
pts [
"10000,266950"
"10000,270600"
]
arrow 1
)
start &74
end &75
)
*145 (Flow
uid 740,0
shape (OrthoPolyLine
uid 741,0
va (VaSet
vasetType 3
)
xt "10000,273400,10000,277000"
pts [
"10000,273400"
"10000,277000"
]
arrow 1
)
start &75
end &76
)
*146 (Flow
uid 752,0
shape (OrthoPolyLine
uid 753,0
va (VaSet
vasetType 3
)
xt "10000,279000,10000,282150"
pts [
"10000,279000"
"10000,282150"
]
arrow 1
)
start &76
end &77
)
*147 (Flow
uid 764,0
shape (OrthoPolyLine
uid 765,0
va (VaSet
vasetType 3
)
xt "10000,285850,10000,289000"
pts [
"10000,285850"
"10000,289000"
]
arrow 1
)
start &77
end &78
)
*148 (Flow
uid 775,0
shape (OrthoPolyLine
uid 776,0
va (VaSet
vasetType 3
)
xt "10000,291000,10000,294000"
pts [
"10000,291000"
"10000,294000"
]
arrow 1
)
start &78
end &79
)
*149 (Flow
uid 777,0
shape (OrthoPolyLine
uid 778,0
va (VaSet
vasetType 3
)
xt "-10000,278000,7000,295000"
pts [
"7000,295000"
"-10000,295000"
"-10000,278000"
"7000,278000"
]
arrow 1
)
start &79
end &76
)
*150 (Flow
uid 789,0
shape (OrthoPolyLine
uid 790,0
va (VaSet
vasetType 3
)
xt "10000,296000,10000,300050"
pts [
"10000,296000"
"10000,300050"
]
arrow 1
)
start &79
end &80
)
*151 (Flow
uid 801,0
shape (OrthoPolyLine
uid 802,0
va (VaSet
vasetType 3
)
xt "10000,301950,10000,305050"
pts [
"10000,301950"
"10000,305050"
]
arrow 1
)
start &80
end &81
)
*152 (Flow
uid 817,0
shape (OrthoPolyLine
uid 818,0
va (VaSet
vasetType 3
)
xt "10000,306950,10000,311000"
pts [
"10000,306950"
"10000,311000"
]
arrow 1
)
start &81
end &82
)
*153 (Flow
uid 829,0
shape (OrthoPolyLine
uid 830,0
va (VaSet
vasetType 3
)
xt "10000,315000,10000,319050"
pts [
"10000,315000"
"10000,319050"
]
arrow 1
)
start &82
end &83
)
*154 (Flow
uid 841,0
shape (OrthoPolyLine
uid 842,0
va (VaSet
vasetType 3
)
xt "15000,313000,30000,316050"
pts [
"15000,313000"
"30000,313000"
"30000,316050"
]
arrow 1
)
start &82
end &84
)
*155 (Flow
uid 853,0
optionalChildren [
*156 (FlowJoin
uid 855,0
ps "OnFlowStrategy"
shape (Circle
uid 856,0
va (VaSet
vasetType 1
)
xt "9700,325700,10300,326300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 854,0
va (VaSet
vasetType 3
)
xt "10000,320950,10000,328000"
pts [
"10000,320950"
"10000,328000"
]
arrow 1
)
start &83
end &85
)
*157 (Flow
uid 857,0
shape (OrthoPolyLine
uid 858,0
va (VaSet
vasetType 3
)
xt "10000,317950,30000,326000"
pts [
"30000,317950"
"30000,326000"
"10000,326000"
]
arrow 1
)
start &84
end &156
)
*158 (Flow
uid 870,0
shape (OrthoPolyLine
uid 871,0
va (VaSet
vasetType 3
)
xt "-19000,48000,7000,329000"
pts [
"7000,329000"
"-19000,329000"
"-19000,48000"
"7000,48000"
]
arrow 1
)
start &85
end &37
)
*159 (Flow
uid 882,0
shape (OrthoPolyLine
uid 883,0
va (VaSet
vasetType 3
)
xt "10000,330000,10000,333050"
pts [
"10000,330000"
"10000,333050"
]
arrow 1
)
start &85
end &86
)
*160 (Flow
uid 894,0
shape (OrthoPolyLine
uid 895,0
va (VaSet
vasetType 3
)
xt "10000,334950,10000,338050"
pts [
"10000,334950"
"10000,338050"
]
arrow 1
)
start &86
end &87
)
*161 (Flow
uid 906,0
shape (OrthoPolyLine
uid 907,0
va (VaSet
vasetType 3
)
xt "10000,339950,10000,344000"
pts [
"10000,339950"
"10000,344000"
]
arrow 1
)
start &87
end &88
)
*162 (Flow
uid 913,0
shape (OrthoPolyLine
uid 914,0
va (VaSet
vasetType 3
)
xt "10000,346000,10000,349000"
pts [
"10000,346000"
"10000,349000"
]
arrow 1
)
start &88
end &89
)
]
bg "65535,65535,65535"
grid (Grid
origin "0,0"
isVisible 0
isActive 1
xSpacing 1000
xySpacing 1000
xShown 1
yShown 1
color "26368,26368,26368"
)
packageList *163 (PackageList
uid 104,0
stg "VerticalLayoutStrategy"
textVec [
*164 (Text
uid 105,0
va (VaSet
font "courier,8,1"
)
xt "-83500,4050,-77000,4950"
st "Package List"
blo "-83500,4750"
)
*165 (MLText
uid 106,0
va (VaSet
font "courier,8,0"
)
xt "-83500,4950,-67000,8550"
tm "FcPackageListTextMgr"
)
]
)
compDirBlock (MlTextGroup
uid 107,0
stg "VerticalLayoutStrategy"
textVec [
*166 (Text
uid 108,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-68500,4500,-58500,5400"
st "Compiler Directives"
blo "-68500,5200"
)
*167 (Text
uid 109,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-68500,5400,-57000,6300"
st "Pre-module directives:"
blo "-68500,6100"
)
*168 (MLText
uid 110,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-68500,6300,-58400,8100"
st "`resetall
`timescale 1ns/10ps"
tm "FcCompilerDirectivesTextMgr"
)
*169 (Text
uid 111,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-68500,8100,-56500,9000"
st "Post-module directives:"
blo "-68500,8800"
)
*170 (MLText
uid 112,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-68500,4500,-68500,4500"
tm "FcCompilerDirectivesTextMgr"
)
*171 (Text
uid 113,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-68500,9000,-57000,9900"
st "End-module directives:"
blo "-68500,9700"
)
*172 (MLText
uid 114,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-68500,9900,-68500,9900"
tm "FcCompilerDirectivesTextMgr"
)
]
associable 1
)
windowSize "0,0,1015,690"
viewArea "0,0,0,0"
cachedDiagramExtent "0,0,0,0"
pageBreakOrigin "0,0"
isTopLevel 1
defaultCommentText (CommentText
shape (Rectangle
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "0,0,15000,5000"
)
text (MLText
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "200,200,2200,1100"
st "
Text
"
tm "CommentText"
wrapOption 3
visibleHeight 4600
visibleWidth 14600
)
)
defaultPanel (Panel
shape (RectFrame
va (VaSet
vasetType 1
fg "65535,65535,65535"
lineColor "32768,0,0"
lineWidth 3
)
xt "0,0,20000,20000"
)
title (TextAssociate
ps "TopLeftStrategy"
text (Text
va (VaSet
font "courier,8,1"
)
xt "1000,1000,4000,1900"
st "Panel0"
blo "1000,1700"
tm "PanelText"
)
)
)
archDeclarativeBlock *173 (BiTextGroup
uid 92,0
stg "VerticalLayoutStrategy"
first (Text
uid 93,0
va (VaSet
font "courier,8,1"
)
xt "-88500,10750,-75500,11650"
st "Architecture Declarations"
blo "-88500,11450"
)
second (MLText
uid 94,0
va (VaSet
font "courier,8,0"
)
xt "-88500,11650,-20500,819850"
st "

  
  ----------------------------------------------------------------------
  -- types to support frame data
  ----------------------------------------------------------------------
  -- Tx Data and Data_valid record
  type data_typ is record
      data : bit_vector(7 downto 0);  -- data
      valid : bit;                    -- data_valid
      error : bit;                    -- data_error
  end record;
  type frame_of_data_typ is array (natural range <>) of data_typ;

  -- Tx Data, Data_valid and underrun record
  type frame_typ is record
      columns   : frame_of_data_typ(0 to 65);-- data field
      bad_frame : boolean;  -- does this frame contain an error?
  end record;
  type frame_typ_ary is array (natural range <>) of frame_typ;

  ----------------------------------------------------------------------
  -- Stimulus - Frame data 
  ----------------------------------------------------------------------
  -- The following constant holds the stimulus for the testbench. It is 
  -- an ordered array of frames, with frame 0 the first to be injected 
  -- into the core receiver PHY interface by the testbench. 
  ----------------------------------------------------------------------
  constant frame_data : frame_typ_ary := (
   -------------
   -- Frame 0
   -------------
    0          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'),   -- 46th Byte of Data
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 1
   -------------
    1          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"80\", VALID => '1', ERROR => '0'), -- Length/Type = Type = 8000
       13      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), 
       60      => ( DATA => X\"2F\", VALID => '1', ERROR => '0'), -- 47th Data byte
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 2
   -------------
    2          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '1'), -- assert error here
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

       -- Error this frame
      bad_frame => true),


   -------------
   -- Frame 3
   -------------
   3          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"03\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 03
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), -- Therefore padding is required
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'), 
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Padding starts here
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false));



  ----------------------------------------------------------------------
  -- CRC engine 
  ----------------------------------------------------------------------
  function calc_crc (data : in std_logic_vector;
                     fcs  : in std_logic_vector)
  return std_logic_vector is   

     variable crc          : std_logic_vector(31 downto 0);
     variable crc_feedback : std_logic;     
  begin

    crc := not fcs;

    for I in 0 to 7 loop
      crc_feedback      := crc(0) xor data(I);

      crc(4 downto 0)   := crc(5 downto 1);
      crc(5)            := crc(6)  xor crc_feedback;
      crc(7 downto 6)   := crc(8 downto 7);
      crc(8)            := crc(9)  xor crc_feedback;
      crc(9)            := crc(10) xor crc_feedback;
      crc(14 downto 10) := crc(15 downto 11);
      crc(15)           := crc(16) xor crc_feedback;
      crc(18 downto 16) := crc(19 downto 17);
      crc(19)           := crc(20) xor crc_feedback;
      crc(20)           := crc(21) xor crc_feedback;
      crc(21)           := crc(22) xor crc_feedback;
      crc(22)           := crc(23);
      crc(23)           := crc(24) xor crc_feedback;
      crc(24)           := crc(25) xor crc_feedback;
      crc(25)           := crc(26);
      crc(26)           := crc(27) xor crc_feedback;
      crc(27)           := crc(28) xor crc_feedback;
      crc(28)           := crc(29);
      crc(29)           := crc(30) xor crc_feedback;
      crc(30)           := crc(31) xor crc_feedback;
      crc(31)           :=             crc_feedback;
    end loop; 
      
    -- return the CRC result                                  
    return not crc;

  end calc_crc;



  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B decoding
  ----------------------------------------------------------------------

  -- Decode the 8B10B code. No disparity verification is performed, just
  -- a simple table lookup.
  procedure decode_8b10b (
    constant d10  : in  std_logic_vector(0 to 9);
    variable q8   : out std_logic_vector(7 downto 0);
    variable is_k : out boolean) is
    variable k28 : boolean;
    variable d10_rev : std_logic_vector(9 downto 0);
  begin
    -- reverse the 10B codeword
    for i in 0 to 9 loop
      d10_rev(i) := d10(i);
    end loop;  -- i
    -- do the 6B5B decode
    case d10_rev(5 downto 0) is
      when \"000110\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"111001\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"010001\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"101110\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"010010\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"101101\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"100011\" =>
        q8(4 downto 0) := \"00011\";   --D.3
      when \"010100\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"101011\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"100101\" =>
        q8(4 downto 0) := \"00101\";   --D.5
      when \"100110\" =>
        q8(4 downto 0) := \"00110\";   --D.6
      when \"000111\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"111000\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"011000\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"100111\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"101001\" =>
        q8(4 downto 0) := \"01001\";   --D.9
      when \"101010\" =>
        q8(4 downto 0) := \"01010\";   --D.10
      when \"001011\" =>
        q8(4 downto 0) := \"01011\";   --D.11
      when \"101100\" =>
        q8(4 downto 0) := \"01100\";   --D.12
      when \"001101\" =>
        q8(4 downto 0) := \"01101\";   --D.13
      when \"001110\" =>
        q8(4 downto 0) := \"01110\";   --D.14
      when \"000101\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"111010\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"110110\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"001001\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"110001\" =>
        q8(4 downto 0) := \"10001\";   --D.17
      when \"110010\" =>
        q8(4 downto 0) := \"10010\";   --D.18
      when \"010011\" =>
        q8(4 downto 0) := \"10011\";   --D.19
      when \"110100\" =>
        q8(4 downto 0) := \"10100\";   --D.20
      when \"010101\" =>
        q8(4 downto 0) := \"10101\";   --D.21
      when \"010110\" =>
        q8(4 downto 0) := \"10110\";   --D.22
      when \"010111\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"101000\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"001100\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"110011\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"011001\" =>
        q8(4 downto 0) := \"11001\";   --D.25
      when \"011010\" =>
        q8(4 downto 0) := \"11010\";   --D.26
      when \"011011\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"100100\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"011100\" =>
        q8(4 downto 0) := \"11100\";   --D.28
      when \"111100\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"000011\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"011101\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"100010\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"011110\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"100001\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"110101\" =>
        q8(4 downto 0) := \"11111\";   --D.31
      when \"001010\" =>
        q8(4 downto 0) := \"11111\";   --D.31
        
      when others   =>
        q8(4 downto 0) := \"11110\";  --CODE VIOLATION - return /E/
    end case;

    k28 := not((d10(2) OR d10(3) OR d10(4) OR d10(5)
                OR NOT(d10(8) XOR d10(9)))) = '1';
    
    -- do the 4B3B decode
    case d10_rev(9 downto 6) is
      when \"0010\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1101\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1001\" =>
        if not k28 then
          q8(7 downto 5) := \"001\";     --D/K.x.1
        else
          q8(7 downto 5) := \"110\";     --K28.6
        end if;
      when \"0110\" =>
        if k28 then
          q8(7 downto 5) := \"001\";     --K.28.1
        else
          q8(7 downto 5) := \"110\";     --D/K.x.6
        end if;
      when \"1010\" =>
        if not k28 then
          q8(7 downto 5) := \"010\";     --D/K.x.2
        else
          q8(7 downto 5) := \"101\";     --K28.5
        end if;
      when \"0101\" =>
        if k28 then
          q8(7 downto 5) := \"010\";     --K28.2
        else
          q8(7 downto 5) := \"101\";     --D/K.x.5
        end if;
      when \"0011\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"1100\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"0100\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"1011\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"0111\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1000\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1110\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7
      when \"0001\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7

      when others =>
        q8(7 downto 5) := \"111\";   --CODE VIOLATION - return /E/
    end case;

    is_k := ((d10(2) and d10(3) and d10(4) and d10(5))
            or not (d10(2) or d10(3) or d10(4) or d10(5))
            or ((d10(4) xor d10(5))
              and ((d10(5) and d10(7) and d10(8) and d10(9))
                or not(d10(5) or d10(7) or d10(8) or d10(9))))) = '1' ;
  end decode_8b10b;


  
  ----------------------------------------------------------------------
  -- Procedure to perform comma detection
  ----------------------------------------------------------------------

  function is_comma (
    constant codegroup : in std_logic_vector(0 to 9))
    return boolean is
  begin  -- is_comma
    case codegroup(0 to 6) is
      when \"0011111\" =>
        return true;
      when \"1100000\" =>
        return true;
      when others =>
        return false;
    end case;
  end is_comma;


  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B encoding
  ----------------------------------------------------------------------

  procedure encode_8b10b (
    constant d8                : in  std_logic_vector(7 downto 0);
    constant is_k              : in  boolean;
    variable q10               : out std_logic_vector(0 to 9);
    constant disparity_pos_in  : in  boolean;
    variable disparity_pos_out : out boolean) is
    variable b6                       : std_logic_vector(5 downto 0);
    variable b4                       : std_logic_vector(3 downto 0);
    variable k28, pdes6, a7, l13, l31 : boolean;
    variable a, b, c, d, e            : boolean;
  begin  -- encode_8b10b
    -- precalculate some common terms
    a := d8(0) = '1';
    b := d8(1) = '1';
    c := d8(2) = '1';
    d := d8(3) = '1';
    e := d8(4) = '1';

    k28 := is_k and d8(4 downto 0) = \"11100\";
    l13 := (((a xor b) and not (c or d))
            or ((c xor d) and not(a or b)));

    l31 := (((a xor b) and (c and d))
             or
             ((c xor d) and (a and b)));

    a7 := is_k or ((l31 and d and not e and disparity_pos_in)
                   or (l13 and not d and e and not disparity_pos_in));

    -- Do the 5B/6B conversion (calculate the 6b symbol)
    if k28 then                         --K.28
      if not disparity_pos_in then
        b6 := \"111100\";
      else
        b6 := \"000011\";
      end if;
    else
      case d8(4 downto 0) is
        when \"00000\" =>                 --D.0
          if disparity_pos_in then
            b6 := \"000110\";
          else
            b6 := \"111001\";
          end if;
        when \"00001\" =>                 --D.1
          if disparity_pos_in then
            b6 := \"010001\";
          else
            b6 := \"101110\";
          end if;
        when \"00010\" =>                 --D.2
          if disparity_pos_in then
            b6 := \"010010\";
          else
            b6 := \"101101\";
          end if;
        when \"00011\" =>
          b6 := \"100011\";               --D.3
        when \"00100\" =>                 --D.4
          if disparity_pos_in then
            b6 := \"010100\";
          else
            b6 := \"101011\";
          end if;
        when \"00101\" =>
          b6 := \"100101\";               --D.5
        when \"00110\" =>
          b6 := \"100110\";               --D.6
        when \"00111\" =>                 --D.7   
          if not disparity_pos_in then
            b6 := \"000111\";
          else
            b6 := \"111000\";
          end if;
        when \"01000\" =>                 --D.8
          if disparity_pos_in then
            b6 := \"011000\";
          else
            b6 := \"100111\";
          end if;
        when \"01001\" =>
          b6 := \"101001\";               --D.9
        when \"01010\" =>
          b6 := \"101010\";               --D.10
        when \"01011\" =>
          b6 := \"001011\";               --D.11
        when \"01100\" =>
          b6 := \"101100\";               --D.12
        when \"01101\" =>
          b6 := \"001101\";               --D.13
        when \"01110\" =>
          b6 := \"001110\";               --D.14
        when \"01111\" =>                 --D.15
          if disparity_pos_in then
            b6 := \"000101\";
          else
            b6 := \"111010\";
          end if;
        when \"10000\" =>                 --D.16
          if not disparity_pos_in then
            b6 := \"110110\";
          else
            b6 := \"001001\";
          end if;
        when \"10001\" =>
          b6 := \"110001\";               --D.17
        when \"10010\" =>
          b6 := \"110010\";               --D.18
        when \"10011\" =>
          b6 := \"010011\";               --D.19
        when \"10100\" =>
          b6 := \"110100\";               --D.20
        when \"10101\" =>
          b6 := \"010101\";               --D.21
        when \"10110\" =>
          b6 := \"010110\";               --D.22
        when \"10111\" =>                 --D/K.23
          if not disparity_pos_in then
            b6 := \"010111\";
          else
            b6 := \"101000\";
          end if;
        when \"11000\" =>                 --D.24
          if disparity_pos_in then
            b6 := \"001100\";
          else
            b6 := \"110011\";
          end if;
        when \"11001\" =>
          b6 := \"011001\";               --D.25
        when \"11010\" =>
          b6 := \"011010\";               --D.26
        when \"11011\" =>                 --D/K.27
          if not disparity_pos_in then
            b6 := \"011011\";
          else
            b6 := \"100100\";
          end if;
        when \"11100\" =>
          b6 := \"011100\";               --D.28
        when \"11101\" =>                 --D/K.29
          if not disparity_pos_in then
            b6 := \"011101\";
          else
            b6 := \"100010\";
          end if;
        when \"11110\" =>                 --D/K.30
          if not disparity_pos_in then
            b6 := \"011110\";
          else
            b6 := \"100001\";
          end if;
        when \"11111\" =>                 --D.31
          if not disparity_pos_in then
            b6 := \"110101\";
          else
            b6 := \"001010\";
          end if;
        when others =>
          b6 := \"XXXXXX\";
      end case;
    end if;

    -- reverse the bits
    for i in 0 to 5 loop
      q10(i) := b6(i);
    end loop;  -- i

    -- calculate the running disparity after the 5B6B block encode
    if k28 then
      pdes6 := not disparity_pos_in;
    else
      case d8(4 downto 0) is
        when \"00000\" => pdes6 := not disparity_pos_in;
        when \"00001\" => pdes6 := not disparity_pos_in;
        when \"00010\" => pdes6 := not disparity_pos_in;
        when \"00011\" => pdes6 := disparity_pos_in;
        when \"00100\" => pdes6 := not disparity_pos_in;
        when \"00101\" => pdes6 := disparity_pos_in;
        when \"00110\" => pdes6 := disparity_pos_in;
        when \"00111\" => pdes6 := disparity_pos_in;

        when \"01000\" => pdes6 := not disparity_pos_in;
        when \"01001\" => pdes6 := disparity_pos_in;
        when \"01010\" => pdes6 := disparity_pos_in;
        when \"01011\" => pdes6 := disparity_pos_in;
        when \"01100\" => pdes6 := disparity_pos_in;
        when \"01101\" => pdes6 := disparity_pos_in;
        when \"01110\" => pdes6 := disparity_pos_in;
        when \"01111\" => pdes6 := not disparity_pos_in;

        when \"10000\" => pdes6 := not disparity_pos_in;
        when \"10001\" => pdes6 := disparity_pos_in;
        when \"10010\" => pdes6 := disparity_pos_in;
        when \"10011\" => pdes6 := disparity_pos_in;
        when \"10100\" => pdes6 := disparity_pos_in;
        when \"10101\" => pdes6 := disparity_pos_in;
        when \"10110\" => pdes6 := disparity_pos_in;
        when \"10111\" => pdes6 := not disparity_pos_in;

        when \"11000\" => pdes6 := not disparity_pos_in;
        when \"11001\" => pdes6 := disparity_pos_in;
        when \"11010\" => pdes6 := disparity_pos_in;
        when \"11011\" => pdes6 := not disparity_pos_in;
        when \"11100\" => pdes6 := disparity_pos_in;
        when \"11101\" => pdes6 := not disparity_pos_in;
        when \"11110\" => pdes6 := not disparity_pos_in;
        when \"11111\" => pdes6 := not disparity_pos_in;
        when others  => pdes6 := disparity_pos_in;
      end case;
    end if;

    case d8(7 downto 5) is
      when \"000\" =>                     --D/K.x.0
        if pdes6 then
          b4 := \"0010\";
        else
          b4 := \"1101\";
        end if;
      when \"001\" =>                     --D/K.x.1
        if k28 and not pdes6 then
          b4 := \"0110\";
        else
          b4 := \"1001\";
        end if;
      when \"010\" =>                     --D/K.x.2
        if k28 and not pdes6 then
          b4 := \"0101\";
        else
          b4 := \"1010\";
        end if;
      when \"011\" =>                     --D/K.x.3
        if not pdes6 then
          b4 := \"0011\";
        else
          b4 := \"1100\";
        end if;
      when \"100\" =>                     --D/K.x.4
        if pdes6 then
          b4 := \"0100\";
        else
          b4 := \"1011\";
        end if;
      when \"101\" =>                     --D/K.x.5
        if k28 and not pdes6 then
          b4 := \"1010\";
        else
          b4 := \"0101\";
        end if;
      when \"110\" =>                     --D/K.x.6
        if k28 and not pdes6 then
          b4 := \"1001\";
        else
          b4 := \"0110\";
        end if;
      when \"111\" =>                     --D.x.P7
        if not a7 then
          if not pdes6 then
            b4 := \"0111\";
          else
            b4 := \"1000\";
          end if;
        else                            --D/K.y.A7
          if not pdes6 then
            b4 := \"1110\";
          else
            b4 := \"0001\";
          end if;
        end if;
      when others =>
        b4 := \"XXXX\";
    end case;

    -- Reverse the bits
    for i in 0 to 3 loop
      q10(i+6) := b4(i);
    end loop;  -- i

    -- Calculate the running disparity after the 4B group
    case d8(7 downto 5) is
      when \"000\"  =>
        disparity_pos_out := not pdes6;
      when \"001\"  =>
        disparity_pos_out := pdes6;
      when \"010\"  =>
        disparity_pos_out := pdes6;
      when \"011\"  =>
        disparity_pos_out := pdes6;
      when \"100\"  =>
        disparity_pos_out := not pdes6;
      when \"101\"  =>
        disparity_pos_out := pdes6;
      when \"110\"  =>
        disparity_pos_out := pdes6;
      when \"111\"  =>
        disparity_pos_out := not pdes6;
      when others =>
        disparity_pos_out := pdes6;
    end case;
    
  end encode_8b10b;



  ----------------------------------------------------------------------
  -- testbench signals and constants
  ----------------------------------------------------------------------

  -- Unit Interval for Gigabit Ethernet
  constant UI  : time := 800 ps;

  -- testbench clocks and sampling
  signal bitclock             : std_logic;   -- clock running at RocketIO serial frequency
  signal stim_rx_sample       : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 
  signal mon_tx_sample        : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 

  -- signals for the Tx monitor following 8B10B decode
  signal tx_pdata       : std_logic_vector(7 downto 0);  
  signal tx_is_k        : std_logic;

  -- signals for the Rx stimulus prior to 8B10B encode
  signal rx_pdata       : std_logic_vector(7 downto 0) := \"10111100\";
  signal rx_is_k        : boolean := true;
  signal rx_even        : std_logic := '1'; -- Keep track of the even/odd position
  signal rx_rundisp_pos : boolean := false; -- Indicates +ve running disparity

  -- testbench control signals
  signal current_speed       : string(1 to 6) := \"1gig  \";


  
"
tm "FcArchDeclTextMgr"
)
associable 1
)
archConcurrentStatementBlock *174 (BiTextGroup
uid 95,0
stg "VerticalLayoutStrategy"
first (Text
uid 96,0
va (VaSet
font "courier,8,1"
)
xt "-88500,823850,-77500,824750"
st "Concurrent Statements"
blo "-88500,824550"
)
second (MLText
uid 97,0
va (VaSet
font "courier,8,0"
)
xt "-88500,824750,-53000,837350"
st "
----------------------------------------------------------------------
-- Simulus processes
--------------------
-- Send four frames through the MAC and Design Example
--      -- frame 0 = minimum length frame
--      -- frame 1 = type frame
--      -- frame 2 = errored frame
--      -- frame 3 = padded frame
----------------------------------------------------------------------
-- sample on every clock
stim_rx_sample <= '1'; 
-- sample on every clock
mon_tx_sample <= '1';
"
tm "FcArchConcStmtTextMgr"
)
associable 1
)
processDeclarativeBlock *175 (BiTextGroup
uid 98,0
stg "VerticalLayoutStrategy"
first (Text
uid 99,0
va (VaSet
font "courier,8,1"
)
xt "-88500,847150,-78000,848050"
st "Process Declarations"
blo "-88500,847850"
)
second (MLText
uid 100,0
va (VaSet
font "courier,8,0"
)
xt "-88500,848050,-49000,853450"
st "
    variable f                  : frame_typ;       -- temporary frame variable
    variable current_col        : natural   := 0;  -- Column counter
    variable current_frame      : natural   := 0;
 variable fcs          : std_logic_vector(31 downto 0);    

"
tm "FcProcDeclTextMgr"
)
associable 1
)
sensitivityListBlock *176 (BiTextGroup
uid 101,0
stg "VerticalLayoutStrategy"
first (Text
uid 102,0
va (VaSet
font "courier,8,1"
)
xt "-88500,841350,-80000,842250"
st "Sensitivity List"
blo "-88500,842050"
)
second (MLText
uid 103,0
va (VaSet
font "courier,8,0"
)
xt "-88500,842250,-81500,843150"
tm "FcSensListTextMgr"
)
)
)
genChar (FcGenChar
uid 115,0
machineMode 1
resetActions ""
resetMode 1
resetName ""
resetCondition ""
vlogResetSensitivity ""
resetPolarity 0
clockPolarity 0
clockSigName ""
clockCondition ""
verilogProcessStatementType 0
verilogBlockType 0
instrumentForAnimation 0
insertSetResetPragma 0
setresetPragma 0
)
name "p_monitor"
)
*177 (ConcurrentFC
uid 915,0
topDiagram (FlowDiagram
LanguageMgr "None"
uid 916,0
optionalChildren [
*178 (StartPoint
uid 941,0
optionalChildren [
*179 (CommentText
uid 946,0
ps "EdgeToEdgeStrategy"
shape (Rectangle
uid 947,0
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "13000,13000,28000,17000"
)
text (MLText
uid 948,0
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "13200,13200,28200,16800"
st "



   Rx stimulus process. This process will create frames of data to be                    
   pushed into the receiver side of the Gigabit Transceiver.
  
"
tm "CommentText"
wrapOption 3
visibleHeight 4000
visibleWidth 15000
)
included 1
)
]
shape (RoundedRectangle
uid 942,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,12000,13000,14000"
radius 400
)
label (Text
uid 943,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "8500,12500,11500,13500"
st "Start"
ju 0
blo "10000,13300"
)
outConnect (FlowConnect
uid 944,0
ps "OnEdgeStrategy"
shape (Triangle
uid 945,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,13500,10500,14500"
)
direction 1
position 1
)
)
*180 (WaitBox
uid 949,0
shape (Octagon
uid 950,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,18000,11000,20000"
)
name (TextAssociate
uid 951,0
ps "CenterOffsetStrategy"
text (Text
uid 952,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,17050,10000,17950"
st "w0"
blo "9000,17750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 953,0
ps "CenterOffsetStrategy"
text (MLText
uid 954,0
va (VaSet
font "courier,8,0"
)
xt "11250,18550,31250,20350"
st "-- Wait for the testbench to initialise
wait until configuration_busy;
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 955,0
ps "OnEdgeStrategy"
shape (Triangle
uid 956,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,17500,10500,18500"
)
direction 0
)
outConnect (FlowConnect
uid 957,0
ps "OnEdgeStrategy"
shape (Triangle
uid 958,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,19500,10500,20500"
)
direction 1
position 1
)
)
*181 (WaitBox
uid 961,0
shape (Octagon
uid 962,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,23000,11000,25000"
)
name (TextAssociate
uid 963,0
ps "CenterOffsetStrategy"
text (Text
uid 964,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,22050,10000,22950"
st "w1"
blo "9000,22750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 965,0
ps "CenterOffsetStrategy"
text (MLText
uid 966,0
va (VaSet
font "courier,8,0"
)
xt "11250,23550,41750,25350"
st "-- Initialisation sequence: always start I2 in even position
wait until rx_even = '1';
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 967,0
ps "OnEdgeStrategy"
shape (Triangle
uid 968,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,22500,10500,23500"
)
direction 0
)
outConnect (FlowConnect
uid 969,0
ps "OnEdgeStrategy"
shape (Triangle
uid 970,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,24500,10500,25500"
)
direction 1
position 1
)
)
*182 (ActionBox
uid 973,0
shape (Rectangle
uid 974,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "2750,29050,17250,30950"
)
name (TextAssociate
uid 975,0
ps "CenterOffsetStrategy"
text (Text
uid 976,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "2750,28100,3750,29000"
st "a0"
blo "2750,28800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 977,0
ps "CenterOffsetStrategy"
text (MLText
uid 978,0
va (VaSet
font "courier,8,0"
)
xt "3250,29550,16750,30450"
st "current_speed <= \"1gig  \";"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 979,0
ps "OnEdgeStrategy"
shape (Triangle
uid 980,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,28550,10500,29550"
)
direction 0
)
outConnect (FlowConnect
uid 981,0
ps "OnEdgeStrategy"
shape (Triangle
uid 982,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,30450,10500,31450"
)
direction 1
position 1
)
)
*183 (ActionBox
uid 985,0
shape (Rectangle
uid 986,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-3500,34050,23500,35950"
)
name (TextAssociate
uid 987,0
ps "CenterOffsetStrategy"
text (Text
uid 988,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-3500,33100,-2500,34000"
st "a1"
blo "-3500,33800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 989,0
ps "CenterOffsetStrategy"
text (MLText
uid 990,0
va (VaSet
font "courier,8,0"
)
xt "-3000,34550,23000,35450"
st "-- Wait for the configuration to initialise the MAC"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 991,0
ps "OnEdgeStrategy"
shape (Triangle
uid 992,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,33550,10500,34550"
)
direction 0
)
outConnect (FlowConnect
uid 993,0
ps "OnEdgeStrategy"
shape (Triangle
uid 994,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,35450,10500,36450"
)
direction 1
position 1
)
)
*184 (StartLoop
uid 997,0
shape (Ellipse
uid 998,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,39000,13000,41000"
)
label (Text
uid 999,0
va (VaSet
font "courier,8,1"
)
xt "9000,39550,11000,40450"
st "Loop"
ju 0
blo "10000,40250"
)
name (TextAssociate
uid 1000,0
ps "CenterOffsetStrategy"
text (Text
uid 1001,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,38050,8000,38950"
st "l0"
blo "7000,38750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1002,0
ps "CenterOffsetStrategy"
text (MLText
uid 1003,0
va (VaSet
font "courier,8,0"
)
xt "10000,40000,23500,40900"
st "while (configuration_busy)"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1004,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1005,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,38500,10500,39500"
)
direction 0
)
outConnect (FlowConnect
uid 1006,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1007,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,40500,10500,41500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1008,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1009,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,39500,7500,40500"
)
direction 0
position 2
)
)
*185 (ActionBox
uid 1012,0
shape (Rectangle
uid 1013,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "7500,45050,12500,46950"
)
name (TextAssociate
uid 1014,0
ps "CenterOffsetStrategy"
text (Text
uid 1015,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7500,44100,8500,45000"
st "a2"
blo "7500,44800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1016,0
ps "CenterOffsetStrategy"
text (MLText
uid 1017,0
va (VaSet
font "courier,8,0"
)
xt "8000,45550,12000,46450"
st "send_I2;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1018,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1019,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,44550,10500,45550"
)
direction 0
)
outConnect (FlowConnect
uid 1020,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1021,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,46450,10500,47450"
)
direction 1
position 1
)
)
*186 (EndLoop
uid 1024,0
shape (Ellipse
uid 1025,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,50000,13000,52000"
)
label (Text
uid 1026,0
va (VaSet
font "courier,8,1"
)
xt "8000,50550,12000,51450"
st "End Loop"
ju 0
blo "10000,51250"
)
inConnect (FlowConnect
uid 1027,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1028,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,49500,10500,50500"
)
direction 0
)
outConnect (FlowConnect
uid 1029,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1030,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,51500,10500,52500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1031,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1032,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,50500,7500,51500"
)
direction 1
position 2
)
)
*187 (ActionBox
uid 1037,0
shape (Rectangle
uid 1038,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "250,55150,19750,58850"
)
name (TextAssociate
uid 1039,0
ps "CenterOffsetStrategy"
text (Text
uid 1040,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "250,54200,1250,55100"
st "a3"
blo "250,54900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1041,0
ps "CenterOffsetStrategy"
text (MLText
uid 1042,0
va (VaSet
font "courier,8,0"
)
xt "750,55650,19250,58350"
st "------------------------------------
-- Send the four frames
------------------------------------
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1043,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1044,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,54650,10500,55650"
)
direction 0
)
outConnect (FlowConnect
uid 1045,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1046,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,58350,10500,59350"
)
direction 1
position 1
)
)
*188 (StartLoop
uid 1049,0
shape (Ellipse
uid 1050,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,62000,13000,64000"
)
label (Text
uid 1051,0
va (VaSet
font "courier,8,1"
)
xt "9000,62550,11000,63450"
st "Loop"
ju 0
blo "10000,63250"
)
name (TextAssociate
uid 1052,0
ps "CenterOffsetStrategy"
text (Text
uid 1053,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,61050,8000,61950"
st "l1"
blo "7000,61750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1054,0
ps "CenterOffsetStrategy"
text (MLText
uid 1055,0
va (VaSet
font "courier,8,0"
)
xt "10000,63000,37700,63900"
st "for current_frame in frame_data'low to frame_data'high"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1056,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1057,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,61500,10500,62500"
)
direction 0
)
outConnect (FlowConnect
uid 1058,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1059,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,63500,10500,64500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1060,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1061,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,62500,7500,63500"
)
direction 0
position 2
)
)
*189 (ActionBox
uid 1064,0
shape (Rectangle
uid 1065,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-13550,68150,33550,71850"
)
name (TextAssociate
uid 1066,0
ps "CenterOffsetStrategy"
text (Text
uid 1067,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-13550,67200,-12550,68100"
st "a4"
blo "-13550,67900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1068,0
ps "CenterOffsetStrategy"
text (MLText
uid 1069,0
va (VaSet
font "courier,8,0"
)
xt "-13050,68650,33050,71350"
st "assert false
report \"EMAC0: Sending Frame \" & integer'image(current_frame) & \" at \" & current_speed & cr
severity note;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1070,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1071,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,67650,10500,68650"
)
direction 0
)
outConnect (FlowConnect
uid 1072,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1073,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,71350,10500,72350"
)
direction 1
position 1
)
)
*190 (ActionBox
uid 1076,0
shape (Rectangle
uid 1077,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "250,75150,19750,78850"
)
name (TextAssociate
uid 1078,0
ps "CenterOffsetStrategy"
text (Text
uid 1079,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "250,74200,1250,75100"
st "a5"
blo "250,74900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1080,0
ps "CenterOffsetStrategy"
text (MLText
uid 1081,0
va (VaSet
font "courier,8,0"
)
xt "750,75650,19250,78350"
st "-- Send a Start of Packet code group
------------------------------------
send_S;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1082,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1083,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,74650,10500,75650"
)
direction 0
)
outConnect (FlowConnect
uid 1084,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1085,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,78350,10500,79350"
)
direction 1
position 1
)
)
*191 (ActionBox
uid 1088,0
shape (Rectangle
uid 1089,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "250,81600,19750,84400"
)
name (TextAssociate
uid 1090,0
ps "CenterOffsetStrategy"
text (Text
uid 1091,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "250,80650,1250,81550"
st "a6"
blo "250,81350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1092,0
ps "CenterOffsetStrategy"
text (MLText
uid 1093,0
va (VaSet
font "courier,8,0"
)
xt "750,82100,19250,83900"
st "-- Adding the preamble field
------------------------------------
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1094,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1095,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,81100,10500,82100"
)
direction 0
)
outConnect (FlowConnect
uid 1096,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1097,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,83900,10500,84900"
)
direction 1
position 1
)
)
*192 (DecisionBox
uid 1100,0
shape (Diamond
uid 1101,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,89000,15000,93000"
)
name (TextAssociate
uid 1102,0
ps "EdgeToEdgeStrategy"
text (Text
uid 1103,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,88050,6000,88950"
st "d0"
blo "5000,88750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1104,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 1105,0
va (VaSet
font "courier,8,0"
)
xt "3250,90550,16750,91450"
st " current_speed = \"1gig  \" "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 1106,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,93500,11000,94400"
st "T"
blo "10500,94200"
)
falseLabel (Text
uid 1107,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,89600,16000,90500"
st "F"
blo "15500,90300"
)
inConnect (FlowConnect
uid 1108,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1109,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,88500,10500,89500"
)
direction 0
)
trueConnect (FlowConnect
uid 1110,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1111,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,92500,10500,93500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 1112,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1113,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,90500,15500,91500"
)
direction 1
position 3
)
elsif 1
)
*193 (ActionBox
uid 1116,0
shape (Rectangle
uid 1117,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-7750,97050,27750,98950"
)
name (TextAssociate
uid 1118,0
ps "CenterOffsetStrategy"
text (Text
uid 1119,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-7750,96100,-6750,97000"
st "a7"
blo "-7750,96800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1120,0
ps "CenterOffsetStrategy"
text (MLText
uid 1121,0
va (VaSet
font "courier,8,0"
)
xt "-7250,97550,27250,98450"
st "-- 1Gbps (the 1st preamble has been replaced with the /S/ character)"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1122,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1123,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,96550,10500,97550"
)
direction 0
)
outConnect (FlowConnect
uid 1124,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1125,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,98450,10500,99450"
)
direction 1
position 1
)
)
*194 (StartLoop
uid 1128,0
shape (Ellipse
uid 1129,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,102000,13000,104000"
)
label (Text
uid 1130,0
va (VaSet
font "courier,8,1"
)
xt "9000,102550,11000,103450"
st "Loop"
ju 0
blo "10000,103250"
)
name (TextAssociate
uid 1131,0
ps "CenterOffsetStrategy"
text (Text
uid 1132,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,101050,8000,101950"
st "l2"
blo "7000,101750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1133,0
ps "CenterOffsetStrategy"
text (MLText
uid 1134,0
va (VaSet
font "courier,8,0"
)
xt "10000,103000,18000,103900"
st "for j in 0 to 5"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1135,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1136,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,101500,10500,102500"
)
direction 0
)
outConnect (FlowConnect
uid 1137,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1138,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,103500,10500,104500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1139,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1140,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,102500,7500,103500"
)
direction 0
position 2
)
)
*195 (ActionBox
uid 1143,0
shape (Rectangle
uid 1144,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "3250,107600,16750,110400"
)
name (TextAssociate
uid 1145,0
ps "CenterOffsetStrategy"
text (Text
uid 1146,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "3250,106650,4250,107550"
st "a8"
blo "3250,107350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1147,0
ps "CenterOffsetStrategy"
text (MLText
uid 1148,0
va (VaSet
font "courier,8,0"
)
xt "3750,108100,16250,109900"
st "rx_pdata  <= \"01010101\";
rx_is_k   <= false;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1149,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1150,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,107100,10500,108100"
)
direction 0
)
outConnect (FlowConnect
uid 1151,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1152,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,109900,10500,110900"
)
direction 1
position 1
)
)
*196 (WaitBox
uid 1155,0
shape (Octagon
uid 1156,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,114000,11000,116000"
)
name (TextAssociate
uid 1157,0
ps "CenterOffsetStrategy"
text (Text
uid 1158,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,113050,10000,113950"
st "w2"
blo "9000,113750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1159,0
ps "CenterOffsetStrategy"
text (MLText
uid 1160,0
va (VaSet
font "courier,8,0"
)
xt "11250,114550,46250,116350"
st "wait until clk125m'event and clk125m = '1' and stim_rx_sample = '1';

"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 1161,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1162,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,113500,10500,114500"
)
direction 0
)
outConnect (FlowConnect
uid 1163,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1164,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,115500,10500,116500"
)
direction 1
position 1
)
)
*197 (EndLoop
uid 1167,0
shape (Ellipse
uid 1168,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,119000,13000,121000"
)
label (Text
uid 1169,0
va (VaSet
font "courier,8,1"
)
xt "8000,119550,12000,120450"
st "End Loop"
ju 0
blo "10000,120250"
)
inConnect (FlowConnect
uid 1170,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1171,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,118500,10500,119500"
)
direction 0
)
outConnect (FlowConnect
uid 1172,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1173,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,120500,10500,121500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1174,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1175,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,119500,7500,120500"
)
direction 1
position 2
)
)
*198 (ActionBox
uid 1180,0
shape (Rectangle
uid 1181,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "37000,94050,65000,95950"
)
name (TextAssociate
uid 1182,0
ps "CenterOffsetStrategy"
text (Text
uid 1183,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "37000,93100,38000,94000"
st "a9"
blo "37000,93800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1184,0
ps "CenterOffsetStrategy"
text (MLText
uid 1185,0
va (VaSet
font "courier,8,0"
)
xt "37500,94550,64500,95450"
st "-- 10/100Mbps (the 1st preamble should still be sent)"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1186,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1187,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,93550,51500,94550"
)
direction 0
)
outConnect (FlowConnect
uid 1188,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1189,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,95450,51500,96450"
)
direction 1
position 1
)
)
*199 (StartLoop
uid 1192,0
shape (Ellipse
uid 1193,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "48000,99000,54000,101000"
)
label (Text
uid 1194,0
va (VaSet
font "courier,8,1"
)
xt "50000,99550,52000,100450"
st "Loop"
ju 0
blo "51000,100250"
)
name (TextAssociate
uid 1195,0
ps "CenterOffsetStrategy"
text (Text
uid 1196,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "48000,98050,49000,98950"
st "l3"
blo "48000,98750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1197,0
ps "CenterOffsetStrategy"
text (MLText
uid 1198,0
va (VaSet
font "courier,8,0"
)
xt "51000,100000,59000,100900"
st "for j in 0 to 6"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1199,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1200,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,98500,51500,99500"
)
direction 0
)
outConnect (FlowConnect
uid 1201,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1202,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,100500,51500,101500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1203,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1204,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "47500,99500,48500,100500"
)
direction 0
position 2
)
)
*200 (ActionBox
uid 1207,0
shape (Rectangle
uid 1208,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "44250,104600,57750,107400"
)
name (TextAssociate
uid 1209,0
ps "CenterOffsetStrategy"
text (Text
uid 1210,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "44250,103650,45750,104550"
st "a10"
blo "44250,104350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1211,0
ps "CenterOffsetStrategy"
text (MLText
uid 1212,0
va (VaSet
font "courier,8,0"
)
xt "44750,105100,57250,106900"
st "rx_pdata  <= \"01010101\";
rx_is_k   <= false;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1213,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1214,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,104100,51500,105100"
)
direction 0
)
outConnect (FlowConnect
uid 1215,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1216,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,106900,51500,107900"
)
direction 1
position 1
)
)
*201 (WaitBox
uid 1219,0
shape (Octagon
uid 1220,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "50000,111000,52000,113000"
)
name (TextAssociate
uid 1221,0
ps "CenterOffsetStrategy"
text (Text
uid 1222,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "50000,110050,51000,110950"
st "w3"
blo "50000,110750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1223,0
ps "CenterOffsetStrategy"
text (MLText
uid 1224,0
va (VaSet
font "courier,8,0"
)
xt "52250,111550,87250,113350"
st "wait until clk125m'event and clk125m = '1' and stim_rx_sample = '1';

"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 1225,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1226,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,110500,51500,111500"
)
direction 0
)
outConnect (FlowConnect
uid 1227,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1228,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,112500,51500,113500"
)
direction 1
position 1
)
)
*202 (EndLoop
uid 1231,0
shape (Ellipse
uid 1232,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "48000,116000,54000,118000"
)
label (Text
uid 1233,0
va (VaSet
font "courier,8,1"
)
xt "49000,116550,53000,117450"
st "End Loop"
ju 0
blo "51000,117250"
)
inConnect (FlowConnect
uid 1234,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1235,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,115500,51500,116500"
)
direction 0
)
outConnect (FlowConnect
uid 1236,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1237,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "50500,117500,51500,118500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1238,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1239,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "47500,116500,48500,117500"
)
direction 1
position 2
)
)
*203 (ActionBox
uid 1260,0
shape (Rectangle
uid 1261,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-1750,128150,21750,131850"
)
name (TextAssociate
uid 1262,0
ps "CenterOffsetStrategy"
text (Text
uid 1263,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-1750,127200,-250,128100"
st "a11"
blo "-1750,127900"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1264,0
ps "CenterOffsetStrategy"
text (MLText
uid 1265,0
va (VaSet
font "courier,8,0"
)
xt "-1250,128650,21250,131350"
st "-- Adding the Start of Frame Delimiter (SFD)
rx_pdata    <= \"11010101\";
rx_is_k     <= false;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1266,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1267,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,127650,10500,128650"
)
direction 0
)
outConnect (FlowConnect
uid 1268,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1269,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,131350,10500,132350"
)
direction 1
position 1
)
)
*204 (WaitBox
uid 1272,0
shape (Octagon
uid 1273,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,135000,11000,137000"
)
name (TextAssociate
uid 1274,0
ps "CenterOffsetStrategy"
text (Text
uid 1275,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,134050,10000,134950"
st "w4"
blo "9000,134750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1276,0
ps "CenterOffsetStrategy"
text (MLText
uid 1277,0
va (VaSet
font "courier,8,0"
)
xt "11250,135550,46250,136450"
st "wait until clk125m'event and clk125m = '1' and stim_rx_sample = '1';
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 1278,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1279,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,134500,10500,135500"
)
direction 0
)
outConnect (FlowConnect
uid 1280,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1281,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,136500,10500,137500"
)
direction 1
position 1
)
)
*205 (ActionBox
uid 1284,0
shape (Rectangle
uid 1285,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-4350,140700,24350,145300"
)
name (TextAssociate
uid 1286,0
ps "CenterOffsetStrategy"
text (Text
uid 1287,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-4350,139750,-2850,140650"
st "a12"
blo "-4350,140450"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1288,0
ps "CenterOffsetStrategy"
text (MLText
uid 1289,0
va (VaSet
font "courier,8,0"
)
xt "-3850,141200,23850,144800"
st "-- Sending the MAC frame         
------------------------------------
fcs         := (others => '0'); -- reset the FCS field
current_col := 0;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1290,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1291,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,140200,10500,141200"
)
direction 0
)
outConnect (FlowConnect
uid 1292,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1293,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,144800,10500,145800"
)
direction 1
position 1
)
)
*206 (ActionBox
uid 1296,0
shape (Rectangle
uid 1297,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "1750,149050,18250,150950"
)
name (TextAssociate
uid 1298,0
ps "CenterOffsetStrategy"
text (Text
uid 1299,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "1750,148100,3250,149000"
st "a13"
blo "1750,148800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1300,0
ps "CenterOffsetStrategy"
text (MLText
uid 1301,0
va (VaSet
font "courier,8,0"
)
xt "2250,149550,17750,150450"
st "-- loop over columns in frame."
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1302,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1303,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,148550,10500,149550"
)
direction 0
)
outConnect (FlowConnect
uid 1304,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1305,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,150450,10500,151450"
)
direction 1
position 1
)
)
*207 (StartLoop
uid 1308,0
shape (Ellipse
uid 1309,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,154000,13000,156000"
)
label (Text
uid 1310,0
va (VaSet
font "courier,8,1"
)
xt "9000,154550,11000,155450"
st "Loop"
ju 0
blo "10000,155250"
)
name (TextAssociate
uid 1311,0
ps "CenterOffsetStrategy"
text (Text
uid 1312,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,153050,8000,153950"
st "l4"
blo "7000,153750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1313,0
ps "CenterOffsetStrategy"
text (MLText
uid 1314,0
va (VaSet
font "courier,8,0"
)
xt "10000,155000,43200,155900"
st "while frame_data(current_frame).columns(current_col).valid /= '0'"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1315,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1316,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,153500,10500,154500"
)
direction 0
)
outConnect (FlowConnect
uid 1317,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1318,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,155500,10500,156500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1319,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1320,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,154500,7500,155500"
)
direction 0
position 2
)
)
*208 (ActionBox
uid 1323,0
shape (Rectangle
uid 1324,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-16000,160050,36000,161950"
)
name (TextAssociate
uid 1325,0
ps "CenterOffsetStrategy"
text (Text
uid 1326,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-16000,159100,-14500,160000"
st "a14"
blo "-16000,159800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1327,0
ps "CenterOffsetStrategy"
text (MLText
uid 1328,0
va (VaSet
font "courier,8,0"
)
xt "-15500,160550,35500,161450"
st "fcs         := calc_crc(to_stdlogicvector(frame_data(current_frame).columns(current_col).data), fcs);"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1329,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1330,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,159550,10500,160550"
)
direction 0
)
outConnect (FlowConnect
uid 1331,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1332,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,161450,10500,162450"
)
direction 1
position 1
)
)
*209 (DecisionBox
uid 1335,0
shape (Diamond
uid 1336,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,165000,15000,169000"
)
name (TextAssociate
uid 1337,0
ps "EdgeToEdgeStrategy"
text (Text
uid 1338,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,164050,6000,164950"
st "d1"
blo "5000,164750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1339,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 1340,0
va (VaSet
font "courier,8,0"
)
xt "-8850,166550,28850,167450"
st " to_stdulogic(frame_data(current_frame).columns(current_col).error) = '1' "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 1341,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,169500,11000,170400"
st "T"
blo "10500,170200"
)
falseLabel (Text
uid 1342,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,165600,16000,166500"
st "F"
blo "15500,166300"
)
inConnect (FlowConnect
uid 1343,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1344,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,164500,10500,165500"
)
direction 0
)
trueConnect (FlowConnect
uid 1345,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1346,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,168500,10500,169500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 1347,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1348,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,166500,15500,167500"
)
direction 1
position 3
)
elsif 1
)
*210 (ActionBox
uid 1351,0
shape (Rectangle
uid 1352,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-3000,173050,23000,174950"
)
name (TextAssociate
uid 1353,0
ps "CenterOffsetStrategy"
text (Text
uid 1354,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-3000,172100,-1500,173000"
st "a15"
blo "-3000,172800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1355,0
ps "CenterOffsetStrategy"
text (MLText
uid 1356,0
va (VaSet
font "courier,8,0"
)
xt "-2500,173550,22500,174450"
st "send_V; -- insert an error propogation code group"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1357,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1358,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,172550,10500,173550"
)
direction 0
)
outConnect (FlowConnect
uid 1359,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1360,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,174450,10500,175450"
)
direction 1
position 1
)
)
*211 (ActionBox
uid 1363,0
shape (Rectangle
uid 1364,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "31250,169600,74750,172400"
)
name (TextAssociate
uid 1365,0
ps "CenterOffsetStrategy"
text (Text
uid 1366,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "31250,168650,32750,169550"
st "a16"
blo "31250,169350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1367,0
ps "CenterOffsetStrategy"
text (MLText
uid 1368,0
va (VaSet
font "courier,8,0"
)
xt "31750,170100,74250,171900"
st "rx_pdata  <= to_stdlogicvector(frame_data(current_frame).columns(current_col).data);
rx_is_k   <= false;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1369,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1370,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "52500,169100,53500,170100"
)
direction 0
)
outConnect (FlowConnect
uid 1371,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1372,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "52500,171900,53500,172900"
)
direction 1
position 1
)
)
*212 (WaitBox
uid 1391,0
shape (Octagon
uid 1392,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,183000,11000,185000"
)
name (TextAssociate
uid 1393,0
ps "CenterOffsetStrategy"
text (Text
uid 1394,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,182050,10000,182950"
st "w5"
blo "9000,182750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1395,0
ps "CenterOffsetStrategy"
text (MLText
uid 1396,0
va (VaSet
font "courier,8,0"
)
xt "11250,183550,46250,184450"
st "wait until clk125m'event and clk125m = '1' and stim_rx_sample = '1';
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 1397,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1398,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,182500,10500,183500"
)
direction 0
)
outConnect (FlowConnect
uid 1399,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1400,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,184500,10500,185500"
)
direction 1
position 1
)
)
*213 (ActionBox
uid 1403,0
shape (Rectangle
uid 1404,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "1500,188050,18500,189950"
)
name (TextAssociate
uid 1405,0
ps "CenterOffsetStrategy"
text (Text
uid 1406,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "1500,187100,3000,188000"
st "a17"
blo "1500,187800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1407,0
ps "CenterOffsetStrategy"
text (MLText
uid 1408,0
va (VaSet
font "courier,8,0"
)
xt "2000,188550,18000,189450"
st "current_col := current_col + 1;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1409,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1410,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,187550,10500,188550"
)
direction 0
)
outConnect (FlowConnect
uid 1411,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1412,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,189450,10500,190450"
)
direction 1
position 1
)
)
*214 (EndLoop
uid 1415,0
shape (Ellipse
uid 1416,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,193000,13000,195000"
)
label (Text
uid 1417,0
va (VaSet
font "courier,8,1"
)
xt "8000,193550,12000,194450"
st "End Loop"
ju 0
blo "10000,194250"
)
inConnect (FlowConnect
uid 1418,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1419,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,192500,10500,193500"
)
direction 0
)
outConnect (FlowConnect
uid 1420,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1421,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,194500,10500,195500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1422,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1423,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,193500,7500,194500"
)
direction 1
position 2
)
)
*215 (ActionBox
uid 1428,0
shape (Rectangle
uid 1429,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "250,198600,19750,201400"
)
name (TextAssociate
uid 1430,0
ps "CenterOffsetStrategy"
text (Text
uid 1431,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "250,197650,1750,198550"
st "a18"
blo "250,198350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1432,0
ps "CenterOffsetStrategy"
text (MLText
uid 1433,0
va (VaSet
font "courier,8,0"
)
xt "750,199100,19250,200900"
st "-- Send the FCS.
------------------------------------
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1434,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1435,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,198100,10500,199100"
)
direction 0
)
outConnect (FlowConnect
uid 1436,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1437,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,200900,10500,201900"
)
direction 1
position 1
)
)
*216 (StartLoop
uid 1440,0
shape (Ellipse
uid 1441,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,205000,13000,207000"
)
label (Text
uid 1442,0
va (VaSet
font "courier,8,1"
)
xt "9000,205550,11000,206450"
st "Loop"
ju 0
blo "10000,206250"
)
name (TextAssociate
uid 1443,0
ps "CenterOffsetStrategy"
text (Text
uid 1444,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,204050,8000,204950"
st "l5"
blo "7000,204750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1445,0
ps "CenterOffsetStrategy"
text (MLText
uid 1446,0
va (VaSet
font "courier,8,0"
)
xt "10000,206000,18000,206900"
st "for j in 0 to 3"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1447,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1448,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,204500,10500,205500"
)
direction 0
)
outConnect (FlowConnect
uid 1449,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1450,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,206500,10500,207500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1451,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1452,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,205500,7500,206500"
)
direction 0
position 2
)
)
*217 (ActionBox
uid 1455,0
shape (Rectangle
uid 1456,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-1000,210600,21000,213400"
)
name (TextAssociate
uid 1457,0
ps "CenterOffsetStrategy"
text (Text
uid 1458,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-1000,209650,500,210550"
st "a19"
blo "-1000,210350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1459,0
ps "CenterOffsetStrategy"
text (MLText
uid 1460,0
va (VaSet
font "courier,8,0"
)
xt "-500,211100,20500,212900"
st "rx_pdata  <= fcs(((8*j)+7) downto (8*j));
rx_is_k   <= false;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1461,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1462,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,210100,10500,211100"
)
direction 0
)
outConnect (FlowConnect
uid 1463,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1464,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,212900,10500,213900"
)
direction 1
position 1
)
)
*218 (WaitBox
uid 1467,0
shape (Octagon
uid 1468,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,216000,11000,218000"
)
name (TextAssociate
uid 1469,0
ps "CenterOffsetStrategy"
text (Text
uid 1470,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,215050,10000,215950"
st "w6"
blo "9000,215750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1471,0
ps "CenterOffsetStrategy"
text (MLText
uid 1472,0
va (VaSet
font "courier,8,0"
)
xt "11250,216550,46250,218350"
st "wait until clk125m'event and clk125m = '1' and stim_rx_sample = '1';

"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 1473,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1474,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,215500,10500,216500"
)
direction 0
)
outConnect (FlowConnect
uid 1475,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1476,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,217500,10500,218500"
)
direction 1
position 1
)
)
*219 (EndLoop
uid 1479,0
shape (Ellipse
uid 1480,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,222000,13000,224000"
)
label (Text
uid 1481,0
va (VaSet
font "courier,8,1"
)
xt "8000,222550,12000,223450"
st "End Loop"
ju 0
blo "10000,223250"
)
inConnect (FlowConnect
uid 1482,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1483,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,221500,10500,222500"
)
direction 0
)
outConnect (FlowConnect
uid 1484,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1485,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,223500,10500,224500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1486,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1487,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,222500,7500,223500"
)
direction 1
position 2
)
)
*220 (ActionBox
uid 1492,0
shape (Rectangle
uid 1493,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-500,226700,20500,231300"
)
name (TextAssociate
uid 1494,0
ps "CenterOffsetStrategy"
text (Text
uid 1495,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-500,225750,1000,226650"
st "a20"
blo "-500,226450"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1496,0
ps "CenterOffsetStrategy"
text (MLText
uid 1497,0
va (VaSet
font "courier,8,0"
)
xt "0,227200,20000,230800"
st "-- Send a frame termination sequence
------------------------------------
send_T;    -- Terminate code group
send_R;    -- Carrier Extend code group
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1498,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1499,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,226200,10500,227200"
)
direction 0
)
outConnect (FlowConnect
uid 1500,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1501,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,230800,10500,231800"
)
direction 1
position 1
)
)
*221 (ActionBox
uid 1504,0
shape (Rectangle
uid 1505,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-8000,234600,28000,237400"
)
name (TextAssociate
uid 1506,0
ps "CenterOffsetStrategy"
text (Text
uid 1507,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-8000,233650,-6500,234550"
st "a21"
blo "-8000,234350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1508,0
ps "CenterOffsetStrategy"
text (MLText
uid 1509,0
va (VaSet
font "courier,8,0"
)
xt "-7500,235100,27500,236900"
st "-- An extra Carrier Extend code group should be sent to end the frame
-- on an even boundary.
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1510,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1511,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,234100,10500,235100"
)
direction 0
)
outConnect (FlowConnect
uid 1512,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1513,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,236900,10500,237900"
)
direction 1
position 1
)
)
*222 (DecisionBox
uid 1516,0
shape (Diamond
uid 1517,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,242000,15000,246000"
)
name (TextAssociate
uid 1518,0
ps "EdgeToEdgeStrategy"
text (Text
uid 1519,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,241050,6000,241950"
st "d2"
blo "5000,241750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1520,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 1521,0
va (VaSet
font "courier,8,0"
)
xt "5900,243550,14100,244450"
st " rx_even = '1' "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 1522,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,246500,11000,247400"
st "T"
blo "10500,247200"
)
falseLabel (Text
uid 1523,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,242600,16000,243500"
st "F"
blo "15500,243300"
)
inConnect (FlowConnect
uid 1524,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1525,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,241500,10500,242500"
)
direction 0
)
trueConnect (FlowConnect
uid 1526,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1527,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,245500,10500,246500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 1528,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1529,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,243500,15500,244500"
)
direction 1
position 3
)
elsif 1
)
*223 (ActionBox
uid 1532,0
shape (Rectangle
uid 1533,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "0,249050,20000,250950"
)
name (TextAssociate
uid 1534,0
ps "CenterOffsetStrategy"
text (Text
uid 1535,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "0,248100,1500,249000"
st "a22"
blo "0,248800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1536,0
ps "CenterOffsetStrategy"
text (MLText
uid 1537,0
va (VaSet
font "courier,8,0"
)
xt "500,249550,19500,250450"
st "send_R;  -- Carrier Extend code group"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1538,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1539,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,248550,10500,249550"
)
direction 0
)
outConnect (FlowConnect
uid 1540,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1541,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,250450,10500,251450"
)
direction 1
position 1
)
)
*224 (ActionBox
uid 1560,0
shape (Rectangle
uid 1561,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-6750,258700,26750,263300"
)
name (TextAssociate
uid 1562,0
ps "CenterOffsetStrategy"
text (Text
uid 1563,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-6750,257750,-5250,258650"
st "a23"
blo "-6750,258450"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1564,0
ps "CenterOffsetStrategy"
text (MLText
uid 1565,0
va (VaSet
font "courier,8,0"
)
xt "-6250,259200,26250,262800"
st "-- Send an Inter Packet Gap.
------------------------------------
-- The initial Idle following a frame should be chosen to ensure
-- that the running disparity is returned to -ve.
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1566,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1567,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,258200,10500,259200"
)
direction 0
)
outConnect (FlowConnect
uid 1568,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1569,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,262800,10500,263800"
)
direction 1
position 1
)
)
*225 (DecisionBox
uid 1572,0
shape (Diamond
uid 1573,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,267000,15000,271000"
)
name (TextAssociate
uid 1574,0
ps "EdgeToEdgeStrategy"
text (Text
uid 1575,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,266050,6000,266950"
st "d3"
blo "5000,266750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1576,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 1577,0
va (VaSet
font "courier,8,0"
)
xt "5750,268550,14250,269450"
st " rx_rundisp_pos "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 1578,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,271500,11000,272400"
st "T"
blo "10500,272200"
)
falseLabel (Text
uid 1579,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,267600,16000,268500"
st "F"
blo "15500,268300"
)
inConnect (FlowConnect
uid 1580,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1581,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,266500,10500,267500"
)
direction 0
)
trueConnect (FlowConnect
uid 1582,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1583,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,270500,10500,271500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 1584,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1585,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,268500,15500,269500"
)
direction 1
position 3
)
elsif 1
)
*226 (ActionBox
uid 1588,0
shape (Rectangle
uid 1589,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-3000,275050,23000,276950"
)
name (TextAssociate
uid 1590,0
ps "CenterOffsetStrategy"
text (Text
uid 1591,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-3000,274100,-1500,275000"
st "a24"
blo "-3000,274800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1592,0
ps "CenterOffsetStrategy"
text (MLText
uid 1593,0
va (VaSet
font "courier,8,0"
)
xt "-2500,275550,22500,276450"
st "send_I1;  -- /I1/ will flip the running disparity"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1594,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1595,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,274550,10500,275550"
)
direction 0
)
outConnect (FlowConnect
uid 1596,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1597,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,276450,10500,277450"
)
direction 1
position 1
)
)
*227 (ActionBox
uid 1600,0
shape (Rectangle
uid 1601,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "25000,272050,53000,273950"
)
name (TextAssociate
uid 1602,0
ps "CenterOffsetStrategy"
text (Text
uid 1603,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "25000,271100,26500,272000"
st "a25"
blo "25000,271800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1604,0
ps "CenterOffsetStrategy"
text (MLText
uid 1605,0
va (VaSet
font "courier,8,0"
)
xt "25500,272550,52500,273450"
st "send_I2;  -- /I2/ will maintain the running disparity"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1606,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1607,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "38500,271550,39500,272550"
)
direction 0
)
outConnect (FlowConnect
uid 1608,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1609,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "38500,273450,39500,274450"
)
direction 1
position 1
)
)
*228 (ActionBox
uid 1628,0
shape (Rectangle
uid 1629,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-7250,284700,27250,289300"
)
name (TextAssociate
uid 1630,0
ps "CenterOffsetStrategy"
text (Text
uid 1631,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-7250,283750,-5750,284650"
st "a26"
blo "-7250,284450"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1632,0
ps "CenterOffsetStrategy"
text (MLText
uid 1633,0
va (VaSet
font "courier,8,0"
)
xt "-6750,285200,26750,288800"
st "-- The remainder of the IPG is made up of /I2/ 's.
-- NOTE: the number 4 in the following calculations is made up 
--      from 2 bytes of the termination sequence and 2 bytes from 
--      the initial Idle.
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1634,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1635,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,284200,10500,285200"
)
direction 0
)
outConnect (FlowConnect
uid 1636,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1637,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,288800,10500,289800"
)
direction 1
position 1
)
)
*229 (StartLoop
uid 1640,0
shape (Ellipse
uid 1641,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,293000,13000,295000"
)
label (Text
uid 1642,0
va (VaSet
font "courier,8,1"
)
xt "9000,293550,11000,294450"
st "Loop"
ju 0
blo "10000,294250"
)
name (TextAssociate
uid 1643,0
ps "CenterOffsetStrategy"
text (Text
uid 1644,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,292050,8000,292950"
st "l6"
blo "7000,292750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1645,0
ps "CenterOffsetStrategy"
text (MLText
uid 1646,0
va (VaSet
font "courier,8,0"
)
xt "10000,294000,18000,294900"
st "for j in 0 to 3"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1647,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1648,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,292500,10500,293500"
)
direction 0
)
outConnect (FlowConnect
uid 1649,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1650,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,294500,10500,295500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1651,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1652,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,293500,7500,294500"
)
direction 0
position 2
)
)
*230 (ActionBox
uid 1655,0
shape (Rectangle
uid 1656,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-1050,297600,21050,300400"
)
name (TextAssociate
uid 1657,0
ps "CenterOffsetStrategy"
text (Text
uid 1658,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-1050,296650,450,297550"
st "a27"
blo "-1050,297350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1659,0
ps "CenterOffsetStrategy"
text (MLText
uid 1660,0
va (VaSet
font "courier,8,0"
)
xt "-550,298100,20550,299900"
st "   -- 4 /I2/'s = 8 clock periods (12 - 4)
send_I2;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1661,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1662,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,297100,10500,298100"
)
direction 0
)
outConnect (FlowConnect
uid 1663,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1664,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,299900,10500,300900"
)
direction 1
position 1
)
)
*231 (EndLoop
uid 1667,0
shape (Ellipse
uid 1668,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,304000,13000,306000"
)
label (Text
uid 1669,0
va (VaSet
font "courier,8,1"
)
xt "8000,304550,12000,305450"
st "End Loop"
ju 0
blo "10000,305250"
)
inConnect (FlowConnect
uid 1670,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1671,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,303500,10500,304500"
)
direction 0
)
outConnect (FlowConnect
uid 1672,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1673,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,305500,10500,306500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1674,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1675,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,304500,7500,305500"
)
direction 1
position 2
)
)
*232 (EndLoop
uid 1680,0
shape (Ellipse
uid 1681,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,309000,13000,311000"
)
label (Text
uid 1682,0
va (VaSet
font "courier,8,1"
)
xt "8000,309550,12000,310450"
st "End Loop"
ju 0
blo "10000,310250"
)
inConnect (FlowConnect
uid 1683,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1684,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,308500,10500,309500"
)
direction 0
)
outConnect (FlowConnect
uid 1685,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1686,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,310500,10500,311500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1687,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1688,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,309500,7500,310500"
)
direction 1
position 2
)
)
*233 (ActionBox
uid 1693,0
shape (Rectangle
uid 1694,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "5250,314050,14750,315950"
)
name (TextAssociate
uid 1695,0
ps "CenterOffsetStrategy"
text (Text
uid 1696,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5250,313100,6750,314000"
st "a28"
blo "5250,313800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1697,0
ps "CenterOffsetStrategy"
text (MLText
uid 1698,0
va (VaSet
font "courier,8,0"
)
xt "5750,314550,14250,315450"
st "-- current_frame"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1699,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1700,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,313550,10500,314550"
)
direction 0
)
outConnect (FlowConnect
uid 1701,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1702,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,315450,10500,316450"
)
direction 1
position 1
)
)
*234 (ActionBox
uid 1705,0
shape (Rectangle
uid 1706,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-6500,320050,26500,321950"
)
name (TextAssociate
uid 1707,0
ps "CenterOffsetStrategy"
text (Text
uid 1708,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-6500,319100,-5000,320000"
st "a29"
blo "-6500,319800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1709,0
ps "CenterOffsetStrategy"
text (MLText
uid 1710,0
va (VaSet
font "courier,8,0"
)
xt "-6000,320550,26000,321450"
st "-- After the completion of the simulus, send Idles continuously"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1711,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1712,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,319550,10500,320550"
)
direction 0
)
outConnect (FlowConnect
uid 1713,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1714,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,321450,10500,322450"
)
direction 1
position 1
)
)
*235 (StartLoop
uid 1717,0
shape (Ellipse
uid 1718,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,325000,13000,327000"
)
label (Text
uid 1719,0
va (VaSet
font "courier,8,1"
)
xt "9000,325550,11000,326450"
st "Loop"
ju 0
blo "10000,326250"
)
name (TextAssociate
uid 1720,0
ps "CenterOffsetStrategy"
text (Text
uid 1721,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,324050,8000,324950"
st "l7"
blo "7000,324750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1722,0
ps "CenterOffsetStrategy"
text (MLText
uid 1723,0
va (VaSet
font "courier,8,0"
)
xt "10000,326000,10000,326000"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1724,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1725,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,324500,10500,325500"
)
direction 0
)
outConnect (FlowConnect
uid 1726,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1727,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,326500,10500,327500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1728,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1729,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,325500,7500,326500"
)
direction 0
position 2
)
)
*236 (ActionBox
uid 1732,0
shape (Rectangle
uid 1733,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "7500,330050,12500,331950"
)
name (TextAssociate
uid 1734,0
ps "CenterOffsetStrategy"
text (Text
uid 1735,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7500,329100,9000,330000"
st "a30"
blo "7500,329800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1736,0
ps "CenterOffsetStrategy"
text (MLText
uid 1737,0
va (VaSet
font "courier,8,0"
)
xt "8000,330550,12000,331450"
st "send_I2;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1738,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1739,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,329550,10500,330550"
)
direction 0
)
outConnect (FlowConnect
uid 1740,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1741,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,331450,10500,332450"
)
direction 1
position 1
)
)
*237 (EndLoop
uid 1744,0
shape (Ellipse
uid 1745,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,336000,13000,338000"
)
label (Text
uid 1746,0
va (VaSet
font "courier,8,1"
)
xt "8000,336550,12000,337450"
st "End Loop"
ju 0
blo "10000,337250"
)
inConnect (FlowConnect
uid 1747,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1748,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,335500,10500,336500"
)
direction 0
)
outConnect (FlowConnect
uid 1749,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1750,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,337500,10500,338500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1751,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1752,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,336500,7500,337500"
)
direction 1
position 2
)
)
*238 (EndPoint
uid 1757,0
shape (RoundedRectangle
uid 1758,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,340000,13000,342000"
radius 400
)
label (Text
uid 1759,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "9100,340500,10900,341500"
st "End"
ju 0
blo "10000,341300"
)
inConnect (FlowConnect
uid 1760,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1761,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,339500,10500,340500"
)
direction 0
)
)
*239 (Flow
uid 959,0
shape (OrthoPolyLine
uid 960,0
va (VaSet
vasetType 3
)
xt "10000,14000,10000,18000"
pts [
"10000,14000"
"10000,18000"
]
arrow 1
)
start &178
end &180
)
*240 (Flow
uid 971,0
shape (OrthoPolyLine
uid 972,0
va (VaSet
vasetType 3
)
xt "10000,20000,10000,23000"
pts [
"10000,20000"
"10000,23000"
]
arrow 1
)
start &180
end &181
)
*241 (Flow
uid 983,0
shape (OrthoPolyLine
uid 984,0
va (VaSet
vasetType 3
)
xt "10000,25000,10000,29050"
pts [
"10000,25000"
"10000,29050"
]
arrow 1
)
start &181
end &182
)
*242 (Flow
uid 995,0
shape (OrthoPolyLine
uid 996,0
va (VaSet
vasetType 3
)
xt "10000,30950,10000,34050"
pts [
"10000,30950"
"10000,34050"
]
arrow 1
)
start &182
end &183
)
*243 (Flow
uid 1010,0
shape (OrthoPolyLine
uid 1011,0
va (VaSet
vasetType 3
)
xt "10000,35950,10000,39000"
pts [
"10000,35950"
"10000,39000"
]
arrow 1
)
start &183
end &184
)
*244 (Flow
uid 1022,0
shape (OrthoPolyLine
uid 1023,0
va (VaSet
vasetType 3
)
xt "10000,41000,10000,45050"
pts [
"10000,41000"
"10000,45050"
]
arrow 1
)
start &184
end &185
)
*245 (Flow
uid 1033,0
shape (OrthoPolyLine
uid 1034,0
va (VaSet
vasetType 3
)
xt "10000,46950,10000,50000"
pts [
"10000,46950"
"10000,50000"
]
arrow 1
)
start &185
end &186
)
*246 (Flow
uid 1035,0
shape (OrthoPolyLine
uid 1036,0
va (VaSet
vasetType 3
)
xt "6000,40000,7000,51000"
pts [
"7000,51000"
"6000,51000"
"6000,40000"
"7000,40000"
]
arrow 1
)
start &186
end &184
)
*247 (Flow
uid 1047,0
shape (OrthoPolyLine
uid 1048,0
va (VaSet
vasetType 3
)
xt "10000,52000,10000,55150"
pts [
"10000,52000"
"10000,55150"
]
arrow 1
)
start &186
end &187
)
*248 (Flow
uid 1062,0
shape (OrthoPolyLine
uid 1063,0
va (VaSet
vasetType 3
)
xt "10000,58850,10000,62000"
pts [
"10000,58850"
"10000,62000"
]
arrow 1
)
start &187
end &188
)
*249 (Flow
uid 1074,0
shape (OrthoPolyLine
uid 1075,0
va (VaSet
vasetType 3
)
xt "10000,64000,10000,68150"
pts [
"10000,64000"
"10000,68150"
]
arrow 1
)
start &188
end &189
)
*250 (Flow
uid 1086,0
shape (OrthoPolyLine
uid 1087,0
va (VaSet
vasetType 3
)
xt "10000,71850,10000,75150"
pts [
"10000,71850"
"10000,75150"
]
arrow 1
)
start &189
end &190
)
*251 (Flow
uid 1098,0
shape (OrthoPolyLine
uid 1099,0
va (VaSet
vasetType 3
)
xt "10000,78850,10000,81600"
pts [
"10000,78850"
"10000,81600"
]
arrow 1
)
start &190
end &191
)
*252 (Flow
uid 1114,0
shape (OrthoPolyLine
uid 1115,0
va (VaSet
vasetType 3
)
xt "10000,84400,10000,89000"
pts [
"10000,84400"
"10000,89000"
]
arrow 1
)
start &191
end &192
)
*253 (Flow
uid 1126,0
shape (OrthoPolyLine
uid 1127,0
va (VaSet
vasetType 3
)
xt "10000,93000,10000,97050"
pts [
"10000,93000"
"10000,97050"
]
arrow 1
)
start &192
end &193
)
*254 (Flow
uid 1141,0
shape (OrthoPolyLine
uid 1142,0
va (VaSet
vasetType 3
)
xt "10000,98950,10000,102000"
pts [
"10000,98950"
"10000,102000"
]
arrow 1
)
start &193
end &194
)
*255 (Flow
uid 1153,0
shape (OrthoPolyLine
uid 1154,0
va (VaSet
vasetType 3
)
xt "10000,104000,10000,107600"
pts [
"10000,104000"
"10000,107600"
]
arrow 1
)
start &194
end &195
)
*256 (Flow
uid 1165,0
shape (OrthoPolyLine
uid 1166,0
va (VaSet
vasetType 3
)
xt "10000,110400,10000,114000"
pts [
"10000,110400"
"10000,114000"
]
arrow 1
)
start &195
end &196
)
*257 (Flow
uid 1176,0
shape (OrthoPolyLine
uid 1177,0
va (VaSet
vasetType 3
)
xt "10000,116000,10000,119000"
pts [
"10000,116000"
"10000,119000"
]
arrow 1
)
start &196
end &197
)
*258 (Flow
uid 1178,0
shape (OrthoPolyLine
uid 1179,0
va (VaSet
vasetType 3
)
xt "-11000,103000,7000,120000"
pts [
"7000,120000"
"-11000,120000"
"-11000,103000"
"7000,103000"
]
arrow 1
)
start &197
end &194
)
*259 (Flow
uid 1190,0
shape (OrthoPolyLine
uid 1191,0
va (VaSet
vasetType 3
)
xt "15000,91000,51000,94050"
pts [
"15000,91000"
"51000,91000"
"51000,94050"
]
arrow 1
)
start &192
end &198
)
*260 (Flow
uid 1205,0
shape (OrthoPolyLine
uid 1206,0
va (VaSet
vasetType 3
)
xt "51000,95950,51000,99000"
pts [
"51000,95950"
"51000,99000"
]
arrow 1
)
start &198
end &199
)
*261 (Flow
uid 1217,0
shape (OrthoPolyLine
uid 1218,0
va (VaSet
vasetType 3
)
xt "51000,101000,51000,104600"
pts [
"51000,101000"
"51000,104600"
]
arrow 1
)
start &199
end &200
)
*262 (Flow
uid 1229,0
shape (OrthoPolyLine
uid 1230,0
va (VaSet
vasetType 3
)
xt "51000,107400,51000,111000"
pts [
"51000,107400"
"51000,111000"
]
arrow 1
)
start &200
end &201
)
*263 (Flow
uid 1240,0
shape (OrthoPolyLine
uid 1241,0
va (VaSet
vasetType 3
)
xt "51000,113000,51000,116000"
pts [
"51000,113000"
"51000,116000"
]
arrow 1
)
start &201
end &202
)
*264 (Flow
uid 1242,0
shape (OrthoPolyLine
uid 1243,0
va (VaSet
vasetType 3
)
xt "30000,100000,48000,117000"
pts [
"48000,117000"
"30000,117000"
"30000,100000"
"48000,100000"
]
arrow 1
)
start &202
end &199
)
*265 (Flow
uid 1254,0
optionalChildren [
*266 (FlowJoin
uid 1256,0
ps "OnFlowStrategy"
shape (Circle
uid 1257,0
va (VaSet
vasetType 1
)
xt "9700,125700,10300,126300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 1255,0
va (VaSet
vasetType 3
)
xt "10000,121000,10000,128150"
pts [
"10000,121000"
"10000,128150"
]
arrow 1
)
start &197
end &203
)
*267 (Flow
uid 1258,0
shape (OrthoPolyLine
uid 1259,0
va (VaSet
vasetType 3
)
xt "10000,118000,51000,126000"
pts [
"51000,118000"
"51000,126000"
"10000,126000"
]
arrow 1
)
start &202
end &266
)
*268 (Flow
uid 1282,0
shape (OrthoPolyLine
uid 1283,0
va (VaSet
vasetType 3
)
xt "10000,131850,10000,135000"
pts [
"10000,131850"
"10000,135000"
]
arrow 1
)
start &203
end &204
)
*269 (Flow
uid 1294,0
shape (OrthoPolyLine
uid 1295,0
va (VaSet
vasetType 3
)
xt "10000,137000,10000,140700"
pts [
"10000,137000"
"10000,140700"
]
arrow 1
)
start &204
end &205
)
*270 (Flow
uid 1306,0
shape (OrthoPolyLine
uid 1307,0
va (VaSet
vasetType 3
)
xt "10000,145300,10000,149050"
pts [
"10000,145300"
"10000,149050"
]
arrow 1
)
start &205
end &206
)
*271 (Flow
uid 1321,0
shape (OrthoPolyLine
uid 1322,0
va (VaSet
vasetType 3
)
xt "10000,150950,10000,154000"
pts [
"10000,150950"
"10000,154000"
]
arrow 1
)
start &206
end &207
)
*272 (Flow
uid 1333,0
shape (OrthoPolyLine
uid 1334,0
va (VaSet
vasetType 3
)
xt "10000,156000,10000,160050"
pts [
"10000,156000"
"10000,160050"
]
arrow 1
)
start &207
end &208
)
*273 (Flow
uid 1349,0
shape (OrthoPolyLine
uid 1350,0
va (VaSet
vasetType 3
)
xt "10000,161950,10000,165000"
pts [
"10000,161950"
"10000,165000"
]
arrow 1
)
start &208
end &209
)
*274 (Flow
uid 1361,0
shape (OrthoPolyLine
uid 1362,0
va (VaSet
vasetType 3
)
xt "10000,169000,10000,173050"
pts [
"10000,169000"
"10000,173050"
]
arrow 1
)
start &209
end &210
)
*275 (Flow
uid 1373,0
shape (OrthoPolyLine
uid 1374,0
va (VaSet
vasetType 3
)
xt "15000,167000,53000,169600"
pts [
"15000,167000"
"53000,167000"
"53000,169600"
]
arrow 1
)
start &209
end &211
)
*276 (Flow
uid 1385,0
optionalChildren [
*277 (FlowJoin
uid 1387,0
ps "OnFlowStrategy"
shape (Circle
uid 1388,0
va (VaSet
vasetType 1
)
xt "9700,180700,10300,181300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 1386,0
va (VaSet
vasetType 3
)
xt "10000,174950,10000,183000"
pts [
"10000,174950"
"10000,183000"
]
arrow 1
)
start &210
end &212
)
*278 (Flow
uid 1389,0
shape (OrthoPolyLine
uid 1390,0
va (VaSet
vasetType 3
)
xt "10000,172400,53000,181000"
pts [
"53000,172400"
"53000,181000"
"10000,181000"
]
arrow 1
)
start &211
end &277
)
*279 (Flow
uid 1413,0
shape (OrthoPolyLine
uid 1414,0
va (VaSet
vasetType 3
)
xt "10000,185000,10000,188050"
pts [
"10000,185000"
"10000,188050"
]
arrow 1
)
start &212
end &213
)
*280 (Flow
uid 1424,0
shape (OrthoPolyLine
uid 1425,0
va (VaSet
vasetType 3
)
xt "10000,189950,10000,193000"
pts [
"10000,189950"
"10000,193000"
]
arrow 1
)
start &213
end &214
)
*281 (Flow
uid 1426,0
shape (OrthoPolyLine
uid 1427,0
va (VaSet
vasetType 3
)
xt "-18000,155000,7000,194000"
pts [
"7000,194000"
"-18000,194000"
"-18000,155000"
"7000,155000"
]
arrow 1
)
start &214
end &207
)
*282 (Flow
uid 1438,0
shape (OrthoPolyLine
uid 1439,0
va (VaSet
vasetType 3
)
xt "10000,195000,10000,198600"
pts [
"10000,195000"
"10000,198600"
]
arrow 1
)
start &214
end &215
)
*283 (Flow
uid 1453,0
shape (OrthoPolyLine
uid 1454,0
va (VaSet
vasetType 3
)
xt "10000,201400,10000,205000"
pts [
"10000,201400"
"10000,205000"
]
arrow 1
)
start &215
end &216
)
*284 (Flow
uid 1465,0
shape (OrthoPolyLine
uid 1466,0
va (VaSet
vasetType 3
)
xt "10000,207000,10000,210600"
pts [
"10000,207000"
"10000,210600"
]
arrow 1
)
start &216
end &217
)
*285 (Flow
uid 1477,0
shape (OrthoPolyLine
uid 1478,0
va (VaSet
vasetType 3
)
xt "10000,213400,10000,216000"
pts [
"10000,213400"
"10000,216000"
]
arrow 1
)
start &217
end &218
)
*286 (Flow
uid 1488,0
shape (OrthoPolyLine
uid 1489,0
va (VaSet
vasetType 3
)
xt "10000,218000,10000,222000"
pts [
"10000,218000"
"10000,222000"
]
arrow 1
)
start &218
end &219
)
*287 (Flow
uid 1490,0
shape (OrthoPolyLine
uid 1491,0
va (VaSet
vasetType 3
)
xt "-11000,206000,7000,223000"
pts [
"7000,223000"
"-11000,223000"
"-11000,206000"
"7000,206000"
]
arrow 1
)
start &219
end &216
)
*288 (Flow
uid 1502,0
shape (OrthoPolyLine
uid 1503,0
va (VaSet
vasetType 3
)
xt "10000,224000,10000,226700"
pts [
"10000,224000"
"10000,226700"
]
arrow 1
)
start &219
end &220
)
*289 (Flow
uid 1514,0
shape (OrthoPolyLine
uid 1515,0
va (VaSet
vasetType 3
)
xt "10000,231300,10000,234600"
pts [
"10000,231300"
"10000,234600"
]
arrow 1
)
start &220
end &221
)
*290 (Flow
uid 1530,0
shape (OrthoPolyLine
uid 1531,0
va (VaSet
vasetType 3
)
xt "10000,237400,10000,242000"
pts [
"10000,237400"
"10000,242000"
]
arrow 1
)
start &221
end &222
)
*291 (Flow
uid 1542,0
shape (OrthoPolyLine
uid 1543,0
va (VaSet
vasetType 3
)
xt "10000,246000,10000,249050"
pts [
"10000,246000"
"10000,249050"
]
arrow 1
)
start &222
end &223
)
*292 (Flow
uid 1554,0
optionalChildren [
*293 (FlowJoin
uid 1556,0
ps "OnFlowStrategy"
shape (Circle
uid 1557,0
va (VaSet
vasetType 1
)
xt "9700,256700,10300,257300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 1555,0
va (VaSet
vasetType 3
)
xt "10000,250950,10000,258700"
pts [
"10000,250950"
"10000,258700"
]
arrow 1
)
start &223
end &224
)
*294 (Flow
uid 1558,0
shape (OrthoPolyLine
uid 1559,0
va (VaSet
vasetType 3
)
xt "10000,244000,22000,257000"
pts [
"15000,244000"
"22000,244000"
"22000,257000"
"10000,257000"
]
arrow 1
)
start &222
end &293
)
*295 (Flow
uid 1586,0
shape (OrthoPolyLine
uid 1587,0
va (VaSet
vasetType 3
)
xt "10000,263300,10000,267000"
pts [
"10000,263300"
"10000,267000"
]
arrow 1
)
start &224
end &225
)
*296 (Flow
uid 1598,0
shape (OrthoPolyLine
uid 1599,0
va (VaSet
vasetType 3
)
xt "10000,271000,10000,275050"
pts [
"10000,271000"
"10000,275050"
]
arrow 1
)
start &225
end &226
)
*297 (Flow
uid 1610,0
shape (OrthoPolyLine
uid 1611,0
va (VaSet
vasetType 3
)
xt "15000,269000,39000,272050"
pts [
"15000,269000"
"39000,269000"
"39000,272050"
]
arrow 1
)
start &225
end &227
)
*298 (Flow
uid 1622,0
optionalChildren [
*299 (FlowJoin
uid 1624,0
ps "OnFlowStrategy"
shape (Circle
uid 1625,0
va (VaSet
vasetType 1
)
xt "9700,282700,10300,283300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 1623,0
va (VaSet
vasetType 3
)
xt "10000,276950,10000,284700"
pts [
"10000,276950"
"10000,284700"
]
arrow 1
)
start &226
end &228
)
*300 (Flow
uid 1626,0
shape (OrthoPolyLine
uid 1627,0
va (VaSet
vasetType 3
)
xt "10000,273950,39000,283000"
pts [
"39000,273950"
"39000,283000"
"10000,283000"
]
arrow 1
)
start &227
end &299
)
*301 (Flow
uid 1653,0
shape (OrthoPolyLine
uid 1654,0
va (VaSet
vasetType 3
)
xt "10000,289300,10000,293000"
pts [
"10000,289300"
"10000,293000"
]
arrow 1
)
start &228
end &229
)
*302 (Flow
uid 1665,0
shape (OrthoPolyLine
uid 1666,0
va (VaSet
vasetType 3
)
xt "10000,295000,10000,297600"
pts [
"10000,295000"
"10000,297600"
]
arrow 1
)
start &229
end &230
)
*303 (Flow
uid 1676,0
shape (OrthoPolyLine
uid 1677,0
va (VaSet
vasetType 3
)
xt "10000,300400,10000,304000"
pts [
"10000,300400"
"10000,304000"
]
arrow 1
)
start &230
end &231
)
*304 (Flow
uid 1678,0
shape (OrthoPolyLine
uid 1679,0
va (VaSet
vasetType 3
)
xt "-3000,294000,7000,305000"
pts [
"7000,305000"
"-3000,305000"
"-3000,294000"
"7000,294000"
]
arrow 1
)
start &231
end &229
)
*305 (Flow
uid 1689,0
shape (OrthoPolyLine
uid 1690,0
va (VaSet
vasetType 3
)
xt "10000,306000,10000,309000"
pts [
"10000,306000"
"10000,309000"
]
arrow 1
)
start &231
end &232
)
*306 (Flow
uid 1691,0
shape (OrthoPolyLine
uid 1692,0
va (VaSet
vasetType 3
)
xt "-20000,63000,7000,310000"
pts [
"7000,310000"
"-20000,310000"
"-20000,63000"
"7000,63000"
]
arrow 1
)
start &232
end &188
)
*307 (Flow
uid 1703,0
shape (OrthoPolyLine
uid 1704,0
va (VaSet
vasetType 3
)
xt "10000,311000,10000,314050"
pts [
"10000,311000"
"10000,314050"
]
arrow 1
)
start &232
end &233
)
*308 (Flow
uid 1715,0
shape (OrthoPolyLine
uid 1716,0
va (VaSet
vasetType 3
)
xt "10000,315950,10000,320050"
pts [
"10000,315950"
"10000,320050"
]
arrow 1
)
start &233
end &234
)
*309 (Flow
uid 1730,0
shape (OrthoPolyLine
uid 1731,0
va (VaSet
vasetType 3
)
xt "10000,321950,10000,325000"
pts [
"10000,321950"
"10000,325000"
]
arrow 1
)
start &234
end &235
)
*310 (Flow
uid 1742,0
shape (OrthoPolyLine
uid 1743,0
va (VaSet
vasetType 3
)
xt "10000,327000,10000,330050"
pts [
"10000,327000"
"10000,330050"
]
arrow 1
)
start &235
end &236
)
*311 (Flow
uid 1753,0
shape (OrthoPolyLine
uid 1754,0
va (VaSet
vasetType 3
)
xt "10000,331950,10000,336000"
pts [
"10000,331950"
"10000,336000"
]
arrow 1
)
start &236
end &237
)
*312 (Flow
uid 1755,0
shape (OrthoPolyLine
uid 1756,0
va (VaSet
vasetType 3
)
xt "6000,326000,7000,337000"
pts [
"7000,337000"
"6000,337000"
"6000,326000"
"7000,326000"
]
arrow 1
)
start &237
end &235
)
*313 (Flow
uid 1762,0
shape (OrthoPolyLine
uid 1763,0
va (VaSet
vasetType 3
)
xt "10000,338000,10000,340000"
pts [
"10000,338000"
"10000,340000"
]
arrow 1
)
start &237
end &238
)
]
bg "65535,65535,65535"
grid (Grid
origin "0,0"
isVisible 0
isActive 1
xSpacing 1000
xySpacing 1000
xShown 1
yShown 1
color "26368,26368,26368"
)
packageList *314 (PackageList
uid 929,0
stg "VerticalLayoutStrategy"
textVec [
*315 (Text
uid 930,0
va (VaSet
font "courier,8,1"
)
xt "-85000,4050,-78500,4950"
st "Package List"
blo "-85000,4750"
)
*316 (MLText
uid 931,0
va (VaSet
font "courier,8,0"
)
xt "-85000,4950,-68500,8550"
tm "FcPackageListTextMgr"
)
]
)
compDirBlock (MlTextGroup
uid 932,0
stg "VerticalLayoutStrategy"
textVec [
*317 (Text
uid 933,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-70000,4500,-60000,5400"
st "Compiler Directives"
blo "-70000,5200"
)
*318 (Text
uid 934,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-70000,5400,-58500,6300"
st "Pre-module directives:"
blo "-70000,6100"
)
*319 (MLText
uid 935,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-70000,6300,-59900,8100"
st "`resetall
`timescale 1ns/10ps"
tm "FcCompilerDirectivesTextMgr"
)
*320 (Text
uid 936,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-70000,8100,-58000,9000"
st "Post-module directives:"
blo "-70000,8800"
)
*321 (MLText
uid 937,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-70000,4500,-70000,4500"
tm "FcCompilerDirectivesTextMgr"
)
*322 (Text
uid 938,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-70000,9000,-58500,9900"
st "End-module directives:"
blo "-70000,9700"
)
*323 (MLText
uid 939,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-70000,9900,-70000,9900"
tm "FcCompilerDirectivesTextMgr"
)
]
associable 1
)
windowSize "0,0,1015,690"
viewArea "0,0,0,0"
cachedDiagramExtent "0,0,0,0"
pageBreakOrigin "0,0"
isTopLevel 1
defaultCommentText (CommentText
shape (Rectangle
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "0,0,15000,5000"
)
text (MLText
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "200,200,2200,1100"
st "
Text
"
tm "CommentText"
wrapOption 3
visibleHeight 4600
visibleWidth 14600
)
)
defaultPanel (Panel
shape (RectFrame
va (VaSet
vasetType 1
fg "65535,65535,65535"
lineColor "32768,0,0"
lineWidth 3
)
xt "0,0,20000,20000"
)
title (TextAssociate
ps "TopLeftStrategy"
text (Text
va (VaSet
font "courier,8,1"
)
xt "1000,1000,4000,1900"
st "Panel0"
blo "1000,1700"
tm "PanelText"
)
)
)
archDeclarativeBlock *324 (BiTextGroup
uid 917,0
stg "VerticalLayoutStrategy"
first (Text
uid 918,0
va (VaSet
font "courier,8,1"
)
xt "-90000,10750,-77000,11650"
st "Architecture Declarations"
blo "-90000,11450"
)
second (MLText
uid 919,0
va (VaSet
font "courier,8,0"
)
xt "-90000,11650,-22000,819850"
st "

  
  ----------------------------------------------------------------------
  -- types to support frame data
  ----------------------------------------------------------------------
  -- Tx Data and Data_valid record
  type data_typ is record
      data : bit_vector(7 downto 0);  -- data
      valid : bit;                    -- data_valid
      error : bit;                    -- data_error
  end record;
  type frame_of_data_typ is array (natural range <>) of data_typ;

  -- Tx Data, Data_valid and underrun record
  type frame_typ is record
      columns   : frame_of_data_typ(0 to 65);-- data field
      bad_frame : boolean;  -- does this frame contain an error?
  end record;
  type frame_typ_ary is array (natural range <>) of frame_typ;

  ----------------------------------------------------------------------
  -- Stimulus - Frame data 
  ----------------------------------------------------------------------
  -- The following constant holds the stimulus for the testbench. It is 
  -- an ordered array of frames, with frame 0 the first to be injected 
  -- into the core receiver PHY interface by the testbench. 
  ----------------------------------------------------------------------
  constant frame_data : frame_typ_ary := (
   -------------
   -- Frame 0
   -------------
    0          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'),   -- 46th Byte of Data
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 1
   -------------
    1          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"80\", VALID => '1', ERROR => '0'), -- Length/Type = Type = 8000
       13      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), 
       60      => ( DATA => X\"2F\", VALID => '1', ERROR => '0'), -- 47th Data byte
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 2
   -------------
    2          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '1'), -- assert error here
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

       -- Error this frame
      bad_frame => true),


   -------------
   -- Frame 3
   -------------
   3          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"03\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 03
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), -- Therefore padding is required
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'), 
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Padding starts here
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false));



  ----------------------------------------------------------------------
  -- CRC engine 
  ----------------------------------------------------------------------
  function calc_crc (data : in std_logic_vector;
                     fcs  : in std_logic_vector)
  return std_logic_vector is   

     variable crc          : std_logic_vector(31 downto 0);
     variable crc_feedback : std_logic;     
  begin

    crc := not fcs;

    for I in 0 to 7 loop
      crc_feedback      := crc(0) xor data(I);

      crc(4 downto 0)   := crc(5 downto 1);
      crc(5)            := crc(6)  xor crc_feedback;
      crc(7 downto 6)   := crc(8 downto 7);
      crc(8)            := crc(9)  xor crc_feedback;
      crc(9)            := crc(10) xor crc_feedback;
      crc(14 downto 10) := crc(15 downto 11);
      crc(15)           := crc(16) xor crc_feedback;
      crc(18 downto 16) := crc(19 downto 17);
      crc(19)           := crc(20) xor crc_feedback;
      crc(20)           := crc(21) xor crc_feedback;
      crc(21)           := crc(22) xor crc_feedback;
      crc(22)           := crc(23);
      crc(23)           := crc(24) xor crc_feedback;
      crc(24)           := crc(25) xor crc_feedback;
      crc(25)           := crc(26);
      crc(26)           := crc(27) xor crc_feedback;
      crc(27)           := crc(28) xor crc_feedback;
      crc(28)           := crc(29);
      crc(29)           := crc(30) xor crc_feedback;
      crc(30)           := crc(31) xor crc_feedback;
      crc(31)           :=             crc_feedback;
    end loop; 
      
    -- return the CRC result                                  
    return not crc;

  end calc_crc;



  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B decoding
  ----------------------------------------------------------------------

  -- Decode the 8B10B code. No disparity verification is performed, just
  -- a simple table lookup.
  procedure decode_8b10b (
    constant d10  : in  std_logic_vector(0 to 9);
    variable q8   : out std_logic_vector(7 downto 0);
    variable is_k : out boolean) is
    variable k28 : boolean;
    variable d10_rev : std_logic_vector(9 downto 0);
  begin
    -- reverse the 10B codeword
    for i in 0 to 9 loop
      d10_rev(i) := d10(i);
    end loop;  -- i
    -- do the 6B5B decode
    case d10_rev(5 downto 0) is
      when \"000110\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"111001\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"010001\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"101110\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"010010\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"101101\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"100011\" =>
        q8(4 downto 0) := \"00011\";   --D.3
      when \"010100\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"101011\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"100101\" =>
        q8(4 downto 0) := \"00101\";   --D.5
      when \"100110\" =>
        q8(4 downto 0) := \"00110\";   --D.6
      when \"000111\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"111000\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"011000\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"100111\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"101001\" =>
        q8(4 downto 0) := \"01001\";   --D.9
      when \"101010\" =>
        q8(4 downto 0) := \"01010\";   --D.10
      when \"001011\" =>
        q8(4 downto 0) := \"01011\";   --D.11
      when \"101100\" =>
        q8(4 downto 0) := \"01100\";   --D.12
      when \"001101\" =>
        q8(4 downto 0) := \"01101\";   --D.13
      when \"001110\" =>
        q8(4 downto 0) := \"01110\";   --D.14
      when \"000101\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"111010\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"110110\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"001001\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"110001\" =>
        q8(4 downto 0) := \"10001\";   --D.17
      when \"110010\" =>
        q8(4 downto 0) := \"10010\";   --D.18
      when \"010011\" =>
        q8(4 downto 0) := \"10011\";   --D.19
      when \"110100\" =>
        q8(4 downto 0) := \"10100\";   --D.20
      when \"010101\" =>
        q8(4 downto 0) := \"10101\";   --D.21
      when \"010110\" =>
        q8(4 downto 0) := \"10110\";   --D.22
      when \"010111\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"101000\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"001100\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"110011\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"011001\" =>
        q8(4 downto 0) := \"11001\";   --D.25
      when \"011010\" =>
        q8(4 downto 0) := \"11010\";   --D.26
      when \"011011\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"100100\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"011100\" =>
        q8(4 downto 0) := \"11100\";   --D.28
      when \"111100\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"000011\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"011101\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"100010\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"011110\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"100001\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"110101\" =>
        q8(4 downto 0) := \"11111\";   --D.31
      when \"001010\" =>
        q8(4 downto 0) := \"11111\";   --D.31
        
      when others   =>
        q8(4 downto 0) := \"11110\";  --CODE VIOLATION - return /E/
    end case;

    k28 := not((d10(2) OR d10(3) OR d10(4) OR d10(5)
                OR NOT(d10(8) XOR d10(9)))) = '1';
    
    -- do the 4B3B decode
    case d10_rev(9 downto 6) is
      when \"0010\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1101\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1001\" =>
        if not k28 then
          q8(7 downto 5) := \"001\";     --D/K.x.1
        else
          q8(7 downto 5) := \"110\";     --K28.6
        end if;
      when \"0110\" =>
        if k28 then
          q8(7 downto 5) := \"001\";     --K.28.1
        else
          q8(7 downto 5) := \"110\";     --D/K.x.6
        end if;
      when \"1010\" =>
        if not k28 then
          q8(7 downto 5) := \"010\";     --D/K.x.2
        else
          q8(7 downto 5) := \"101\";     --K28.5
        end if;
      when \"0101\" =>
        if k28 then
          q8(7 downto 5) := \"010\";     --K28.2
        else
          q8(7 downto 5) := \"101\";     --D/K.x.5
        end if;
      when \"0011\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"1100\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"0100\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"1011\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"0111\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1000\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1110\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7
      when \"0001\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7

      when others =>
        q8(7 downto 5) := \"111\";   --CODE VIOLATION - return /E/
    end case;

    is_k := ((d10(2) and d10(3) and d10(4) and d10(5))
            or not (d10(2) or d10(3) or d10(4) or d10(5))
            or ((d10(4) xor d10(5))
              and ((d10(5) and d10(7) and d10(8) and d10(9))
                or not(d10(5) or d10(7) or d10(8) or d10(9))))) = '1' ;
  end decode_8b10b;


  
  ----------------------------------------------------------------------
  -- Procedure to perform comma detection
  ----------------------------------------------------------------------

  function is_comma (
    constant codegroup : in std_logic_vector(0 to 9))
    return boolean is
  begin  -- is_comma
    case codegroup(0 to 6) is
      when \"0011111\" =>
        return true;
      when \"1100000\" =>
        return true;
      when others =>
        return false;
    end case;
  end is_comma;


  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B encoding
  ----------------------------------------------------------------------

  procedure encode_8b10b (
    constant d8                : in  std_logic_vector(7 downto 0);
    constant is_k              : in  boolean;
    variable q10               : out std_logic_vector(0 to 9);
    constant disparity_pos_in  : in  boolean;
    variable disparity_pos_out : out boolean) is
    variable b6                       : std_logic_vector(5 downto 0);
    variable b4                       : std_logic_vector(3 downto 0);
    variable k28, pdes6, a7, l13, l31 : boolean;
    variable a, b, c, d, e            : boolean;
  begin  -- encode_8b10b
    -- precalculate some common terms
    a := d8(0) = '1';
    b := d8(1) = '1';
    c := d8(2) = '1';
    d := d8(3) = '1';
    e := d8(4) = '1';

    k28 := is_k and d8(4 downto 0) = \"11100\";
    l13 := (((a xor b) and not (c or d))
            or ((c xor d) and not(a or b)));

    l31 := (((a xor b) and (c and d))
             or
             ((c xor d) and (a and b)));

    a7 := is_k or ((l31 and d and not e and disparity_pos_in)
                   or (l13 and not d and e and not disparity_pos_in));

    -- Do the 5B/6B conversion (calculate the 6b symbol)
    if k28 then                         --K.28
      if not disparity_pos_in then
        b6 := \"111100\";
      else
        b6 := \"000011\";
      end if;
    else
      case d8(4 downto 0) is
        when \"00000\" =>                 --D.0
          if disparity_pos_in then
            b6 := \"000110\";
          else
            b6 := \"111001\";
          end if;
        when \"00001\" =>                 --D.1
          if disparity_pos_in then
            b6 := \"010001\";
          else
            b6 := \"101110\";
          end if;
        when \"00010\" =>                 --D.2
          if disparity_pos_in then
            b6 := \"010010\";
          else
            b6 := \"101101\";
          end if;
        when \"00011\" =>
          b6 := \"100011\";               --D.3
        when \"00100\" =>                 --D.4
          if disparity_pos_in then
            b6 := \"010100\";
          else
            b6 := \"101011\";
          end if;
        when \"00101\" =>
          b6 := \"100101\";               --D.5
        when \"00110\" =>
          b6 := \"100110\";               --D.6
        when \"00111\" =>                 --D.7   
          if not disparity_pos_in then
            b6 := \"000111\";
          else
            b6 := \"111000\";
          end if;
        when \"01000\" =>                 --D.8
          if disparity_pos_in then
            b6 := \"011000\";
          else
            b6 := \"100111\";
          end if;
        when \"01001\" =>
          b6 := \"101001\";               --D.9
        when \"01010\" =>
          b6 := \"101010\";               --D.10
        when \"01011\" =>
          b6 := \"001011\";               --D.11
        when \"01100\" =>
          b6 := \"101100\";               --D.12
        when \"01101\" =>
          b6 := \"001101\";               --D.13
        when \"01110\" =>
          b6 := \"001110\";               --D.14
        when \"01111\" =>                 --D.15
          if disparity_pos_in then
            b6 := \"000101\";
          else
            b6 := \"111010\";
          end if;
        when \"10000\" =>                 --D.16
          if not disparity_pos_in then
            b6 := \"110110\";
          else
            b6 := \"001001\";
          end if;
        when \"10001\" =>
          b6 := \"110001\";               --D.17
        when \"10010\" =>
          b6 := \"110010\";               --D.18
        when \"10011\" =>
          b6 := \"010011\";               --D.19
        when \"10100\" =>
          b6 := \"110100\";               --D.20
        when \"10101\" =>
          b6 := \"010101\";               --D.21
        when \"10110\" =>
          b6 := \"010110\";               --D.22
        when \"10111\" =>                 --D/K.23
          if not disparity_pos_in then
            b6 := \"010111\";
          else
            b6 := \"101000\";
          end if;
        when \"11000\" =>                 --D.24
          if disparity_pos_in then
            b6 := \"001100\";
          else
            b6 := \"110011\";
          end if;
        when \"11001\" =>
          b6 := \"011001\";               --D.25
        when \"11010\" =>
          b6 := \"011010\";               --D.26
        when \"11011\" =>                 --D/K.27
          if not disparity_pos_in then
            b6 := \"011011\";
          else
            b6 := \"100100\";
          end if;
        when \"11100\" =>
          b6 := \"011100\";               --D.28
        when \"11101\" =>                 --D/K.29
          if not disparity_pos_in then
            b6 := \"011101\";
          else
            b6 := \"100010\";
          end if;
        when \"11110\" =>                 --D/K.30
          if not disparity_pos_in then
            b6 := \"011110\";
          else
            b6 := \"100001\";
          end if;
        when \"11111\" =>                 --D.31
          if not disparity_pos_in then
            b6 := \"110101\";
          else
            b6 := \"001010\";
          end if;
        when others =>
          b6 := \"XXXXXX\";
      end case;
    end if;

    -- reverse the bits
    for i in 0 to 5 loop
      q10(i) := b6(i);
    end loop;  -- i

    -- calculate the running disparity after the 5B6B block encode
    if k28 then
      pdes6 := not disparity_pos_in;
    else
      case d8(4 downto 0) is
        when \"00000\" => pdes6 := not disparity_pos_in;
        when \"00001\" => pdes6 := not disparity_pos_in;
        when \"00010\" => pdes6 := not disparity_pos_in;
        when \"00011\" => pdes6 := disparity_pos_in;
        when \"00100\" => pdes6 := not disparity_pos_in;
        when \"00101\" => pdes6 := disparity_pos_in;
        when \"00110\" => pdes6 := disparity_pos_in;
        when \"00111\" => pdes6 := disparity_pos_in;

        when \"01000\" => pdes6 := not disparity_pos_in;
        when \"01001\" => pdes6 := disparity_pos_in;
        when \"01010\" => pdes6 := disparity_pos_in;
        when \"01011\" => pdes6 := disparity_pos_in;
        when \"01100\" => pdes6 := disparity_pos_in;
        when \"01101\" => pdes6 := disparity_pos_in;
        when \"01110\" => pdes6 := disparity_pos_in;
        when \"01111\" => pdes6 := not disparity_pos_in;

        when \"10000\" => pdes6 := not disparity_pos_in;
        when \"10001\" => pdes6 := disparity_pos_in;
        when \"10010\" => pdes6 := disparity_pos_in;
        when \"10011\" => pdes6 := disparity_pos_in;
        when \"10100\" => pdes6 := disparity_pos_in;
        when \"10101\" => pdes6 := disparity_pos_in;
        when \"10110\" => pdes6 := disparity_pos_in;
        when \"10111\" => pdes6 := not disparity_pos_in;

        when \"11000\" => pdes6 := not disparity_pos_in;
        when \"11001\" => pdes6 := disparity_pos_in;
        when \"11010\" => pdes6 := disparity_pos_in;
        when \"11011\" => pdes6 := not disparity_pos_in;
        when \"11100\" => pdes6 := disparity_pos_in;
        when \"11101\" => pdes6 := not disparity_pos_in;
        when \"11110\" => pdes6 := not disparity_pos_in;
        when \"11111\" => pdes6 := not disparity_pos_in;
        when others  => pdes6 := disparity_pos_in;
      end case;
    end if;

    case d8(7 downto 5) is
      when \"000\" =>                     --D/K.x.0
        if pdes6 then
          b4 := \"0010\";
        else
          b4 := \"1101\";
        end if;
      when \"001\" =>                     --D/K.x.1
        if k28 and not pdes6 then
          b4 := \"0110\";
        else
          b4 := \"1001\";
        end if;
      when \"010\" =>                     --D/K.x.2
        if k28 and not pdes6 then
          b4 := \"0101\";
        else
          b4 := \"1010\";
        end if;
      when \"011\" =>                     --D/K.x.3
        if not pdes6 then
          b4 := \"0011\";
        else
          b4 := \"1100\";
        end if;
      when \"100\" =>                     --D/K.x.4
        if pdes6 then
          b4 := \"0100\";
        else
          b4 := \"1011\";
        end if;
      when \"101\" =>                     --D/K.x.5
        if k28 and not pdes6 then
          b4 := \"1010\";
        else
          b4 := \"0101\";
        end if;
      when \"110\" =>                     --D/K.x.6
        if k28 and not pdes6 then
          b4 := \"1001\";
        else
          b4 := \"0110\";
        end if;
      when \"111\" =>                     --D.x.P7
        if not a7 then
          if not pdes6 then
            b4 := \"0111\";
          else
            b4 := \"1000\";
          end if;
        else                            --D/K.y.A7
          if not pdes6 then
            b4 := \"1110\";
          else
            b4 := \"0001\";
          end if;
        end if;
      when others =>
        b4 := \"XXXX\";
    end case;

    -- Reverse the bits
    for i in 0 to 3 loop
      q10(i+6) := b4(i);
    end loop;  -- i

    -- Calculate the running disparity after the 4B group
    case d8(7 downto 5) is
      when \"000\"  =>
        disparity_pos_out := not pdes6;
      when \"001\"  =>
        disparity_pos_out := pdes6;
      when \"010\"  =>
        disparity_pos_out := pdes6;
      when \"011\"  =>
        disparity_pos_out := pdes6;
      when \"100\"  =>
        disparity_pos_out := not pdes6;
      when \"101\"  =>
        disparity_pos_out := pdes6;
      when \"110\"  =>
        disparity_pos_out := pdes6;
      when \"111\"  =>
        disparity_pos_out := not pdes6;
      when others =>
        disparity_pos_out := pdes6;
    end case;
    
  end encode_8b10b;



  ----------------------------------------------------------------------
  -- testbench signals and constants
  ----------------------------------------------------------------------

  -- Unit Interval for Gigabit Ethernet
  constant UI  : time := 800 ps;

  -- testbench clocks and sampling
  signal bitclock             : std_logic;   -- clock running at RocketIO serial frequency
  signal stim_rx_sample       : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 
  signal mon_tx_sample        : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 

  -- signals for the Tx monitor following 8B10B decode
  signal tx_pdata       : std_logic_vector(7 downto 0);  
  signal tx_is_k        : std_logic;

  -- signals for the Rx stimulus prior to 8B10B encode
  signal rx_pdata       : std_logic_vector(7 downto 0) := \"10111100\";
  signal rx_is_k        : boolean := true;
  signal rx_even        : std_logic := '1'; -- Keep track of the even/odd position
  signal rx_rundisp_pos : boolean := false; -- Indicates +ve running disparity

  -- testbench control signals
  signal current_speed       : string(1 to 6) := \"1gig  \";


  
"
tm "FcArchDeclTextMgr"
)
associable 1
)
archConcurrentStatementBlock *325 (BiTextGroup
uid 920,0
stg "VerticalLayoutStrategy"
first (Text
uid 921,0
va (VaSet
font "courier,8,1"
)
xt "-90000,823850,-79000,824750"
st "Concurrent Statements"
blo "-90000,824550"
)
second (MLText
uid 922,0
va (VaSet
font "courier,8,0"
)
xt "-90000,824750,-54500,837350"
st "
----------------------------------------------------------------------
-- Simulus processes
--------------------
-- Send four frames through the MAC and Design Example
--      -- frame 0 = minimum length frame
--      -- frame 1 = type frame
--      -- frame 2 = errored frame
--      -- frame 3 = padded frame
----------------------------------------------------------------------
-- sample on every clock
stim_rx_sample <= '1'; 
-- sample on every clock
mon_tx_sample <= '1';
"
tm "FcArchConcStmtTextMgr"
)
associable 1
)
processDeclarativeBlock *326 (BiTextGroup
uid 923,0
stg "VerticalLayoutStrategy"
first (Text
uid 924,0
va (VaSet
font "courier,8,1"
)
xt "-90000,847150,-79500,848050"
st "Process Declarations"
blo "-90000,847850"
)
second (MLText
uid 925,0
va (VaSet
font "courier,8,0"
)
xt "-90000,848050,-53500,899350"
st "
    variable current_col : natural := 0;  -- Column counter within frame
    variable fcs         : std_logic_vector(31 downto 0);    

-- A procedure to create an Idle /I1/ code group
procedure send_I1 is
begin  
 rx_pdata  <= X\"BC\";  -- /K28.5/
 rx_is_k   <= true;
 wait until clk125m'event and clk125m = '1';
 rx_pdata  <= X\"C5\";  -- /D5.6/
 rx_is_k   <= false;
 wait until clk125m'event and clk125m = '1';
end send_I1;

-- A procedure to create an Idle /I2/ code group
procedure send_I2 is
begin  
 rx_pdata  <= X\"BC\";  -- /K28.5/
 rx_is_k   <= true;
 wait until clk125m'event and clk125m = '1';
 rx_pdata  <= X\"50\";  -- /D16.2/
 rx_is_k   <= false;
 wait until clk125m'event and clk125m = '1';
end send_I2;

-- A procedure to create a Start of Packet /S/ code group 
procedure send_S is
begin  
 rx_pdata  <= X\"FB\";  -- /K27.7/
 rx_is_k   <= true;
 wait until clk125m'event and clk125m = '1';
end send_S;

-- A procedure to create a Terminate /T/ code group 
procedure send_T is
begin  
 rx_pdata  <= X\"FD\";  -- /K29.7/
 rx_is_k   <= true;
 wait until clk125m'event and clk125m = '1';
end send_T;

-- A procedure to create a Carrier Extend /R/ code group 
procedure send_R is
begin  
 rx_pdata  <= X\"F7\";  -- /K23.7/
 rx_is_k   <= true;
 wait until clk125m'event and clk125m = '1';
end send_R;

 -- A procedure to create an Error Propogation /V/ code group 
 procedure send_V is
 begin  
   rx_pdata  <= X\"FE\";  -- /K30.7/
   rx_is_k   <= true;
 end send_V;

"
tm "FcProcDeclTextMgr"
)
associable 1
)
sensitivityListBlock *327 (BiTextGroup
uid 926,0
stg "VerticalLayoutStrategy"
first (Text
uid 927,0
va (VaSet
font "courier,8,1"
)
xt "-90000,841350,-81500,842250"
st "Sensitivity List"
blo "-90000,842050"
)
second (MLText
uid 928,0
va (VaSet
font "courier,8,0"
)
xt "-90000,842250,-83000,843150"
tm "FcSensListTextMgr"
)
)
)
genChar (FcGenChar
uid 940,0
machineMode 1
resetActions ""
resetMode 1
resetName ""
resetCondition ""
vlogResetSensitivity ""
resetPolarity 0
clockPolarity 0
clockSigName ""
clockCondition ""
verilogProcessStatementType 0
verilogBlockType 0
instrumentForAnimation 0
insertSetResetPragma 0
setresetPragma 0
)
name "p_stimulus"
)
*328 (ConcurrentFC
uid 1764,0
topDiagram (FlowDiagram
LanguageMgr "None"
uid 1765,0
optionalChildren [
*329 (StartPoint
uid 1790,0
optionalChildren [
*330 (CommentText
uid 1795,0
ps "EdgeToEdgeStrategy"
shape (Rectangle
uid 1796,0
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "13000,13000,28000,17000"
)
text (MLText
uid 1797,0
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "13200,13200,27200,16800"
st "



   A process to keep track of the even/odd code group position for the
   injected receiver code groups.
  
"
tm "CommentText"
wrapOption 3
visibleHeight 4000
visibleWidth 15000
)
included 1
)
]
shape (RoundedRectangle
uid 1791,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,12000,13000,14000"
radius 400
)
label (Text
uid 1792,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "8500,12500,11500,13500"
st "Start"
ju 0
blo "10000,13300"
)
outConnect (FlowConnect
uid 1793,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1794,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,13500,10500,14500"
)
direction 1
position 1
)
)
*331 (WaitBox
uid 1798,0
shape (Octagon
uid 1799,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,18000,11000,20000"
)
name (TextAssociate
uid 1800,0
ps "CenterOffsetStrategy"
text (Text
uid 1801,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,17050,10000,17950"
st "w0"
blo "9000,17750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1802,0
ps "CenterOffsetStrategy"
text (MLText
uid 1803,0
va (VaSet
font "courier,8,0"
)
xt "11250,18550,33550,19450"
st "wait until clk125m'event and clk125m = '1';
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 1804,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1805,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,17500,10500,18500"
)
direction 0
)
outConnect (FlowConnect
uid 1806,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1807,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,19500,10500,20500"
)
direction 1
position 1
)
)
*332 (ActionBox
uid 1810,0
shape (Rectangle
uid 1811,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "3500,23050,16500,24950"
)
name (TextAssociate
uid 1812,0
ps "CenterOffsetStrategy"
text (Text
uid 1813,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "3500,22100,4500,23000"
st "a0"
blo "3500,22800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1814,0
ps "CenterOffsetStrategy"
text (MLText
uid 1815,0
va (VaSet
font "courier,8,0"
)
xt "4000,23550,16000,24450"
st "rx_even <= not rx_even;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1816,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1817,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,22550,10500,23550"
)
direction 0
)
outConnect (FlowConnect
uid 1818,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1819,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,24450,10500,25450"
)
direction 1
position 1
)
)
*333 (EndPoint
uid 1822,0
shape (RoundedRectangle
uid 1823,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,28000,13000,30000"
radius 400
)
label (Text
uid 1824,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "9100,28500,10900,29500"
st "End"
ju 0
blo "10000,29300"
)
inConnect (FlowConnect
uid 1825,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1826,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,27500,10500,28500"
)
direction 0
)
)
*334 (Flow
uid 1808,0
shape (OrthoPolyLine
uid 1809,0
va (VaSet
vasetType 3
)
xt "10000,14000,10000,18000"
pts [
"10000,14000"
"10000,18000"
]
arrow 1
)
start &329
end &331
)
*335 (Flow
uid 1820,0
shape (OrthoPolyLine
uid 1821,0
va (VaSet
vasetType 3
)
xt "10000,20000,10000,23050"
pts [
"10000,20000"
"10000,23050"
]
arrow 1
)
start &331
end &332
)
*336 (Flow
uid 1827,0
shape (OrthoPolyLine
uid 1828,0
va (VaSet
vasetType 3
)
xt "10000,24950,10000,28000"
pts [
"10000,24950"
"10000,28000"
]
arrow 1
)
start &332
end &333
)
]
bg "65535,65535,65535"
grid (Grid
origin "0,0"
isVisible 0
isActive 1
xSpacing 1000
xySpacing 1000
xShown 1
yShown 1
color "26368,26368,26368"
)
packageList *337 (PackageList
uid 1778,0
stg "VerticalLayoutStrategy"
textVec [
*338 (Text
uid 1779,0
va (VaSet
font "courier,8,1"
)
xt "-67275,4050,-60775,4950"
st "Package List"
blo "-67275,4750"
)
*339 (MLText
uid 1780,0
va (VaSet
font "courier,8,0"
)
xt "-67275,4950,-50775,8550"
tm "FcPackageListTextMgr"
)
]
)
compDirBlock (MlTextGroup
uid 1781,0
stg "VerticalLayoutStrategy"
textVec [
*340 (Text
uid 1782,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-52275,4500,-42275,5400"
st "Compiler Directives"
blo "-52275,5200"
)
*341 (Text
uid 1783,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-52275,5400,-40775,6300"
st "Pre-module directives:"
blo "-52275,6100"
)
*342 (MLText
uid 1784,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-52275,6300,-42175,8100"
st "`resetall
`timescale 1ns/10ps"
tm "FcCompilerDirectivesTextMgr"
)
*343 (Text
uid 1785,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-52275,8100,-40275,9000"
st "Post-module directives:"
blo "-52275,8800"
)
*344 (MLText
uid 1786,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-52275,4500,-52275,4500"
tm "FcCompilerDirectivesTextMgr"
)
*345 (Text
uid 1787,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-52275,9000,-40775,9900"
st "End-module directives:"
blo "-52275,9700"
)
*346 (MLText
uid 1788,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-52275,9900,-52275,9900"
tm "FcCompilerDirectivesTextMgr"
)
]
associable 1
)
windowSize "0,0,1015,690"
viewArea "0,0,0,0"
cachedDiagramExtent "0,0,0,0"
pageBreakOrigin "0,0"
isTopLevel 1
defaultCommentText (CommentText
shape (Rectangle
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "0,0,15000,5000"
)
text (MLText
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "200,200,2200,1100"
st "
Text
"
tm "CommentText"
wrapOption 3
visibleHeight 4600
visibleWidth 14600
)
)
defaultPanel (Panel
shape (RectFrame
va (VaSet
vasetType 1
fg "65535,65535,65535"
lineColor "32768,0,0"
lineWidth 3
)
xt "0,0,20000,20000"
)
title (TextAssociate
ps "TopLeftStrategy"
text (Text
va (VaSet
font "courier,8,1"
)
xt "1000,1000,4000,1900"
st "Panel0"
blo "1000,1700"
tm "PanelText"
)
)
)
archDeclarativeBlock *347 (BiTextGroup
uid 1766,0
stg "VerticalLayoutStrategy"
first (Text
uid 1767,0
va (VaSet
font "courier,8,1"
)
xt "-72275,10750,-59275,11650"
st "Architecture Declarations"
blo "-72275,11450"
)
second (MLText
uid 1768,0
va (VaSet
font "courier,8,0"
)
xt "-72275,11650,-4275,819850"
st "

  
  ----------------------------------------------------------------------
  -- types to support frame data
  ----------------------------------------------------------------------
  -- Tx Data and Data_valid record
  type data_typ is record
      data : bit_vector(7 downto 0);  -- data
      valid : bit;                    -- data_valid
      error : bit;                    -- data_error
  end record;
  type frame_of_data_typ is array (natural range <>) of data_typ;

  -- Tx Data, Data_valid and underrun record
  type frame_typ is record
      columns   : frame_of_data_typ(0 to 65);-- data field
      bad_frame : boolean;  -- does this frame contain an error?
  end record;
  type frame_typ_ary is array (natural range <>) of frame_typ;

  ----------------------------------------------------------------------
  -- Stimulus - Frame data 
  ----------------------------------------------------------------------
  -- The following constant holds the stimulus for the testbench. It is 
  -- an ordered array of frames, with frame 0 the first to be injected 
  -- into the core receiver PHY interface by the testbench. 
  ----------------------------------------------------------------------
  constant frame_data : frame_typ_ary := (
   -------------
   -- Frame 0
   -------------
    0          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'),   -- 46th Byte of Data
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 1
   -------------
    1          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"80\", VALID => '1', ERROR => '0'), -- Length/Type = Type = 8000
       13      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), 
       60      => ( DATA => X\"2F\", VALID => '1', ERROR => '0'), -- 47th Data byte
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 2
   -------------
    2          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '1'), -- assert error here
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

       -- Error this frame
      bad_frame => true),


   -------------
   -- Frame 3
   -------------
   3          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"03\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 03
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), -- Therefore padding is required
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'), 
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Padding starts here
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false));



  ----------------------------------------------------------------------
  -- CRC engine 
  ----------------------------------------------------------------------
  function calc_crc (data : in std_logic_vector;
                     fcs  : in std_logic_vector)
  return std_logic_vector is   

     variable crc          : std_logic_vector(31 downto 0);
     variable crc_feedback : std_logic;     
  begin

    crc := not fcs;

    for I in 0 to 7 loop
      crc_feedback      := crc(0) xor data(I);

      crc(4 downto 0)   := crc(5 downto 1);
      crc(5)            := crc(6)  xor crc_feedback;
      crc(7 downto 6)   := crc(8 downto 7);
      crc(8)            := crc(9)  xor crc_feedback;
      crc(9)            := crc(10) xor crc_feedback;
      crc(14 downto 10) := crc(15 downto 11);
      crc(15)           := crc(16) xor crc_feedback;
      crc(18 downto 16) := crc(19 downto 17);
      crc(19)           := crc(20) xor crc_feedback;
      crc(20)           := crc(21) xor crc_feedback;
      crc(21)           := crc(22) xor crc_feedback;
      crc(22)           := crc(23);
      crc(23)           := crc(24) xor crc_feedback;
      crc(24)           := crc(25) xor crc_feedback;
      crc(25)           := crc(26);
      crc(26)           := crc(27) xor crc_feedback;
      crc(27)           := crc(28) xor crc_feedback;
      crc(28)           := crc(29);
      crc(29)           := crc(30) xor crc_feedback;
      crc(30)           := crc(31) xor crc_feedback;
      crc(31)           :=             crc_feedback;
    end loop; 
      
    -- return the CRC result                                  
    return not crc;

  end calc_crc;



  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B decoding
  ----------------------------------------------------------------------

  -- Decode the 8B10B code. No disparity verification is performed, just
  -- a simple table lookup.
  procedure decode_8b10b (
    constant d10  : in  std_logic_vector(0 to 9);
    variable q8   : out std_logic_vector(7 downto 0);
    variable is_k : out boolean) is
    variable k28 : boolean;
    variable d10_rev : std_logic_vector(9 downto 0);
  begin
    -- reverse the 10B codeword
    for i in 0 to 9 loop
      d10_rev(i) := d10(i);
    end loop;  -- i
    -- do the 6B5B decode
    case d10_rev(5 downto 0) is
      when \"000110\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"111001\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"010001\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"101110\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"010010\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"101101\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"100011\" =>
        q8(4 downto 0) := \"00011\";   --D.3
      when \"010100\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"101011\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"100101\" =>
        q8(4 downto 0) := \"00101\";   --D.5
      when \"100110\" =>
        q8(4 downto 0) := \"00110\";   --D.6
      when \"000111\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"111000\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"011000\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"100111\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"101001\" =>
        q8(4 downto 0) := \"01001\";   --D.9
      when \"101010\" =>
        q8(4 downto 0) := \"01010\";   --D.10
      when \"001011\" =>
        q8(4 downto 0) := \"01011\";   --D.11
      when \"101100\" =>
        q8(4 downto 0) := \"01100\";   --D.12
      when \"001101\" =>
        q8(4 downto 0) := \"01101\";   --D.13
      when \"001110\" =>
        q8(4 downto 0) := \"01110\";   --D.14
      when \"000101\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"111010\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"110110\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"001001\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"110001\" =>
        q8(4 downto 0) := \"10001\";   --D.17
      when \"110010\" =>
        q8(4 downto 0) := \"10010\";   --D.18
      when \"010011\" =>
        q8(4 downto 0) := \"10011\";   --D.19
      when \"110100\" =>
        q8(4 downto 0) := \"10100\";   --D.20
      when \"010101\" =>
        q8(4 downto 0) := \"10101\";   --D.21
      when \"010110\" =>
        q8(4 downto 0) := \"10110\";   --D.22
      when \"010111\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"101000\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"001100\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"110011\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"011001\" =>
        q8(4 downto 0) := \"11001\";   --D.25
      when \"011010\" =>
        q8(4 downto 0) := \"11010\";   --D.26
      when \"011011\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"100100\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"011100\" =>
        q8(4 downto 0) := \"11100\";   --D.28
      when \"111100\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"000011\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"011101\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"100010\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"011110\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"100001\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"110101\" =>
        q8(4 downto 0) := \"11111\";   --D.31
      when \"001010\" =>
        q8(4 downto 0) := \"11111\";   --D.31
        
      when others   =>
        q8(4 downto 0) := \"11110\";  --CODE VIOLATION - return /E/
    end case;

    k28 := not((d10(2) OR d10(3) OR d10(4) OR d10(5)
                OR NOT(d10(8) XOR d10(9)))) = '1';
    
    -- do the 4B3B decode
    case d10_rev(9 downto 6) is
      when \"0010\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1101\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1001\" =>
        if not k28 then
          q8(7 downto 5) := \"001\";     --D/K.x.1
        else
          q8(7 downto 5) := \"110\";     --K28.6
        end if;
      when \"0110\" =>
        if k28 then
          q8(7 downto 5) := \"001\";     --K.28.1
        else
          q8(7 downto 5) := \"110\";     --D/K.x.6
        end if;
      when \"1010\" =>
        if not k28 then
          q8(7 downto 5) := \"010\";     --D/K.x.2
        else
          q8(7 downto 5) := \"101\";     --K28.5
        end if;
      when \"0101\" =>
        if k28 then
          q8(7 downto 5) := \"010\";     --K28.2
        else
          q8(7 downto 5) := \"101\";     --D/K.x.5
        end if;
      when \"0011\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"1100\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"0100\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"1011\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"0111\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1000\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1110\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7
      when \"0001\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7

      when others =>
        q8(7 downto 5) := \"111\";   --CODE VIOLATION - return /E/
    end case;

    is_k := ((d10(2) and d10(3) and d10(4) and d10(5))
            or not (d10(2) or d10(3) or d10(4) or d10(5))
            or ((d10(4) xor d10(5))
              and ((d10(5) and d10(7) and d10(8) and d10(9))
                or not(d10(5) or d10(7) or d10(8) or d10(9))))) = '1' ;
  end decode_8b10b;


  
  ----------------------------------------------------------------------
  -- Procedure to perform comma detection
  ----------------------------------------------------------------------

  function is_comma (
    constant codegroup : in std_logic_vector(0 to 9))
    return boolean is
  begin  -- is_comma
    case codegroup(0 to 6) is
      when \"0011111\" =>
        return true;
      when \"1100000\" =>
        return true;
      when others =>
        return false;
    end case;
  end is_comma;


  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B encoding
  ----------------------------------------------------------------------

  procedure encode_8b10b (
    constant d8                : in  std_logic_vector(7 downto 0);
    constant is_k              : in  boolean;
    variable q10               : out std_logic_vector(0 to 9);
    constant disparity_pos_in  : in  boolean;
    variable disparity_pos_out : out boolean) is
    variable b6                       : std_logic_vector(5 downto 0);
    variable b4                       : std_logic_vector(3 downto 0);
    variable k28, pdes6, a7, l13, l31 : boolean;
    variable a, b, c, d, e            : boolean;
  begin  -- encode_8b10b
    -- precalculate some common terms
    a := d8(0) = '1';
    b := d8(1) = '1';
    c := d8(2) = '1';
    d := d8(3) = '1';
    e := d8(4) = '1';

    k28 := is_k and d8(4 downto 0) = \"11100\";
    l13 := (((a xor b) and not (c or d))
            or ((c xor d) and not(a or b)));

    l31 := (((a xor b) and (c and d))
             or
             ((c xor d) and (a and b)));

    a7 := is_k or ((l31 and d and not e and disparity_pos_in)
                   or (l13 and not d and e and not disparity_pos_in));

    -- Do the 5B/6B conversion (calculate the 6b symbol)
    if k28 then                         --K.28
      if not disparity_pos_in then
        b6 := \"111100\";
      else
        b6 := \"000011\";
      end if;
    else
      case d8(4 downto 0) is
        when \"00000\" =>                 --D.0
          if disparity_pos_in then
            b6 := \"000110\";
          else
            b6 := \"111001\";
          end if;
        when \"00001\" =>                 --D.1
          if disparity_pos_in then
            b6 := \"010001\";
          else
            b6 := \"101110\";
          end if;
        when \"00010\" =>                 --D.2
          if disparity_pos_in then
            b6 := \"010010\";
          else
            b6 := \"101101\";
          end if;
        when \"00011\" =>
          b6 := \"100011\";               --D.3
        when \"00100\" =>                 --D.4
          if disparity_pos_in then
            b6 := \"010100\";
          else
            b6 := \"101011\";
          end if;
        when \"00101\" =>
          b6 := \"100101\";               --D.5
        when \"00110\" =>
          b6 := \"100110\";               --D.6
        when \"00111\" =>                 --D.7   
          if not disparity_pos_in then
            b6 := \"000111\";
          else
            b6 := \"111000\";
          end if;
        when \"01000\" =>                 --D.8
          if disparity_pos_in then
            b6 := \"011000\";
          else
            b6 := \"100111\";
          end if;
        when \"01001\" =>
          b6 := \"101001\";               --D.9
        when \"01010\" =>
          b6 := \"101010\";               --D.10
        when \"01011\" =>
          b6 := \"001011\";               --D.11
        when \"01100\" =>
          b6 := \"101100\";               --D.12
        when \"01101\" =>
          b6 := \"001101\";               --D.13
        when \"01110\" =>
          b6 := \"001110\";               --D.14
        when \"01111\" =>                 --D.15
          if disparity_pos_in then
            b6 := \"000101\";
          else
            b6 := \"111010\";
          end if;
        when \"10000\" =>                 --D.16
          if not disparity_pos_in then
            b6 := \"110110\";
          else
            b6 := \"001001\";
          end if;
        when \"10001\" =>
          b6 := \"110001\";               --D.17
        when \"10010\" =>
          b6 := \"110010\";               --D.18
        when \"10011\" =>
          b6 := \"010011\";               --D.19
        when \"10100\" =>
          b6 := \"110100\";               --D.20
        when \"10101\" =>
          b6 := \"010101\";               --D.21
        when \"10110\" =>
          b6 := \"010110\";               --D.22
        when \"10111\" =>                 --D/K.23
          if not disparity_pos_in then
            b6 := \"010111\";
          else
            b6 := \"101000\";
          end if;
        when \"11000\" =>                 --D.24
          if disparity_pos_in then
            b6 := \"001100\";
          else
            b6 := \"110011\";
          end if;
        when \"11001\" =>
          b6 := \"011001\";               --D.25
        when \"11010\" =>
          b6 := \"011010\";               --D.26
        when \"11011\" =>                 --D/K.27
          if not disparity_pos_in then
            b6 := \"011011\";
          else
            b6 := \"100100\";
          end if;
        when \"11100\" =>
          b6 := \"011100\";               --D.28
        when \"11101\" =>                 --D/K.29
          if not disparity_pos_in then
            b6 := \"011101\";
          else
            b6 := \"100010\";
          end if;
        when \"11110\" =>                 --D/K.30
          if not disparity_pos_in then
            b6 := \"011110\";
          else
            b6 := \"100001\";
          end if;
        when \"11111\" =>                 --D.31
          if not disparity_pos_in then
            b6 := \"110101\";
          else
            b6 := \"001010\";
          end if;
        when others =>
          b6 := \"XXXXXX\";
      end case;
    end if;

    -- reverse the bits
    for i in 0 to 5 loop
      q10(i) := b6(i);
    end loop;  -- i

    -- calculate the running disparity after the 5B6B block encode
    if k28 then
      pdes6 := not disparity_pos_in;
    else
      case d8(4 downto 0) is
        when \"00000\" => pdes6 := not disparity_pos_in;
        when \"00001\" => pdes6 := not disparity_pos_in;
        when \"00010\" => pdes6 := not disparity_pos_in;
        when \"00011\" => pdes6 := disparity_pos_in;
        when \"00100\" => pdes6 := not disparity_pos_in;
        when \"00101\" => pdes6 := disparity_pos_in;
        when \"00110\" => pdes6 := disparity_pos_in;
        when \"00111\" => pdes6 := disparity_pos_in;

        when \"01000\" => pdes6 := not disparity_pos_in;
        when \"01001\" => pdes6 := disparity_pos_in;
        when \"01010\" => pdes6 := disparity_pos_in;
        when \"01011\" => pdes6 := disparity_pos_in;
        when \"01100\" => pdes6 := disparity_pos_in;
        when \"01101\" => pdes6 := disparity_pos_in;
        when \"01110\" => pdes6 := disparity_pos_in;
        when \"01111\" => pdes6 := not disparity_pos_in;

        when \"10000\" => pdes6 := not disparity_pos_in;
        when \"10001\" => pdes6 := disparity_pos_in;
        when \"10010\" => pdes6 := disparity_pos_in;
        when \"10011\" => pdes6 := disparity_pos_in;
        when \"10100\" => pdes6 := disparity_pos_in;
        when \"10101\" => pdes6 := disparity_pos_in;
        when \"10110\" => pdes6 := disparity_pos_in;
        when \"10111\" => pdes6 := not disparity_pos_in;

        when \"11000\" => pdes6 := not disparity_pos_in;
        when \"11001\" => pdes6 := disparity_pos_in;
        when \"11010\" => pdes6 := disparity_pos_in;
        when \"11011\" => pdes6 := not disparity_pos_in;
        when \"11100\" => pdes6 := disparity_pos_in;
        when \"11101\" => pdes6 := not disparity_pos_in;
        when \"11110\" => pdes6 := not disparity_pos_in;
        when \"11111\" => pdes6 := not disparity_pos_in;
        when others  => pdes6 := disparity_pos_in;
      end case;
    end if;

    case d8(7 downto 5) is
      when \"000\" =>                     --D/K.x.0
        if pdes6 then
          b4 := \"0010\";
        else
          b4 := \"1101\";
        end if;
      when \"001\" =>                     --D/K.x.1
        if k28 and not pdes6 then
          b4 := \"0110\";
        else
          b4 := \"1001\";
        end if;
      when \"010\" =>                     --D/K.x.2
        if k28 and not pdes6 then
          b4 := \"0101\";
        else
          b4 := \"1010\";
        end if;
      when \"011\" =>                     --D/K.x.3
        if not pdes6 then
          b4 := \"0011\";
        else
          b4 := \"1100\";
        end if;
      when \"100\" =>                     --D/K.x.4
        if pdes6 then
          b4 := \"0100\";
        else
          b4 := \"1011\";
        end if;
      when \"101\" =>                     --D/K.x.5
        if k28 and not pdes6 then
          b4 := \"1010\";
        else
          b4 := \"0101\";
        end if;
      when \"110\" =>                     --D/K.x.6
        if k28 and not pdes6 then
          b4 := \"1001\";
        else
          b4 := \"0110\";
        end if;
      when \"111\" =>                     --D.x.P7
        if not a7 then
          if not pdes6 then
            b4 := \"0111\";
          else
            b4 := \"1000\";
          end if;
        else                            --D/K.y.A7
          if not pdes6 then
            b4 := \"1110\";
          else
            b4 := \"0001\";
          end if;
        end if;
      when others =>
        b4 := \"XXXX\";
    end case;

    -- Reverse the bits
    for i in 0 to 3 loop
      q10(i+6) := b4(i);
    end loop;  -- i

    -- Calculate the running disparity after the 4B group
    case d8(7 downto 5) is
      when \"000\"  =>
        disparity_pos_out := not pdes6;
      when \"001\"  =>
        disparity_pos_out := pdes6;
      when \"010\"  =>
        disparity_pos_out := pdes6;
      when \"011\"  =>
        disparity_pos_out := pdes6;
      when \"100\"  =>
        disparity_pos_out := not pdes6;
      when \"101\"  =>
        disparity_pos_out := pdes6;
      when \"110\"  =>
        disparity_pos_out := pdes6;
      when \"111\"  =>
        disparity_pos_out := not pdes6;
      when others =>
        disparity_pos_out := pdes6;
    end case;
    
  end encode_8b10b;



  ----------------------------------------------------------------------
  -- testbench signals and constants
  ----------------------------------------------------------------------

  -- Unit Interval for Gigabit Ethernet
  constant UI  : time := 800 ps;

  -- testbench clocks and sampling
  signal bitclock             : std_logic;   -- clock running at RocketIO serial frequency
  signal stim_rx_sample       : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 
  signal mon_tx_sample        : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 

  -- signals for the Tx monitor following 8B10B decode
  signal tx_pdata       : std_logic_vector(7 downto 0);  
  signal tx_is_k        : std_logic;

  -- signals for the Rx stimulus prior to 8B10B encode
  signal rx_pdata       : std_logic_vector(7 downto 0) := \"10111100\";
  signal rx_is_k        : boolean := true;
  signal rx_even        : std_logic := '1'; -- Keep track of the even/odd position
  signal rx_rundisp_pos : boolean := false; -- Indicates +ve running disparity

  -- testbench control signals
  signal current_speed       : string(1 to 6) := \"1gig  \";


  
"
tm "FcArchDeclTextMgr"
)
associable 1
)
archConcurrentStatementBlock *348 (BiTextGroup
uid 1769,0
stg "VerticalLayoutStrategy"
first (Text
uid 1770,0
va (VaSet
font "courier,8,1"
)
xt "-72275,823850,-61275,824750"
st "Concurrent Statements"
blo "-72275,824550"
)
second (MLText
uid 1771,0
va (VaSet
font "courier,8,0"
)
xt "-72275,824750,-36775,837350"
st "
----------------------------------------------------------------------
-- Simulus processes
--------------------
-- Send four frames through the MAC and Design Example
--      -- frame 0 = minimum length frame
--      -- frame 1 = type frame
--      -- frame 2 = errored frame
--      -- frame 3 = padded frame
----------------------------------------------------------------------
-- sample on every clock
stim_rx_sample <= '1'; 
-- sample on every clock
mon_tx_sample <= '1';
"
tm "FcArchConcStmtTextMgr"
)
associable 1
)
processDeclarativeBlock *349 (BiTextGroup
uid 1772,0
stg "VerticalLayoutStrategy"
first (Text
uid 1773,0
va (VaSet
font "courier,8,1"
)
xt "-72275,847150,-61775,848050"
st "Process Declarations"
blo "-72275,847850"
)
second (MLText
uid 1774,0
va (VaSet
font "courier,8,0"
)
xt "-72275,848050,-72275,848050"
tm "FcProcDeclTextMgr"
)
associable 1
)
sensitivityListBlock *350 (BiTextGroup
uid 1775,0
stg "VerticalLayoutStrategy"
first (Text
uid 1776,0
va (VaSet
font "courier,8,1"
)
xt "-72275,841350,-63775,842250"
st "Sensitivity List"
blo "-72275,842050"
)
second (MLText
uid 1777,0
va (VaSet
font "courier,8,0"
)
xt "-72275,842250,-65275,843150"
tm "FcSensListTextMgr"
)
)
)
genChar (FcGenChar
uid 1789,0
machineMode 1
resetActions ""
resetMode 1
resetName ""
resetCondition ""
vlogResetSensitivity ""
resetPolarity 0
clockPolarity 0
clockSigName ""
clockCondition ""
verilogProcessStatementType 0
verilogBlockType 0
instrumentForAnimation 0
insertSetResetPragma 0
setresetPragma 0
)
name "p_rx_even_odd"
)
*351 (ConcurrentFC
uid 1829,0
topDiagram (FlowDiagram
LanguageMgr "None"
uid 1830,0
optionalChildren [
*352 (StartPoint
uid 1855,0
optionalChildren [
*353 (CommentText
uid 1860,0
ps "EdgeToEdgeStrategy"
shape (Rectangle
uid 1861,0
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "13000,13000,28000,17000"
)
text (MLText
uid 1862,0
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "13200,13200,28200,16800"
st "


 
   Data from the Rx Stimulus is 8B10B encoded and serialised so that
   it can be injected into the RocketIO receiver port.
  
"
tm "CommentText"
wrapOption 3
visibleHeight 4000
visibleWidth 15000
)
included 1
)
]
shape (RoundedRectangle
uid 1856,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,12000,13000,14000"
radius 400
)
label (Text
uid 1857,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "8500,12500,11500,13500"
st "Start"
ju 0
blo "10000,13300"
)
outConnect (FlowConnect
uid 1858,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1859,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,13500,10500,14500"
)
direction 1
position 1
)
)
*354 (WaitBox
uid 1863,0
shape (Octagon
uid 1864,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,18000,11000,20000"
)
name (TextAssociate
uid 1865,0
ps "CenterOffsetStrategy"
text (Text
uid 1866,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,17050,10000,17950"
st "w0"
blo "9000,17750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1867,0
ps "CenterOffsetStrategy"
text (MLText
uid 1868,0
va (VaSet
font "courier,8,0"
)
xt "11250,18550,40050,20350"
st "-- Get synced up with the Rx clock                  
wait until clk125m'event and clk125m = '1';             
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 1869,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1870,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,17500,10500,18500"
)
direction 0
)
outConnect (FlowConnect
uid 1871,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1872,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,19500,10500,20500"
)
direction 1
position 1
)
)
*355 (ActionBox
uid 1875,0
shape (Rectangle
uid 1876,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-1750,23050,21750,24950"
)
name (TextAssociate
uid 1877,0
ps "CenterOffsetStrategy"
text (Text
uid 1878,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-1750,22100,-750,23000"
st "a0"
blo "-1750,22800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1879,0
ps "CenterOffsetStrategy"
text (MLText
uid 1880,0
va (VaSet
font "courier,8,0"
)
xt "-1250,23550,21250,24450"
st "-- Perform 8B10B encoding of the data stream"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1881,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1882,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,22550,10500,23550"
)
direction 0
)
outConnect (FlowConnect
uid 1883,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1884,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,24450,10500,25450"
)
direction 1
position 1
)
)
*356 (StartLoop
uid 1887,0
shape (Ellipse
uid 1888,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,29000,13000,31000"
)
label (Text
uid 1889,0
va (VaSet
font "courier,8,1"
)
xt "9000,29550,11000,30450"
st "Loop"
ju 0
blo "10000,30250"
)
name (TextAssociate
uid 1890,0
ps "CenterOffsetStrategy"
text (Text
uid 1891,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,28050,8000,28950"
st "l0"
blo "7000,28750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1892,0
ps "CenterOffsetStrategy"
text (MLText
uid 1893,0
va (VaSet
font "courier,8,0"
)
xt "10000,30000,10000,30000"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1894,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1895,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,28500,10500,29500"
)
direction 0
)
outConnect (FlowConnect
uid 1896,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1897,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,30500,10500,31500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1898,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1899,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,29500,7500,30500"
)
direction 0
position 2
)
)
*357 (ActionBox
uid 1902,0
shape (Rectangle
uid 1903,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "500,33900,19500,42100"
)
name (TextAssociate
uid 1904,0
ps "CenterOffsetStrategy"
text (Text
uid 1905,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "500,32950,1500,33850"
st "a1"
blo "500,33650"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1906,0
ps "CenterOffsetStrategy"
text (MLText
uid 1907,0
va (VaSet
font "courier,8,0"
)
xt "1000,34400,19000,41600"
st "encode_8b10b(
 d8                => rx_pdata,
 is_k              => rx_is_k,
 disparity_pos_in  => rundisp,
 q10               => encoded_data,
 disparity_pos_out => rundisp);
rx_rundisp_pos <= rundisp; 
send_10b_column(encoded_data);
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1908,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1909,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,33400,10500,34400"
)
direction 0
)
outConnect (FlowConnect
uid 1910,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1911,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,41600,10500,42600"
)
direction 1
position 1
)
)
*358 (EndLoop
uid 1914,0
shape (Ellipse
uid 1915,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,45000,13000,47000"
)
label (Text
uid 1916,0
va (VaSet
font "courier,8,1"
)
xt "8000,45550,12000,46450"
st "End Loop"
ju 0
blo "10000,46250"
)
inConnect (FlowConnect
uid 1917,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1918,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,44500,10500,45500"
)
direction 0
)
outConnect (FlowConnect
uid 1919,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1920,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,46500,10500,47500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1921,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1922,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,45500,7500,46500"
)
direction 1
position 2
)
)
*359 (EndPoint
uid 1927,0
shape (RoundedRectangle
uid 1928,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,50000,13000,52000"
radius 400
)
label (Text
uid 1929,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "9100,50500,10900,51500"
st "End"
ju 0
blo "10000,51300"
)
inConnect (FlowConnect
uid 1930,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1931,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,49500,10500,50500"
)
direction 0
)
)
*360 (Flow
uid 1873,0
shape (OrthoPolyLine
uid 1874,0
va (VaSet
vasetType 3
)
xt "10000,14000,10000,18000"
pts [
"10000,14000"
"10000,18000"
]
arrow 1
)
start &352
end &354
)
*361 (Flow
uid 1885,0
shape (OrthoPolyLine
uid 1886,0
va (VaSet
vasetType 3
)
xt "10000,20000,10000,23050"
pts [
"10000,20000"
"10000,23050"
]
arrow 1
)
start &354
end &355
)
*362 (Flow
uid 1900,0
shape (OrthoPolyLine
uid 1901,0
va (VaSet
vasetType 3
)
xt "10000,24950,10000,29000"
pts [
"10000,24950"
"10000,29000"
]
arrow 1
)
start &355
end &356
)
*363 (Flow
uid 1912,0
shape (OrthoPolyLine
uid 1913,0
va (VaSet
vasetType 3
)
xt "10000,31000,10000,33900"
pts [
"10000,31000"
"10000,33900"
]
arrow 1
)
start &356
end &357
)
*364 (Flow
uid 1923,0
shape (OrthoPolyLine
uid 1924,0
va (VaSet
vasetType 3
)
xt "10000,42100,10000,45000"
pts [
"10000,42100"
"10000,45000"
]
arrow 1
)
start &357
end &358
)
*365 (Flow
uid 1925,0
shape (OrthoPolyLine
uid 1926,0
va (VaSet
vasetType 3
)
xt "-2000,30000,7000,46000"
pts [
"7000,46000"
"-2000,46000"
"-2000,30000"
"7000,30000"
]
arrow 1
)
start &358
end &356
)
*366 (Flow
uid 1932,0
shape (OrthoPolyLine
uid 1933,0
va (VaSet
vasetType 3
)
xt "10000,47000,10000,50000"
pts [
"10000,47000"
"10000,50000"
]
arrow 1
)
start &358
end &359
)
]
bg "65535,65535,65535"
grid (Grid
origin "0,0"
isVisible 0
isActive 1
xSpacing 1000
xySpacing 1000
xShown 1
yShown 1
color "26368,26368,26368"
)
packageList *367 (PackageList
uid 1843,0
stg "VerticalLayoutStrategy"
textVec [
*368 (Text
uid 1844,0
va (VaSet
font "courier,8,1"
)
xt "-70525,4050,-64025,4950"
st "Package List"
blo "-70525,4750"
)
*369 (MLText
uid 1845,0
va (VaSet
font "courier,8,0"
)
xt "-70525,4950,-54025,8550"
tm "FcPackageListTextMgr"
)
]
)
compDirBlock (MlTextGroup
uid 1846,0
stg "VerticalLayoutStrategy"
textVec [
*370 (Text
uid 1847,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-55525,4500,-45525,5400"
st "Compiler Directives"
blo "-55525,5200"
)
*371 (Text
uid 1848,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-55525,5400,-44025,6300"
st "Pre-module directives:"
blo "-55525,6100"
)
*372 (MLText
uid 1849,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-55525,6300,-45425,8100"
st "`resetall
`timescale 1ns/10ps"
tm "FcCompilerDirectivesTextMgr"
)
*373 (Text
uid 1850,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-55525,8100,-43525,9000"
st "Post-module directives:"
blo "-55525,8800"
)
*374 (MLText
uid 1851,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-55525,4500,-55525,4500"
tm "FcCompilerDirectivesTextMgr"
)
*375 (Text
uid 1852,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-55525,9000,-44025,9900"
st "End-module directives:"
blo "-55525,9700"
)
*376 (MLText
uid 1853,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-55525,9900,-55525,9900"
tm "FcCompilerDirectivesTextMgr"
)
]
associable 1
)
windowSize "0,0,1015,690"
viewArea "0,0,0,0"
cachedDiagramExtent "0,0,0,0"
pageBreakOrigin "0,0"
isTopLevel 1
defaultCommentText (CommentText
shape (Rectangle
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "0,0,15000,5000"
)
text (MLText
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "200,200,2200,1100"
st "
Text
"
tm "CommentText"
wrapOption 3
visibleHeight 4600
visibleWidth 14600
)
)
defaultPanel (Panel
shape (RectFrame
va (VaSet
vasetType 1
fg "65535,65535,65535"
lineColor "32768,0,0"
lineWidth 3
)
xt "0,0,20000,20000"
)
title (TextAssociate
ps "TopLeftStrategy"
text (Text
va (VaSet
font "courier,8,1"
)
xt "1000,1000,4000,1900"
st "Panel0"
blo "1000,1700"
tm "PanelText"
)
)
)
archDeclarativeBlock *377 (BiTextGroup
uid 1831,0
stg "VerticalLayoutStrategy"
first (Text
uid 1832,0
va (VaSet
font "courier,8,1"
)
xt "-75525,10750,-62525,11650"
st "Architecture Declarations"
blo "-75525,11450"
)
second (MLText
uid 1833,0
va (VaSet
font "courier,8,0"
)
xt "-75525,11650,-7525,819850"
st "

  
  ----------------------------------------------------------------------
  -- types to support frame data
  ----------------------------------------------------------------------
  -- Tx Data and Data_valid record
  type data_typ is record
      data : bit_vector(7 downto 0);  -- data
      valid : bit;                    -- data_valid
      error : bit;                    -- data_error
  end record;
  type frame_of_data_typ is array (natural range <>) of data_typ;

  -- Tx Data, Data_valid and underrun record
  type frame_typ is record
      columns   : frame_of_data_typ(0 to 65);-- data field
      bad_frame : boolean;  -- does this frame contain an error?
  end record;
  type frame_typ_ary is array (natural range <>) of frame_typ;

  ----------------------------------------------------------------------
  -- Stimulus - Frame data 
  ----------------------------------------------------------------------
  -- The following constant holds the stimulus for the testbench. It is 
  -- an ordered array of frames, with frame 0 the first to be injected 
  -- into the core receiver PHY interface by the testbench. 
  ----------------------------------------------------------------------
  constant frame_data : frame_typ_ary := (
   -------------
   -- Frame 0
   -------------
    0          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'),   -- 46th Byte of Data
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 1
   -------------
    1          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"80\", VALID => '1', ERROR => '0'), -- Length/Type = Type = 8000
       13      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), 
       60      => ( DATA => X\"2F\", VALID => '1', ERROR => '0'), -- 47th Data byte
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 2
   -------------
    2          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '1'), -- assert error here
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

       -- Error this frame
      bad_frame => true),


   -------------
   -- Frame 3
   -------------
   3          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"03\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 03
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), -- Therefore padding is required
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'), 
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Padding starts here
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false));



  ----------------------------------------------------------------------
  -- CRC engine 
  ----------------------------------------------------------------------
  function calc_crc (data : in std_logic_vector;
                     fcs  : in std_logic_vector)
  return std_logic_vector is   

     variable crc          : std_logic_vector(31 downto 0);
     variable crc_feedback : std_logic;     
  begin

    crc := not fcs;

    for I in 0 to 7 loop
      crc_feedback      := crc(0) xor data(I);

      crc(4 downto 0)   := crc(5 downto 1);
      crc(5)            := crc(6)  xor crc_feedback;
      crc(7 downto 6)   := crc(8 downto 7);
      crc(8)            := crc(9)  xor crc_feedback;
      crc(9)            := crc(10) xor crc_feedback;
      crc(14 downto 10) := crc(15 downto 11);
      crc(15)           := crc(16) xor crc_feedback;
      crc(18 downto 16) := crc(19 downto 17);
      crc(19)           := crc(20) xor crc_feedback;
      crc(20)           := crc(21) xor crc_feedback;
      crc(21)           := crc(22) xor crc_feedback;
      crc(22)           := crc(23);
      crc(23)           := crc(24) xor crc_feedback;
      crc(24)           := crc(25) xor crc_feedback;
      crc(25)           := crc(26);
      crc(26)           := crc(27) xor crc_feedback;
      crc(27)           := crc(28) xor crc_feedback;
      crc(28)           := crc(29);
      crc(29)           := crc(30) xor crc_feedback;
      crc(30)           := crc(31) xor crc_feedback;
      crc(31)           :=             crc_feedback;
    end loop; 
      
    -- return the CRC result                                  
    return not crc;

  end calc_crc;



  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B decoding
  ----------------------------------------------------------------------

  -- Decode the 8B10B code. No disparity verification is performed, just
  -- a simple table lookup.
  procedure decode_8b10b (
    constant d10  : in  std_logic_vector(0 to 9);
    variable q8   : out std_logic_vector(7 downto 0);
    variable is_k : out boolean) is
    variable k28 : boolean;
    variable d10_rev : std_logic_vector(9 downto 0);
  begin
    -- reverse the 10B codeword
    for i in 0 to 9 loop
      d10_rev(i) := d10(i);
    end loop;  -- i
    -- do the 6B5B decode
    case d10_rev(5 downto 0) is
      when \"000110\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"111001\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"010001\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"101110\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"010010\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"101101\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"100011\" =>
        q8(4 downto 0) := \"00011\";   --D.3
      when \"010100\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"101011\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"100101\" =>
        q8(4 downto 0) := \"00101\";   --D.5
      when \"100110\" =>
        q8(4 downto 0) := \"00110\";   --D.6
      when \"000111\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"111000\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"011000\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"100111\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"101001\" =>
        q8(4 downto 0) := \"01001\";   --D.9
      when \"101010\" =>
        q8(4 downto 0) := \"01010\";   --D.10
      when \"001011\" =>
        q8(4 downto 0) := \"01011\";   --D.11
      when \"101100\" =>
        q8(4 downto 0) := \"01100\";   --D.12
      when \"001101\" =>
        q8(4 downto 0) := \"01101\";   --D.13
      when \"001110\" =>
        q8(4 downto 0) := \"01110\";   --D.14
      when \"000101\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"111010\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"110110\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"001001\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"110001\" =>
        q8(4 downto 0) := \"10001\";   --D.17
      when \"110010\" =>
        q8(4 downto 0) := \"10010\";   --D.18
      when \"010011\" =>
        q8(4 downto 0) := \"10011\";   --D.19
      when \"110100\" =>
        q8(4 downto 0) := \"10100\";   --D.20
      when \"010101\" =>
        q8(4 downto 0) := \"10101\";   --D.21
      when \"010110\" =>
        q8(4 downto 0) := \"10110\";   --D.22
      when \"010111\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"101000\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"001100\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"110011\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"011001\" =>
        q8(4 downto 0) := \"11001\";   --D.25
      when \"011010\" =>
        q8(4 downto 0) := \"11010\";   --D.26
      when \"011011\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"100100\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"011100\" =>
        q8(4 downto 0) := \"11100\";   --D.28
      when \"111100\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"000011\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"011101\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"100010\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"011110\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"100001\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"110101\" =>
        q8(4 downto 0) := \"11111\";   --D.31
      when \"001010\" =>
        q8(4 downto 0) := \"11111\";   --D.31
        
      when others   =>
        q8(4 downto 0) := \"11110\";  --CODE VIOLATION - return /E/
    end case;

    k28 := not((d10(2) OR d10(3) OR d10(4) OR d10(5)
                OR NOT(d10(8) XOR d10(9)))) = '1';
    
    -- do the 4B3B decode
    case d10_rev(9 downto 6) is
      when \"0010\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1101\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1001\" =>
        if not k28 then
          q8(7 downto 5) := \"001\";     --D/K.x.1
        else
          q8(7 downto 5) := \"110\";     --K28.6
        end if;
      when \"0110\" =>
        if k28 then
          q8(7 downto 5) := \"001\";     --K.28.1
        else
          q8(7 downto 5) := \"110\";     --D/K.x.6
        end if;
      when \"1010\" =>
        if not k28 then
          q8(7 downto 5) := \"010\";     --D/K.x.2
        else
          q8(7 downto 5) := \"101\";     --K28.5
        end if;
      when \"0101\" =>
        if k28 then
          q8(7 downto 5) := \"010\";     --K28.2
        else
          q8(7 downto 5) := \"101\";     --D/K.x.5
        end if;
      when \"0011\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"1100\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"0100\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"1011\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"0111\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1000\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1110\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7
      when \"0001\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7

      when others =>
        q8(7 downto 5) := \"111\";   --CODE VIOLATION - return /E/
    end case;

    is_k := ((d10(2) and d10(3) and d10(4) and d10(5))
            or not (d10(2) or d10(3) or d10(4) or d10(5))
            or ((d10(4) xor d10(5))
              and ((d10(5) and d10(7) and d10(8) and d10(9))
                or not(d10(5) or d10(7) or d10(8) or d10(9))))) = '1' ;
  end decode_8b10b;


  
  ----------------------------------------------------------------------
  -- Procedure to perform comma detection
  ----------------------------------------------------------------------

  function is_comma (
    constant codegroup : in std_logic_vector(0 to 9))
    return boolean is
  begin  -- is_comma
    case codegroup(0 to 6) is
      when \"0011111\" =>
        return true;
      when \"1100000\" =>
        return true;
      when others =>
        return false;
    end case;
  end is_comma;


  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B encoding
  ----------------------------------------------------------------------

  procedure encode_8b10b (
    constant d8                : in  std_logic_vector(7 downto 0);
    constant is_k              : in  boolean;
    variable q10               : out std_logic_vector(0 to 9);
    constant disparity_pos_in  : in  boolean;
    variable disparity_pos_out : out boolean) is
    variable b6                       : std_logic_vector(5 downto 0);
    variable b4                       : std_logic_vector(3 downto 0);
    variable k28, pdes6, a7, l13, l31 : boolean;
    variable a, b, c, d, e            : boolean;
  begin  -- encode_8b10b
    -- precalculate some common terms
    a := d8(0) = '1';
    b := d8(1) = '1';
    c := d8(2) = '1';
    d := d8(3) = '1';
    e := d8(4) = '1';

    k28 := is_k and d8(4 downto 0) = \"11100\";
    l13 := (((a xor b) and not (c or d))
            or ((c xor d) and not(a or b)));

    l31 := (((a xor b) and (c and d))
             or
             ((c xor d) and (a and b)));

    a7 := is_k or ((l31 and d and not e and disparity_pos_in)
                   or (l13 and not d and e and not disparity_pos_in));

    -- Do the 5B/6B conversion (calculate the 6b symbol)
    if k28 then                         --K.28
      if not disparity_pos_in then
        b6 := \"111100\";
      else
        b6 := \"000011\";
      end if;
    else
      case d8(4 downto 0) is
        when \"00000\" =>                 --D.0
          if disparity_pos_in then
            b6 := \"000110\";
          else
            b6 := \"111001\";
          end if;
        when \"00001\" =>                 --D.1
          if disparity_pos_in then
            b6 := \"010001\";
          else
            b6 := \"101110\";
          end if;
        when \"00010\" =>                 --D.2
          if disparity_pos_in then
            b6 := \"010010\";
          else
            b6 := \"101101\";
          end if;
        when \"00011\" =>
          b6 := \"100011\";               --D.3
        when \"00100\" =>                 --D.4
          if disparity_pos_in then
            b6 := \"010100\";
          else
            b6 := \"101011\";
          end if;
        when \"00101\" =>
          b6 := \"100101\";               --D.5
        when \"00110\" =>
          b6 := \"100110\";               --D.6
        when \"00111\" =>                 --D.7   
          if not disparity_pos_in then
            b6 := \"000111\";
          else
            b6 := \"111000\";
          end if;
        when \"01000\" =>                 --D.8
          if disparity_pos_in then
            b6 := \"011000\";
          else
            b6 := \"100111\";
          end if;
        when \"01001\" =>
          b6 := \"101001\";               --D.9
        when \"01010\" =>
          b6 := \"101010\";               --D.10
        when \"01011\" =>
          b6 := \"001011\";               --D.11
        when \"01100\" =>
          b6 := \"101100\";               --D.12
        when \"01101\" =>
          b6 := \"001101\";               --D.13
        when \"01110\" =>
          b6 := \"001110\";               --D.14
        when \"01111\" =>                 --D.15
          if disparity_pos_in then
            b6 := \"000101\";
          else
            b6 := \"111010\";
          end if;
        when \"10000\" =>                 --D.16
          if not disparity_pos_in then
            b6 := \"110110\";
          else
            b6 := \"001001\";
          end if;
        when \"10001\" =>
          b6 := \"110001\";               --D.17
        when \"10010\" =>
          b6 := \"110010\";               --D.18
        when \"10011\" =>
          b6 := \"010011\";               --D.19
        when \"10100\" =>
          b6 := \"110100\";               --D.20
        when \"10101\" =>
          b6 := \"010101\";               --D.21
        when \"10110\" =>
          b6 := \"010110\";               --D.22
        when \"10111\" =>                 --D/K.23
          if not disparity_pos_in then
            b6 := \"010111\";
          else
            b6 := \"101000\";
          end if;
        when \"11000\" =>                 --D.24
          if disparity_pos_in then
            b6 := \"001100\";
          else
            b6 := \"110011\";
          end if;
        when \"11001\" =>
          b6 := \"011001\";               --D.25
        when \"11010\" =>
          b6 := \"011010\";               --D.26
        when \"11011\" =>                 --D/K.27
          if not disparity_pos_in then
            b6 := \"011011\";
          else
            b6 := \"100100\";
          end if;
        when \"11100\" =>
          b6 := \"011100\";               --D.28
        when \"11101\" =>                 --D/K.29
          if not disparity_pos_in then
            b6 := \"011101\";
          else
            b6 := \"100010\";
          end if;
        when \"11110\" =>                 --D/K.30
          if not disparity_pos_in then
            b6 := \"011110\";
          else
            b6 := \"100001\";
          end if;
        when \"11111\" =>                 --D.31
          if not disparity_pos_in then
            b6 := \"110101\";
          else
            b6 := \"001010\";
          end if;
        when others =>
          b6 := \"XXXXXX\";
      end case;
    end if;

    -- reverse the bits
    for i in 0 to 5 loop
      q10(i) := b6(i);
    end loop;  -- i

    -- calculate the running disparity after the 5B6B block encode
    if k28 then
      pdes6 := not disparity_pos_in;
    else
      case d8(4 downto 0) is
        when \"00000\" => pdes6 := not disparity_pos_in;
        when \"00001\" => pdes6 := not disparity_pos_in;
        when \"00010\" => pdes6 := not disparity_pos_in;
        when \"00011\" => pdes6 := disparity_pos_in;
        when \"00100\" => pdes6 := not disparity_pos_in;
        when \"00101\" => pdes6 := disparity_pos_in;
        when \"00110\" => pdes6 := disparity_pos_in;
        when \"00111\" => pdes6 := disparity_pos_in;

        when \"01000\" => pdes6 := not disparity_pos_in;
        when \"01001\" => pdes6 := disparity_pos_in;
        when \"01010\" => pdes6 := disparity_pos_in;
        when \"01011\" => pdes6 := disparity_pos_in;
        when \"01100\" => pdes6 := disparity_pos_in;
        when \"01101\" => pdes6 := disparity_pos_in;
        when \"01110\" => pdes6 := disparity_pos_in;
        when \"01111\" => pdes6 := not disparity_pos_in;

        when \"10000\" => pdes6 := not disparity_pos_in;
        when \"10001\" => pdes6 := disparity_pos_in;
        when \"10010\" => pdes6 := disparity_pos_in;
        when \"10011\" => pdes6 := disparity_pos_in;
        when \"10100\" => pdes6 := disparity_pos_in;
        when \"10101\" => pdes6 := disparity_pos_in;
        when \"10110\" => pdes6 := disparity_pos_in;
        when \"10111\" => pdes6 := not disparity_pos_in;

        when \"11000\" => pdes6 := not disparity_pos_in;
        when \"11001\" => pdes6 := disparity_pos_in;
        when \"11010\" => pdes6 := disparity_pos_in;
        when \"11011\" => pdes6 := not disparity_pos_in;
        when \"11100\" => pdes6 := disparity_pos_in;
        when \"11101\" => pdes6 := not disparity_pos_in;
        when \"11110\" => pdes6 := not disparity_pos_in;
        when \"11111\" => pdes6 := not disparity_pos_in;
        when others  => pdes6 := disparity_pos_in;
      end case;
    end if;

    case d8(7 downto 5) is
      when \"000\" =>                     --D/K.x.0
        if pdes6 then
          b4 := \"0010\";
        else
          b4 := \"1101\";
        end if;
      when \"001\" =>                     --D/K.x.1
        if k28 and not pdes6 then
          b4 := \"0110\";
        else
          b4 := \"1001\";
        end if;
      when \"010\" =>                     --D/K.x.2
        if k28 and not pdes6 then
          b4 := \"0101\";
        else
          b4 := \"1010\";
        end if;
      when \"011\" =>                     --D/K.x.3
        if not pdes6 then
          b4 := \"0011\";
        else
          b4 := \"1100\";
        end if;
      when \"100\" =>                     --D/K.x.4
        if pdes6 then
          b4 := \"0100\";
        else
          b4 := \"1011\";
        end if;
      when \"101\" =>                     --D/K.x.5
        if k28 and not pdes6 then
          b4 := \"1010\";
        else
          b4 := \"0101\";
        end if;
      when \"110\" =>                     --D/K.x.6
        if k28 and not pdes6 then
          b4 := \"1001\";
        else
          b4 := \"0110\";
        end if;
      when \"111\" =>                     --D.x.P7
        if not a7 then
          if not pdes6 then
            b4 := \"0111\";
          else
            b4 := \"1000\";
          end if;
        else                            --D/K.y.A7
          if not pdes6 then
            b4 := \"1110\";
          else
            b4 := \"0001\";
          end if;
        end if;
      when others =>
        b4 := \"XXXX\";
    end case;

    -- Reverse the bits
    for i in 0 to 3 loop
      q10(i+6) := b4(i);
    end loop;  -- i

    -- Calculate the running disparity after the 4B group
    case d8(7 downto 5) is
      when \"000\"  =>
        disparity_pos_out := not pdes6;
      when \"001\"  =>
        disparity_pos_out := pdes6;
      when \"010\"  =>
        disparity_pos_out := pdes6;
      when \"011\"  =>
        disparity_pos_out := pdes6;
      when \"100\"  =>
        disparity_pos_out := not pdes6;
      when \"101\"  =>
        disparity_pos_out := pdes6;
      when \"110\"  =>
        disparity_pos_out := pdes6;
      when \"111\"  =>
        disparity_pos_out := not pdes6;
      when others =>
        disparity_pos_out := pdes6;
    end case;
    
  end encode_8b10b;



  ----------------------------------------------------------------------
  -- testbench signals and constants
  ----------------------------------------------------------------------

  -- Unit Interval for Gigabit Ethernet
  constant UI  : time := 800 ps;

  -- testbench clocks and sampling
  signal bitclock             : std_logic;   -- clock running at RocketIO serial frequency
  signal stim_rx_sample       : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 
  signal mon_tx_sample        : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 

  -- signals for the Tx monitor following 8B10B decode
  signal tx_pdata       : std_logic_vector(7 downto 0);  
  signal tx_is_k        : std_logic;

  -- signals for the Rx stimulus prior to 8B10B encode
  signal rx_pdata       : std_logic_vector(7 downto 0) := \"10111100\";
  signal rx_is_k        : boolean := true;
  signal rx_even        : std_logic := '1'; -- Keep track of the even/odd position
  signal rx_rundisp_pos : boolean := false; -- Indicates +ve running disparity

  -- testbench control signals
  signal current_speed       : string(1 to 6) := \"1gig  \";


  
"
tm "FcArchDeclTextMgr"
)
associable 1
)
archConcurrentStatementBlock *378 (BiTextGroup
uid 1834,0
stg "VerticalLayoutStrategy"
first (Text
uid 1835,0
va (VaSet
font "courier,8,1"
)
xt "-75525,823850,-64525,824750"
st "Concurrent Statements"
blo "-75525,824550"
)
second (MLText
uid 1836,0
va (VaSet
font "courier,8,0"
)
xt "-75525,824750,-40025,837350"
st "
----------------------------------------------------------------------
-- Simulus processes
--------------------
-- Send four frames through the MAC and Design Example
--      -- frame 0 = minimum length frame
--      -- frame 1 = type frame
--      -- frame 2 = errored frame
--      -- frame 3 = padded frame
----------------------------------------------------------------------
-- sample on every clock
stim_rx_sample <= '1'; 
-- sample on every clock
mon_tx_sample <= '1';
"
tm "FcArchConcStmtTextMgr"
)
associable 1
)
processDeclarativeBlock *379 (BiTextGroup
uid 1837,0
stg "VerticalLayoutStrategy"
first (Text
uid 1838,0
va (VaSet
font "courier,8,1"
)
xt "-75525,847150,-65025,848050"
st "Process Declarations"
blo "-75525,847850"
)
second (MLText
uid 1839,0
va (VaSet
font "courier,8,0"
)
xt "-75525,848050,-46525,861550"
st "
    variable encoded_data : std_logic_vector(9 downto 0);
    variable rundisp      : boolean;

 -- A procedure to serialise a single 10-bit code group
 procedure send_10b_column (
   constant d : in std_logic_vector(0 to 9)) is
 begin  
   for i in 0 to 9 loop
     rxp <= d(i);
     rxn <= not d(i);
     wait until bitclock'event and bitclock = '1';
   end loop;  -- i
 end send_10b_column;

"
tm "FcProcDeclTextMgr"
)
associable 1
)
sensitivityListBlock *380 (BiTextGroup
uid 1840,0
stg "VerticalLayoutStrategy"
first (Text
uid 1841,0
va (VaSet
font "courier,8,1"
)
xt "-75525,841350,-67025,842250"
st "Sensitivity List"
blo "-75525,842050"
)
second (MLText
uid 1842,0
va (VaSet
font "courier,8,0"
)
xt "-75525,842250,-68525,843150"
tm "FcSensListTextMgr"
)
)
)
genChar (FcGenChar
uid 1854,0
machineMode 1
resetActions ""
resetMode 1
resetName ""
resetCondition ""
vlogResetSensitivity ""
resetPolarity 0
clockPolarity 0
clockSigName ""
clockCondition ""
verilogProcessStatementType 0
verilogBlockType 0
instrumentForAnimation 0
insertSetResetPragma 0
setresetPragma 0
)
name "p_rx_encode"
)
*381 (ConcurrentFC
uid 1934,0
topDiagram (FlowDiagram
LanguageMgr "None"
uid 1935,0
optionalChildren [
*382 (StartPoint
uid 1960,0
optionalChildren [
*383 (CommentText
uid 1965,0
ps "EdgeToEdgeStrategy"
shape (Rectangle
uid 1966,0
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "13000,13000,28000,17000"
)
text (MLText
uid 1967,0
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "13200,13200,28200,16800"
st "



  --------------------------------------------------------------------
   Monitor processs.
  ------------------
   These processes checks the data coming out of the
   transmitter to make sure that it matches that inserted into the
   receiver.
        -- frame 0 = minimum length frame
        -- frame 1 = type frame
        -- frame 2 = errored frame
        -- frame 3 = padded frame
  
   Repeated for all 3 speeds.
  --------------------------------------------------------------------

 
   The Phy side serial transmitter output from the core is captured, 
   converted to 10-bit parallel and 8B10B decoded.  Correct Parallel 
   alignment is achieved using comma detection.
  
"
tm "CommentText"
wrapOption 3
visibleHeight 4000
visibleWidth 15000
)
included 1
)
]
shape (RoundedRectangle
uid 1961,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,12000,13000,14000"
radius 400
)
label (Text
uid 1962,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "8500,12500,11500,13500"
st "Start"
ju 0
blo "10000,13300"
)
outConnect (FlowConnect
uid 1963,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1964,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,13500,10500,14500"
)
direction 1
position 1
)
)
*384 (ActionBox
uid 1968,0
shape (Rectangle
uid 1969,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "3750,17600,16250,20400"
)
name (TextAssociate
uid 1970,0
ps "CenterOffsetStrategy"
text (Text
uid 1971,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "3750,16650,4750,17550"
st "a0"
blo "3750,17350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 1972,0
ps "CenterOffsetStrategy"
text (MLText
uid 1973,0
va (VaSet
font "courier,8,0"
)
xt "4250,18100,15750,19900"
st "bit_count := 0;
initial_sync := false;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 1974,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1975,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,17100,10500,18100"
)
direction 0
)
outConnect (FlowConnect
uid 1976,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1977,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,19900,10500,20900"
)
direction 1
position 1
)
)
*385 (StartLoop
uid 1980,0
shape (Ellipse
uid 1981,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,24000,13000,26000"
)
label (Text
uid 1982,0
va (VaSet
font "courier,8,1"
)
xt "9000,24550,11000,25450"
st "Loop"
ju 0
blo "10000,25250"
)
name (TextAssociate
uid 1983,0
ps "CenterOffsetStrategy"
text (Text
uid 1984,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "7000,23050,8000,23950"
st "l0"
blo "7000,23750"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
uid 1985,0
ps "CenterOffsetStrategy"
text (MLText
uid 1986,0
va (VaSet
font "courier,8,0"
)
xt "10000,25000,10000,25000"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
uid 1987,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1988,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,23500,10500,24500"
)
direction 0
)
outConnect (FlowConnect
uid 1989,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1990,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,25500,10500,26500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 1991,0
ps "OnEdgeStrategy"
shape (Triangle
uid 1992,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,24500,7500,25500"
)
direction 0
position 2
)
)
*386 (WaitBox
uid 1995,0
shape (Octagon
uid 1996,0
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "9000,29000,11000,31000"
)
name (TextAssociate
uid 1997,0
ps "CenterOffsetStrategy"
text (Text
uid 1998,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "9000,28050,10000,28950"
st "w0"
blo "9000,28750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 1999,0
ps "CenterOffsetStrategy"
text (MLText
uid 2000,0
va (VaSet
font "courier,8,0"
)
xt "11250,29550,34550,30450"
st "wait until bitclock'event and bitclock = '1';
"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
uid 2001,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2002,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,28500,10500,29500"
)
direction 0
)
outConnect (FlowConnect
uid 2003,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2004,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,30500,10500,31500"
)
direction 1
position 1
)
)
*387 (ActionBox
uid 2007,0
shape (Rectangle
uid 2008,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-1000,35050,21000,36950"
)
name (TextAssociate
uid 2009,0
ps "CenterOffsetStrategy"
text (Text
uid 2010,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-1000,34100,0,35000"
st "a1"
blo "-1000,34800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 2011,0
ps "CenterOffsetStrategy"
text (MLText
uid 2012,0
va (VaSet
font "courier,8,0"
)
xt "-500,35550,20500,36450"
st "code_buffer := code_buffer(1 to 9) & txp;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 2013,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2014,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,34550,10500,35550"
)
direction 0
)
outConnect (FlowConnect
uid 2015,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2016,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,36450,10500,37450"
)
direction 1
position 1
)
)
*388 (ActionBox
uid 2019,0
shape (Rectangle
uid 2020,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "4750,40050,15250,41950"
)
name (TextAssociate
uid 2021,0
ps "CenterOffsetStrategy"
text (Text
uid 2022,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "4750,39100,5750,40000"
st "a2"
blo "4750,39800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 2023,0
ps "CenterOffsetStrategy"
text (MLText
uid 2024,0
va (VaSet
font "courier,8,0"
)
xt "5250,40550,14750,41450"
st "-- comma detection"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 2025,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2026,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,39550,10500,40550"
)
direction 0
)
outConnect (FlowConnect
uid 2027,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2028,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,41450,10500,42450"
)
direction 1
position 1
)
)
*389 (DecisionBox
uid 2031,0
shape (Diamond
uid 2032,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,46000,15000,50000"
)
name (TextAssociate
uid 2033,0
ps "EdgeToEdgeStrategy"
text (Text
uid 2034,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,45050,6000,45950"
st "d0"
blo "5000,45750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 2035,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 2036,0
va (VaSet
font "courier,8,0"
)
xt "4000,47550,16000,48450"
st " is_comma(code_buffer) "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 2037,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,50500,11000,51400"
st "T"
blo "10500,51200"
)
falseLabel (Text
uid 2038,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,46600,16000,47500"
st "F"
blo "15500,47300"
)
inConnect (FlowConnect
uid 2039,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2040,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,45500,10500,46500"
)
direction 0
)
trueConnect (FlowConnect
uid 2041,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2042,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,49500,10500,50500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 2043,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2044,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,47500,15500,48500"
)
direction 1
position 3
)
elsif 1
)
*390 (ActionBox
uid 2047,0
shape (Rectangle
uid 2048,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "4000,53600,16000,56400"
)
name (TextAssociate
uid 2049,0
ps "CenterOffsetStrategy"
text (Text
uid 2050,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "4000,52650,5000,53550"
st "a3"
blo "4000,53350"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 2051,0
ps "CenterOffsetStrategy"
text (MLText
uid 2052,0
va (VaSet
font "courier,8,0"
)
xt "4500,54100,15500,55900"
st "bit_count := 0;
initial_sync := true;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 2053,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2054,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,53100,10500,54100"
)
direction 0
)
outConnect (FlowConnect
uid 2055,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2056,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,55900,10500,56900"
)
direction 1
position 1
)
)
*391 (DecisionBox
uid 2075,0
shape (Diamond
uid 2076,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,65000,15000,69000"
)
name (TextAssociate
uid 2077,0
ps "EdgeToEdgeStrategy"
text (Text
uid 2078,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,64050,6000,64950"
st "d1"
blo "5000,64750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 2079,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 2080,0
va (VaSet
font "courier,8,0"
)
xt "1750,66550,18250,67450"
st " bit_count = 0 and initial_sync "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 2081,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,69500,11000,70400"
st "T"
blo "10500,70200"
)
falseLabel (Text
uid 2082,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,65600,16000,66500"
st "F"
blo "15500,66300"
)
inConnect (FlowConnect
uid 2083,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2084,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,64500,10500,65500"
)
direction 0
)
trueConnect (FlowConnect
uid 2085,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2086,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,68500,10500,69500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 2087,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2088,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,66500,15500,67500"
)
direction 1
position 3
)
elsif 1
)
*392 (ActionBox
uid 2091,0
shape (Rectangle
uid 2092,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "-1750,72350,21750,79650"
)
name (TextAssociate
uid 2093,0
ps "CenterOffsetStrategy"
text (Text
uid 2094,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "-1750,71400,-750,72300"
st "a4"
blo "-1750,72100"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 2095,0
ps "CenterOffsetStrategy"
text (MLText
uid 2096,0
va (VaSet
font "courier,8,0"
)
xt "-1250,72850,21250,79150"
st "-- Perform 8B10B decoding of the data stream
decode_8b10b(
d10  => code_buffer,
q8   => decoded_data,
is_k => is_k_var);
-- drive the output signals with the results
tx_pdata <= decoded_data;
"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 2097,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2098,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,71850,10500,72850"
)
direction 0
)
outConnect (FlowConnect
uid 2099,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2100,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,79150,10500,80150"
)
direction 1
position 1
)
)
*393 (DecisionBox
uid 2103,0
shape (Diamond
uid 2104,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,84000,15000,88000"
)
name (TextAssociate
uid 2105,0
ps "EdgeToEdgeStrategy"
text (Text
uid 2106,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,83050,6000,83950"
st "d2"
blo "5000,83750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 2107,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 2108,0
va (VaSet
font "courier,8,0"
)
xt "7250,85550,12750,86450"
st " is_k_var "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 2109,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,88500,11000,89400"
st "T"
blo "10500,89200"
)
falseLabel (Text
uid 2110,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,84600,16000,85500"
st "F"
blo "15500,85300"
)
inConnect (FlowConnect
uid 2111,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2112,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,83500,10500,84500"
)
direction 0
)
trueConnect (FlowConnect
uid 2113,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2114,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,87500,10500,88500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 2115,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2116,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,85500,15500,86500"
)
direction 1
position 3
)
elsif 1
)
*394 (ActionBox
uid 2119,0
shape (Rectangle
uid 2120,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "5400,92050,14600,93950"
)
name (TextAssociate
uid 2121,0
ps "CenterOffsetStrategy"
text (Text
uid 2122,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5400,91100,6400,92000"
st "a5"
blo "5400,91800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 2123,0
ps "CenterOffsetStrategy"
text (MLText
uid 2124,0
va (VaSet
font "courier,8,0"
)
xt "5900,92550,14100,93450"
st "tx_is_k <= '1';"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 2125,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2126,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,91550,10500,92550"
)
direction 0
)
outConnect (FlowConnect
uid 2127,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2128,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,93450,10500,94450"
)
direction 1
position 1
)
)
*395 (ActionBox
uid 2131,0
shape (Rectangle
uid 2132,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "17400,89050,26600,90950"
)
name (TextAssociate
uid 2133,0
ps "CenterOffsetStrategy"
text (Text
uid 2134,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "17400,88100,18400,89000"
st "a6"
blo "17400,88800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 2135,0
ps "CenterOffsetStrategy"
text (MLText
uid 2136,0
va (VaSet
font "courier,8,0"
)
xt "17900,89550,26100,90450"
st "tx_is_k <= '0';"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 2137,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2138,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "21500,88550,22500,89550"
)
direction 0
)
outConnect (FlowConnect
uid 2139,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2140,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "21500,90450,22500,91450"
)
direction 1
position 1
)
)
*396 (DecisionBox
uid 2175,0
shape (Diamond
uid 2176,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,105000,15000,109000"
)
name (TextAssociate
uid 2177,0
ps "EdgeToEdgeStrategy"
text (Text
uid 2178,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,104050,6000,104950"
st "d3"
blo "5000,104750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 2179,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 2180,0
va (VaSet
font "courier,8,0"
)
xt "6250,106550,13750,107450"
st " initial_sync "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 2181,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,109500,11000,110400"
st "T"
blo "10500,110200"
)
falseLabel (Text
uid 2182,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,105600,16000,106500"
st "F"
blo "15500,106300"
)
inConnect (FlowConnect
uid 2183,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2184,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,104500,10500,105500"
)
direction 0
)
trueConnect (FlowConnect
uid 2185,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2186,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,108500,10500,109500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 2187,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2188,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,106500,15500,107500"
)
direction 1
position 3
)
elsif 1
)
*397 (ActionBox
uid 2191,0
shape (Rectangle
uid 2192,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "2500,113050,17500,114950"
)
name (TextAssociate
uid 2193,0
ps "CenterOffsetStrategy"
text (Text
uid 2194,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "2500,112100,3500,113000"
st "a7"
blo "2500,112800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 2195,0
ps "CenterOffsetStrategy"
text (MLText
uid 2196,0
va (VaSet
font "courier,8,0"
)
xt "3000,113550,17000,114450"
st "bit_count := bit_count + 1;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 2197,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2198,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,112550,10500,113550"
)
direction 0
)
outConnect (FlowConnect
uid 2199,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2200,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,114450,10500,115450"
)
direction 1
position 1
)
)
*398 (DecisionBox
uid 2203,0
shape (Diamond
uid 2204,0
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "5000,119000,15000,123000"
)
name (TextAssociate
uid 2205,0
ps "EdgeToEdgeStrategy"
text (Text
uid 2206,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5000,118050,6000,118950"
st "d4"
blo "5000,118750"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
uid 2207,0
ps "EdgeToEdgeStrategy"
text (MLText
uid 2208,0
va (VaSet
font "courier,8,0"
)
xt "5750,120550,14250,121450"
st " bit_count = 10 "
tm "FcConditionMgr"
)
)
trueLabel (Text
uid 2209,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,123500,11000,124400"
st "T"
blo "10500,124200"
)
falseLabel (Text
uid 2210,0
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "15500,119600,16000,120500"
st "F"
blo "15500,120300"
)
inConnect (FlowConnect
uid 2211,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2212,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,118500,10500,119500"
)
direction 0
)
trueConnect (FlowConnect
uid 2213,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2214,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,122500,10500,123500"
)
direction 1
position 1
)
falseConnect (FlowConnect
uid 2215,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2216,0
ro 90
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "14500,120500,15500,121500"
)
direction 1
position 3
)
elsif 1
)
*399 (ActionBox
uid 2219,0
shape (Rectangle
uid 2220,0
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "5500,127050,14500,128950"
)
name (TextAssociate
uid 2221,0
ps "CenterOffsetStrategy"
text (Text
uid 2222,0
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "5500,126100,6500,127000"
st "a8"
blo "5500,126800"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
uid 2223,0
ps "CenterOffsetStrategy"
text (MLText
uid 2224,0
va (VaSet
font "courier,8,0"
)
xt "6000,127550,14000,128450"
st "bit_count := 0;"
tm "FcActions"
)
)
inConnect (FlowConnect
uid 2225,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2226,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,126550,10500,127550"
)
direction 0
)
outConnect (FlowConnect
uid 2227,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2228,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,128450,10500,129450"
)
direction 1
position 1
)
)
*400 (EndLoop
uid 2263,0
shape (Ellipse
uid 2264,0
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "7000,140000,13000,142000"
)
label (Text
uid 2265,0
va (VaSet
font "courier,8,1"
)
xt "8000,140550,12000,141450"
st "End Loop"
ju 0
blo "10000,141250"
)
inConnect (FlowConnect
uid 2266,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2267,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,139500,10500,140500"
)
direction 0
)
outConnect (FlowConnect
uid 2268,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2269,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,141500,10500,142500"
)
direction 1
position 1
)
loopConnect (FlowConnect
uid 2270,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2271,0
ro 270
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "6500,140500,7500,141500"
)
direction 1
position 2
)
)
*401 (EndPoint
uid 2276,0
shape (RoundedRectangle
uid 2277,0
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "7000,145000,13000,147000"
radius 400
)
label (Text
uid 2278,0
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "9100,145500,10900,146500"
st "End"
ju 0
blo "10000,146300"
)
inConnect (FlowConnect
uid 2279,0
ps "OnEdgeStrategy"
shape (Triangle
uid 2280,0
ro 180
va (VaSet
vasetType 1
isHidden 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,144500,10500,145500"
)
direction 0
)
)
*402 (Flow
uid 1978,0
shape (OrthoPolyLine
uid 1979,0
va (VaSet
vasetType 3
)
xt "10000,14000,10000,17600"
pts [
"10000,14000"
"10000,17600"
]
arrow 1
)
start &382
end &384
)
*403 (Flow
uid 1993,0
shape (OrthoPolyLine
uid 1994,0
va (VaSet
vasetType 3
)
xt "10000,20400,10000,24000"
pts [
"10000,20400"
"10000,24000"
]
arrow 1
)
start &384
end &385
)
*404 (Flow
uid 2005,0
shape (OrthoPolyLine
uid 2006,0
va (VaSet
vasetType 3
)
xt "10000,26000,10000,29000"
pts [
"10000,26000"
"10000,29000"
]
arrow 1
)
start &385
end &386
)
*405 (Flow
uid 2017,0
shape (OrthoPolyLine
uid 2018,0
va (VaSet
vasetType 3
)
xt "10000,31000,10000,35050"
pts [
"10000,31000"
"10000,35050"
]
arrow 1
)
start &386
end &387
)
*406 (Flow
uid 2029,0
shape (OrthoPolyLine
uid 2030,0
va (VaSet
vasetType 3
)
xt "10000,36950,10000,40050"
pts [
"10000,36950"
"10000,40050"
]
arrow 1
)
start &387
end &388
)
*407 (Flow
uid 2045,0
shape (OrthoPolyLine
uid 2046,0
va (VaSet
vasetType 3
)
xt "10000,41950,10000,46000"
pts [
"10000,41950"
"10000,46000"
]
arrow 1
)
start &388
end &389
)
*408 (Flow
uid 2057,0
shape (OrthoPolyLine
uid 2058,0
va (VaSet
vasetType 3
)
xt "10000,50000,10000,53600"
pts [
"10000,50000"
"10000,53600"
]
arrow 1
)
start &389
end &390
)
*409 (Flow
uid 2069,0
optionalChildren [
*410 (FlowJoin
uid 2071,0
ps "OnFlowStrategy"
shape (Circle
uid 2072,0
va (VaSet
vasetType 1
)
xt "9700,62700,10300,63300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 2070,0
va (VaSet
vasetType 3
)
xt "10000,56400,10000,65000"
pts [
"10000,56400"
"10000,65000"
]
arrow 1
)
start &390
end &391
)
*411 (Flow
uid 2073,0
shape (OrthoPolyLine
uid 2074,0
va (VaSet
vasetType 3
)
xt "10000,48000,18000,63000"
pts [
"15000,48000"
"18000,48000"
"18000,63000"
"10000,63000"
]
arrow 1
)
start &389
end &410
)
*412 (Flow
uid 2101,0
shape (OrthoPolyLine
uid 2102,0
va (VaSet
vasetType 3
)
xt "10000,69000,10000,72350"
pts [
"10000,69000"
"10000,72350"
]
arrow 1
)
start &391
end &392
)
*413 (Flow
uid 2117,0
shape (OrthoPolyLine
uid 2118,0
va (VaSet
vasetType 3
)
xt "10000,79650,10000,84000"
pts [
"10000,79650"
"10000,84000"
]
arrow 1
)
start &392
end &393
)
*414 (Flow
uid 2129,0
shape (OrthoPolyLine
uid 2130,0
va (VaSet
vasetType 3
)
xt "10000,88000,10000,92050"
pts [
"10000,88000"
"10000,92050"
]
arrow 1
)
start &393
end &394
)
*415 (Flow
uid 2141,0
shape (OrthoPolyLine
uid 2142,0
va (VaSet
vasetType 3
)
xt "15000,86000,22000,89050"
pts [
"15000,86000"
"22000,86000"
"22000,89050"
]
arrow 1
)
start &393
end &395
)
*416 (Flow
uid 2153,0
optionalChildren [
*417 (FlowJoin
uid 2155,0
ps "OnFlowStrategy"
shape (Circle
uid 2156,0
va (VaSet
vasetType 1
)
xt "9700,102700,10300,103300"
radius 300
)
)
*418 (FlowJoin
uid 2283,0
ps "OnFlowStrategy"
shape (Circle
uid 2284,0
va (VaSet
vasetType 1
)
xt "9700,102700,10300,103300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 2154,0
va (VaSet
vasetType 3
)
xt "10000,93950,10000,105000"
pts [
"10000,93950"
"10000,105000"
]
arrow 1
)
start &394
end &396
)
*419 (Flow
uid 2157,0
shape (OrthoPolyLine
uid 2158,0
va (VaSet
vasetType 3
)
xt "10000,90950,22000,103000"
pts [
"22000,90950"
"22000,103000"
"10000,103000"
]
arrow 1
)
start &395
end &417
)
*420 (Flow
uid 2173,0
shape (OrthoPolyLine
uid 2174,0
va (VaSet
vasetType 3
)
xt "10000,67000,35000,103000"
pts [
"15000,67000"
"35000,67000"
"35000,103000"
"10000,103000"
]
arrow 1
)
start &391
end &418
)
*421 (Flow
uid 2201,0
shape (OrthoPolyLine
uid 2202,0
va (VaSet
vasetType 3
)
xt "10000,109000,10000,113050"
pts [
"10000,109000"
"10000,113050"
]
arrow 1
)
start &396
end &397
)
*422 (Flow
uid 2217,0
shape (OrthoPolyLine
uid 2218,0
va (VaSet
vasetType 3
)
xt "10000,114950,10000,119000"
pts [
"10000,114950"
"10000,119000"
]
arrow 1
)
start &397
end &398
)
*423 (Flow
uid 2229,0
shape (OrthoPolyLine
uid 2230,0
va (VaSet
vasetType 3
)
xt "10000,123000,10000,127050"
pts [
"10000,123000"
"10000,127050"
]
arrow 1
)
start &398
end &399
)
*424 (Flow
uid 2241,0
optionalChildren [
*425 (FlowJoin
uid 2243,0
ps "OnFlowStrategy"
shape (Circle
uid 2244,0
va (VaSet
vasetType 1
)
xt "9700,137700,10300,138300"
radius 300
)
)
*426 (FlowJoin
uid 2285,0
ps "OnFlowStrategy"
shape (Circle
uid 2286,0
va (VaSet
vasetType 1
)
xt "9700,137700,10300,138300"
radius 300
)
)
]
shape (OrthoPolyLine
uid 2242,0
va (VaSet
vasetType 3
)
xt "10000,128950,10000,140000"
pts [
"10000,128950"
"10000,140000"
]
arrow 1
)
start &399
end &400
)
*427 (Flow
uid 2245,0
shape (OrthoPolyLine
uid 2246,0
va (VaSet
vasetType 3
)
xt "10000,121000,18000,138000"
pts [
"15000,121000"
"18000,121000"
"18000,138000"
"10000,138000"
]
arrow 1
)
start &398
end &425
)
*428 (Flow
uid 2261,0
shape (OrthoPolyLine
uid 2262,0
va (VaSet
vasetType 3
)
xt "10000,107000,22000,138000"
pts [
"15000,107000"
"22000,107000"
"22000,138000"
"10000,138000"
]
arrow 1
)
start &396
end &426
)
*429 (Flow
uid 2274,0
shape (OrthoPolyLine
uid 2275,0
va (VaSet
vasetType 3
)
xt "-5000,25000,7000,141000"
pts [
"7000,141000"
"-5000,141000"
"-5000,25000"
"7000,25000"
]
arrow 1
)
start &400
end &385
)
*430 (Flow
uid 2281,0
shape (OrthoPolyLine
uid 2282,0
va (VaSet
vasetType 3
)
xt "10000,142000,10000,145000"
pts [
"10000,142000"
"10000,145000"
]
arrow 1
)
start &400
end &401
)
]
bg "65535,65535,65535"
grid (Grid
origin "0,0"
isVisible 0
isActive 1
xSpacing 1000
xySpacing 1000
xShown 1
yShown 1
color "26368,26368,26368"
)
packageList *431 (PackageList
uid 1948,0
stg "VerticalLayoutStrategy"
textVec [
*432 (Text
uid 1949,0
va (VaSet
font "courier,8,1"
)
xt "-69775,4050,-63275,4950"
st "Package List"
blo "-69775,4750"
)
*433 (MLText
uid 1950,0
va (VaSet
font "courier,8,0"
)
xt "-69775,4950,-53275,8550"
tm "FcPackageListTextMgr"
)
]
)
compDirBlock (MlTextGroup
uid 1951,0
stg "VerticalLayoutStrategy"
textVec [
*434 (Text
uid 1952,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-54775,4500,-44775,5400"
st "Compiler Directives"
blo "-54775,5200"
)
*435 (Text
uid 1953,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-54775,5400,-43275,6300"
st "Pre-module directives:"
blo "-54775,6100"
)
*436 (MLText
uid 1954,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-54775,6300,-44675,8100"
st "`resetall
`timescale 1ns/10ps"
tm "FcCompilerDirectivesTextMgr"
)
*437 (Text
uid 1955,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-54775,8100,-42775,9000"
st "Post-module directives:"
blo "-54775,8800"
)
*438 (MLText
uid 1956,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-54775,4500,-54775,4500"
tm "FcCompilerDirectivesTextMgr"
)
*439 (Text
uid 1957,0
va (VaSet
isHidden 1
font "courier,8,1"
)
xt "-54775,9000,-43275,9900"
st "End-module directives:"
blo "-54775,9700"
)
*440 (MLText
uid 1958,0
va (VaSet
isHidden 1
font "courier,8,0"
)
xt "-54775,9900,-54775,9900"
tm "FcCompilerDirectivesTextMgr"
)
]
associable 1
)
windowSize "0,0,1015,690"
viewArea "0,0,0,0"
cachedDiagramExtent "0,0,0,0"
pageBreakOrigin "0,0"
isTopLevel 1
defaultCommentText (CommentText
shape (Rectangle
layer 0
va (VaSet
vasetType 1
fg "65280,65280,46080"
lineColor "0,0,32768"
)
xt "0,0,15000,5000"
)
text (MLText
va (VaSet
fg "0,0,32768"
font "courier,8,0"
)
xt "200,200,2200,1100"
st "
Text
"
tm "CommentText"
wrapOption 3
visibleHeight 4600
visibleWidth 14600
)
)
defaultPanel (Panel
shape (RectFrame
va (VaSet
vasetType 1
fg "65535,65535,65535"
lineColor "32768,0,0"
lineWidth 3
)
xt "0,0,20000,20000"
)
title (TextAssociate
ps "TopLeftStrategy"
text (Text
va (VaSet
font "courier,8,1"
)
xt "1000,1000,4000,1900"
st "Panel0"
blo "1000,1700"
tm "PanelText"
)
)
)
archDeclarativeBlock *441 (BiTextGroup
uid 1936,0
stg "VerticalLayoutStrategy"
first (Text
uid 1937,0
va (VaSet
font "courier,8,1"
)
xt "-74775,10750,-61775,11650"
st "Architecture Declarations"
blo "-74775,11450"
)
second (MLText
uid 1938,0
va (VaSet
font "courier,8,0"
)
xt "-74775,11650,-6775,819850"
st "

  
  ----------------------------------------------------------------------
  -- types to support frame data
  ----------------------------------------------------------------------
  -- Tx Data and Data_valid record
  type data_typ is record
      data : bit_vector(7 downto 0);  -- data
      valid : bit;                    -- data_valid
      error : bit;                    -- data_error
  end record;
  type frame_of_data_typ is array (natural range <>) of data_typ;

  -- Tx Data, Data_valid and underrun record
  type frame_typ is record
      columns   : frame_of_data_typ(0 to 65);-- data field
      bad_frame : boolean;  -- does this frame contain an error?
  end record;
  type frame_typ_ary is array (natural range <>) of frame_typ;

  ----------------------------------------------------------------------
  -- Stimulus - Frame data 
  ----------------------------------------------------------------------
  -- The following constant holds the stimulus for the testbench. It is 
  -- an ordered array of frames, with frame 0 the first to be injected 
  -- into the core receiver PHY interface by the testbench. 
  ----------------------------------------------------------------------
  constant frame_data : frame_typ_ary := (
   -------------
   -- Frame 0
   -------------
    0          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'),   -- 46th Byte of Data
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 1
   -------------
    1          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"80\", VALID => '1', ERROR => '0'), -- Length/Type = Type = 8000
       13      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"07\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"08\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"09\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"0A\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"0B\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"0C\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"0D\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"0E\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"0F\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"10\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"11\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"12\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"13\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"14\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"15\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"16\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"17\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"18\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"19\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"1A\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"1B\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"1C\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"1D\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"1E\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"1F\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"20\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"21\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"22\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"23\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"24\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"25\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"26\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"27\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"28\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"29\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"2A\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"2B\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"2C\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"2D\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), 
       60      => ( DATA => X\"2F\", VALID => '1', ERROR => '0'), -- 47th Data byte
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false),


   -------------
   -- Frame 2
   -------------
    2          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"2E\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 46
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), 
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '1'), -- assert error here
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

       -- Error this frame
      bad_frame => true),


   -------------
   -- Frame 3
   -------------
   3          => (
      columns  => (
        0      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Destination Address (DA)
        1      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        2      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        3      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        4      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        5      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
        6      => ( DATA => X\"5A\", VALID => '1', ERROR => '0'), -- Source Address   (5A)
        7      => ( DATA => X\"02\", VALID => '1', ERROR => '0'),
        8      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
        9      => ( DATA => X\"04\", VALID => '1', ERROR => '0'),
       10      => ( DATA => X\"05\", VALID => '1', ERROR => '0'),
       11      => ( DATA => X\"06\", VALID => '1', ERROR => '0'),
       12      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       13      => ( DATA => X\"03\", VALID => '1', ERROR => '0'), -- Length/Type = Length = 03
       14      => ( DATA => X\"01\", VALID => '1', ERROR => '0'), -- Therefore padding is required
       15      => ( DATA => X\"02\", VALID => '1', ERROR => '0'), 
       16      => ( DATA => X\"03\", VALID => '1', ERROR => '0'),
       17      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), -- Padding starts here
       18      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       19      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       20      => ( DATA => X\"00\", VALID => '1', ERROR => '0'), 
       21      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       22      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       23      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       24      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       25      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       26      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       27      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       28      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       29      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       30      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       31      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       32      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       33      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       34      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       35      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       36      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       37      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       38      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       39      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       40      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       41      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       42      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       43      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       44      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       45      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       46      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       47      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       48      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       49      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       50      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       51      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       52      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       53      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       54      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       55      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       56      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       57      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       58      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       59      => ( DATA => X\"00\", VALID => '1', ERROR => '0'),
       others  => ( DATA => X\"00\", VALID => '0', ERROR => '0')),

      -- No error in this frame
      bad_frame => false));



  ----------------------------------------------------------------------
  -- CRC engine 
  ----------------------------------------------------------------------
  function calc_crc (data : in std_logic_vector;
                     fcs  : in std_logic_vector)
  return std_logic_vector is   

     variable crc          : std_logic_vector(31 downto 0);
     variable crc_feedback : std_logic;     
  begin

    crc := not fcs;

    for I in 0 to 7 loop
      crc_feedback      := crc(0) xor data(I);

      crc(4 downto 0)   := crc(5 downto 1);
      crc(5)            := crc(6)  xor crc_feedback;
      crc(7 downto 6)   := crc(8 downto 7);
      crc(8)            := crc(9)  xor crc_feedback;
      crc(9)            := crc(10) xor crc_feedback;
      crc(14 downto 10) := crc(15 downto 11);
      crc(15)           := crc(16) xor crc_feedback;
      crc(18 downto 16) := crc(19 downto 17);
      crc(19)           := crc(20) xor crc_feedback;
      crc(20)           := crc(21) xor crc_feedback;
      crc(21)           := crc(22) xor crc_feedback;
      crc(22)           := crc(23);
      crc(23)           := crc(24) xor crc_feedback;
      crc(24)           := crc(25) xor crc_feedback;
      crc(25)           := crc(26);
      crc(26)           := crc(27) xor crc_feedback;
      crc(27)           := crc(28) xor crc_feedback;
      crc(28)           := crc(29);
      crc(29)           := crc(30) xor crc_feedback;
      crc(30)           := crc(31) xor crc_feedback;
      crc(31)           :=             crc_feedback;
    end loop; 
      
    -- return the CRC result                                  
    return not crc;

  end calc_crc;



  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B decoding
  ----------------------------------------------------------------------

  -- Decode the 8B10B code. No disparity verification is performed, just
  -- a simple table lookup.
  procedure decode_8b10b (
    constant d10  : in  std_logic_vector(0 to 9);
    variable q8   : out std_logic_vector(7 downto 0);
    variable is_k : out boolean) is
    variable k28 : boolean;
    variable d10_rev : std_logic_vector(9 downto 0);
  begin
    -- reverse the 10B codeword
    for i in 0 to 9 loop
      d10_rev(i) := d10(i);
    end loop;  -- i
    -- do the 6B5B decode
    case d10_rev(5 downto 0) is
      when \"000110\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"111001\" =>
        q8(4 downto 0) := \"00000\";   --D.0
      when \"010001\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"101110\" =>
        q8(4 downto 0) := \"00001\";   --D.1
      when \"010010\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"101101\" =>
        q8(4 downto 0) := \"00010\";   --D.2
      when \"100011\" =>
        q8(4 downto 0) := \"00011\";   --D.3
      when \"010100\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"101011\" =>
        q8(4 downto 0) := \"00100\";   --D.4
      when \"100101\" =>
        q8(4 downto 0) := \"00101\";   --D.5
      when \"100110\" =>
        q8(4 downto 0) := \"00110\";   --D.6
      when \"000111\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"111000\" =>
        q8(4 downto 0) := \"00111\";   --D.7
      when \"011000\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"100111\" =>
        q8(4 downto 0) := \"01000\";   --D.8
      when \"101001\" =>
        q8(4 downto 0) := \"01001\";   --D.9
      when \"101010\" =>
        q8(4 downto 0) := \"01010\";   --D.10
      when \"001011\" =>
        q8(4 downto 0) := \"01011\";   --D.11
      when \"101100\" =>
        q8(4 downto 0) := \"01100\";   --D.12
      when \"001101\" =>
        q8(4 downto 0) := \"01101\";   --D.13
      when \"001110\" =>
        q8(4 downto 0) := \"01110\";   --D.14
      when \"000101\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"111010\" =>
        q8(4 downto 0) := \"01111\";   --D.15
      when \"110110\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"001001\" =>
        q8(4 downto 0) := \"10000\";   --D.16
      when \"110001\" =>
        q8(4 downto 0) := \"10001\";   --D.17
      when \"110010\" =>
        q8(4 downto 0) := \"10010\";   --D.18
      when \"010011\" =>
        q8(4 downto 0) := \"10011\";   --D.19
      when \"110100\" =>
        q8(4 downto 0) := \"10100\";   --D.20
      when \"010101\" =>
        q8(4 downto 0) := \"10101\";   --D.21
      when \"010110\" =>
        q8(4 downto 0) := \"10110\";   --D.22
      when \"010111\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"101000\" =>
        q8(4 downto 0) := \"10111\";   --D/K.23
      when \"001100\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"110011\" =>
        q8(4 downto 0) := \"11000\";   --D.24
      when \"011001\" =>
        q8(4 downto 0) := \"11001\";   --D.25
      when \"011010\" =>
        q8(4 downto 0) := \"11010\";   --D.26
      when \"011011\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"100100\" =>
        q8(4 downto 0) := \"11011\";   --D/K.27
      when \"011100\" =>
        q8(4 downto 0) := \"11100\";   --D.28
      when \"111100\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"000011\" =>
        q8(4 downto 0) := \"11100\";   --K.28
      when \"011101\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"100010\" =>
        q8(4 downto 0) := \"11101\";   --D/K.29
      when \"011110\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"100001\" =>
        q8(4 downto 0) := \"11110\";   --D.30
      when \"110101\" =>
        q8(4 downto 0) := \"11111\";   --D.31
      when \"001010\" =>
        q8(4 downto 0) := \"11111\";   --D.31
        
      when others   =>
        q8(4 downto 0) := \"11110\";  --CODE VIOLATION - return /E/
    end case;

    k28 := not((d10(2) OR d10(3) OR d10(4) OR d10(5)
                OR NOT(d10(8) XOR d10(9)))) = '1';
    
    -- do the 4B3B decode
    case d10_rev(9 downto 6) is
      when \"0010\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1101\" =>
        q8(7 downto 5) := \"000\";       --D/K.x.0
      when \"1001\" =>
        if not k28 then
          q8(7 downto 5) := \"001\";     --D/K.x.1
        else
          q8(7 downto 5) := \"110\";     --K28.6
        end if;
      when \"0110\" =>
        if k28 then
          q8(7 downto 5) := \"001\";     --K.28.1
        else
          q8(7 downto 5) := \"110\";     --D/K.x.6
        end if;
      when \"1010\" =>
        if not k28 then
          q8(7 downto 5) := \"010\";     --D/K.x.2
        else
          q8(7 downto 5) := \"101\";     --K28.5
        end if;
      when \"0101\" =>
        if k28 then
          q8(7 downto 5) := \"010\";     --K28.2
        else
          q8(7 downto 5) := \"101\";     --D/K.x.5
        end if;
      when \"0011\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"1100\" =>
        q8(7 downto 5) := \"011\";       --D/K.x.3
      when \"0100\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"1011\" =>
        q8(7 downto 5) := \"100\";       --D/K.x.4
      when \"0111\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1000\" =>
        q8(7 downto 5) := \"111\";       --D.x.7
      when \"1110\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7
      when \"0001\" =>
        q8(7 downto 5) := \"111\";       --D/K.x.7

      when others =>
        q8(7 downto 5) := \"111\";   --CODE VIOLATION - return /E/
    end case;

    is_k := ((d10(2) and d10(3) and d10(4) and d10(5))
            or not (d10(2) or d10(3) or d10(4) or d10(5))
            or ((d10(4) xor d10(5))
              and ((d10(5) and d10(7) and d10(8) and d10(9))
                or not(d10(5) or d10(7) or d10(8) or d10(9))))) = '1' ;
  end decode_8b10b;


  
  ----------------------------------------------------------------------
  -- Procedure to perform comma detection
  ----------------------------------------------------------------------

  function is_comma (
    constant codegroup : in std_logic_vector(0 to 9))
    return boolean is
  begin  -- is_comma
    case codegroup(0 to 6) is
      when \"0011111\" =>
        return true;
      when \"1100000\" =>
        return true;
      when others =>
        return false;
    end case;
  end is_comma;


  ----------------------------------------------------------------------
  -- Procedure to perform 8B10B encoding
  ----------------------------------------------------------------------

  procedure encode_8b10b (
    constant d8                : in  std_logic_vector(7 downto 0);
    constant is_k              : in  boolean;
    variable q10               : out std_logic_vector(0 to 9);
    constant disparity_pos_in  : in  boolean;
    variable disparity_pos_out : out boolean) is
    variable b6                       : std_logic_vector(5 downto 0);
    variable b4                       : std_logic_vector(3 downto 0);
    variable k28, pdes6, a7, l13, l31 : boolean;
    variable a, b, c, d, e            : boolean;
  begin  -- encode_8b10b
    -- precalculate some common terms
    a := d8(0) = '1';
    b := d8(1) = '1';
    c := d8(2) = '1';
    d := d8(3) = '1';
    e := d8(4) = '1';

    k28 := is_k and d8(4 downto 0) = \"11100\";
    l13 := (((a xor b) and not (c or d))
            or ((c xor d) and not(a or b)));

    l31 := (((a xor b) and (c and d))
             or
             ((c xor d) and (a and b)));

    a7 := is_k or ((l31 and d and not e and disparity_pos_in)
                   or (l13 and not d and e and not disparity_pos_in));

    -- Do the 5B/6B conversion (calculate the 6b symbol)
    if k28 then                         --K.28
      if not disparity_pos_in then
        b6 := \"111100\";
      else
        b6 := \"000011\";
      end if;
    else
      case d8(4 downto 0) is
        when \"00000\" =>                 --D.0
          if disparity_pos_in then
            b6 := \"000110\";
          else
            b6 := \"111001\";
          end if;
        when \"00001\" =>                 --D.1
          if disparity_pos_in then
            b6 := \"010001\";
          else
            b6 := \"101110\";
          end if;
        when \"00010\" =>                 --D.2
          if disparity_pos_in then
            b6 := \"010010\";
          else
            b6 := \"101101\";
          end if;
        when \"00011\" =>
          b6 := \"100011\";               --D.3
        when \"00100\" =>                 --D.4
          if disparity_pos_in then
            b6 := \"010100\";
          else
            b6 := \"101011\";
          end if;
        when \"00101\" =>
          b6 := \"100101\";               --D.5
        when \"00110\" =>
          b6 := \"100110\";               --D.6
        when \"00111\" =>                 --D.7   
          if not disparity_pos_in then
            b6 := \"000111\";
          else
            b6 := \"111000\";
          end if;
        when \"01000\" =>                 --D.8
          if disparity_pos_in then
            b6 := \"011000\";
          else
            b6 := \"100111\";
          end if;
        when \"01001\" =>
          b6 := \"101001\";               --D.9
        when \"01010\" =>
          b6 := \"101010\";               --D.10
        when \"01011\" =>
          b6 := \"001011\";               --D.11
        when \"01100\" =>
          b6 := \"101100\";               --D.12
        when \"01101\" =>
          b6 := \"001101\";               --D.13
        when \"01110\" =>
          b6 := \"001110\";               --D.14
        when \"01111\" =>                 --D.15
          if disparity_pos_in then
            b6 := \"000101\";
          else
            b6 := \"111010\";
          end if;
        when \"10000\" =>                 --D.16
          if not disparity_pos_in then
            b6 := \"110110\";
          else
            b6 := \"001001\";
          end if;
        when \"10001\" =>
          b6 := \"110001\";               --D.17
        when \"10010\" =>
          b6 := \"110010\";               --D.18
        when \"10011\" =>
          b6 := \"010011\";               --D.19
        when \"10100\" =>
          b6 := \"110100\";               --D.20
        when \"10101\" =>
          b6 := \"010101\";               --D.21
        when \"10110\" =>
          b6 := \"010110\";               --D.22
        when \"10111\" =>                 --D/K.23
          if not disparity_pos_in then
            b6 := \"010111\";
          else
            b6 := \"101000\";
          end if;
        when \"11000\" =>                 --D.24
          if disparity_pos_in then
            b6 := \"001100\";
          else
            b6 := \"110011\";
          end if;
        when \"11001\" =>
          b6 := \"011001\";               --D.25
        when \"11010\" =>
          b6 := \"011010\";               --D.26
        when \"11011\" =>                 --D/K.27
          if not disparity_pos_in then
            b6 := \"011011\";
          else
            b6 := \"100100\";
          end if;
        when \"11100\" =>
          b6 := \"011100\";               --D.28
        when \"11101\" =>                 --D/K.29
          if not disparity_pos_in then
            b6 := \"011101\";
          else
            b6 := \"100010\";
          end if;
        when \"11110\" =>                 --D/K.30
          if not disparity_pos_in then
            b6 := \"011110\";
          else
            b6 := \"100001\";
          end if;
        when \"11111\" =>                 --D.31
          if not disparity_pos_in then
            b6 := \"110101\";
          else
            b6 := \"001010\";
          end if;
        when others =>
          b6 := \"XXXXXX\";
      end case;
    end if;

    -- reverse the bits
    for i in 0 to 5 loop
      q10(i) := b6(i);
    end loop;  -- i

    -- calculate the running disparity after the 5B6B block encode
    if k28 then
      pdes6 := not disparity_pos_in;
    else
      case d8(4 downto 0) is
        when \"00000\" => pdes6 := not disparity_pos_in;
        when \"00001\" => pdes6 := not disparity_pos_in;
        when \"00010\" => pdes6 := not disparity_pos_in;
        when \"00011\" => pdes6 := disparity_pos_in;
        when \"00100\" => pdes6 := not disparity_pos_in;
        when \"00101\" => pdes6 := disparity_pos_in;
        when \"00110\" => pdes6 := disparity_pos_in;
        when \"00111\" => pdes6 := disparity_pos_in;

        when \"01000\" => pdes6 := not disparity_pos_in;
        when \"01001\" => pdes6 := disparity_pos_in;
        when \"01010\" => pdes6 := disparity_pos_in;
        when \"01011\" => pdes6 := disparity_pos_in;
        when \"01100\" => pdes6 := disparity_pos_in;
        when \"01101\" => pdes6 := disparity_pos_in;
        when \"01110\" => pdes6 := disparity_pos_in;
        when \"01111\" => pdes6 := not disparity_pos_in;

        when \"10000\" => pdes6 := not disparity_pos_in;
        when \"10001\" => pdes6 := disparity_pos_in;
        when \"10010\" => pdes6 := disparity_pos_in;
        when \"10011\" => pdes6 := disparity_pos_in;
        when \"10100\" => pdes6 := disparity_pos_in;
        when \"10101\" => pdes6 := disparity_pos_in;
        when \"10110\" => pdes6 := disparity_pos_in;
        when \"10111\" => pdes6 := not disparity_pos_in;

        when \"11000\" => pdes6 := not disparity_pos_in;
        when \"11001\" => pdes6 := disparity_pos_in;
        when \"11010\" => pdes6 := disparity_pos_in;
        when \"11011\" => pdes6 := not disparity_pos_in;
        when \"11100\" => pdes6 := disparity_pos_in;
        when \"11101\" => pdes6 := not disparity_pos_in;
        when \"11110\" => pdes6 := not disparity_pos_in;
        when \"11111\" => pdes6 := not disparity_pos_in;
        when others  => pdes6 := disparity_pos_in;
      end case;
    end if;

    case d8(7 downto 5) is
      when \"000\" =>                     --D/K.x.0
        if pdes6 then
          b4 := \"0010\";
        else
          b4 := \"1101\";
        end if;
      when \"001\" =>                     --D/K.x.1
        if k28 and not pdes6 then
          b4 := \"0110\";
        else
          b4 := \"1001\";
        end if;
      when \"010\" =>                     --D/K.x.2
        if k28 and not pdes6 then
          b4 := \"0101\";
        else
          b4 := \"1010\";
        end if;
      when \"011\" =>                     --D/K.x.3
        if not pdes6 then
          b4 := \"0011\";
        else
          b4 := \"1100\";
        end if;
      when \"100\" =>                     --D/K.x.4
        if pdes6 then
          b4 := \"0100\";
        else
          b4 := \"1011\";
        end if;
      when \"101\" =>                     --D/K.x.5
        if k28 and not pdes6 then
          b4 := \"1010\";
        else
          b4 := \"0101\";
        end if;
      when \"110\" =>                     --D/K.x.6
        if k28 and not pdes6 then
          b4 := \"1001\";
        else
          b4 := \"0110\";
        end if;
      when \"111\" =>                     --D.x.P7
        if not a7 then
          if not pdes6 then
            b4 := \"0111\";
          else
            b4 := \"1000\";
          end if;
        else                            --D/K.y.A7
          if not pdes6 then
            b4 := \"1110\";
          else
            b4 := \"0001\";
          end if;
        end if;
      when others =>
        b4 := \"XXXX\";
    end case;

    -- Reverse the bits
    for i in 0 to 3 loop
      q10(i+6) := b4(i);
    end loop;  -- i

    -- Calculate the running disparity after the 4B group
    case d8(7 downto 5) is
      when \"000\"  =>
        disparity_pos_out := not pdes6;
      when \"001\"  =>
        disparity_pos_out := pdes6;
      when \"010\"  =>
        disparity_pos_out := pdes6;
      when \"011\"  =>
        disparity_pos_out := pdes6;
      when \"100\"  =>
        disparity_pos_out := not pdes6;
      when \"101\"  =>
        disparity_pos_out := pdes6;
      when \"110\"  =>
        disparity_pos_out := pdes6;
      when \"111\"  =>
        disparity_pos_out := not pdes6;
      when others =>
        disparity_pos_out := pdes6;
    end case;
    
  end encode_8b10b;



  ----------------------------------------------------------------------
  -- testbench signals and constants
  ----------------------------------------------------------------------

  -- Unit Interval for Gigabit Ethernet
  constant UI  : time := 800 ps;

  -- testbench clocks and sampling
  signal bitclock             : std_logic;   -- clock running at RocketIO serial frequency
  signal stim_rx_sample       : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 
  signal mon_tx_sample        : std_logic;   -- Sample on every clock at 1Gbps, every 10 clocks at 100Mbps, every 100 clocks at 10Mbps 

  -- signals for the Tx monitor following 8B10B decode
  signal tx_pdata       : std_logic_vector(7 downto 0);  
  signal tx_is_k        : std_logic;

  -- signals for the Rx stimulus prior to 8B10B encode
  signal rx_pdata       : std_logic_vector(7 downto 0) := \"10111100\";
  signal rx_is_k        : boolean := true;
  signal rx_even        : std_logic := '1'; -- Keep track of the even/odd position
  signal rx_rundisp_pos : boolean := false; -- Indicates +ve running disparity

  -- testbench control signals
  signal current_speed       : string(1 to 6) := \"1gig  \";


  
"
tm "FcArchDeclTextMgr"
)
associable 1
)
archConcurrentStatementBlock *442 (BiTextGroup
uid 1939,0
stg "VerticalLayoutStrategy"
first (Text
uid 1940,0
va (VaSet
font "courier,8,1"
)
xt "-74775,823850,-63775,824750"
st "Concurrent Statements"
blo "-74775,824550"
)
second (MLText
uid 1941,0
va (VaSet
font "courier,8,0"
)
xt "-74775,824750,-39275,837350"
st "
----------------------------------------------------------------------
-- Simulus processes
--------------------
-- Send four frames through the MAC and Design Example
--      -- frame 0 = minimum length frame
--      -- frame 1 = type frame
--      -- frame 2 = errored frame
--      -- frame 3 = padded frame
----------------------------------------------------------------------
-- sample on every clock
stim_rx_sample <= '1'; 
-- sample on every clock
mon_tx_sample <= '1';
"
tm "FcArchConcStmtTextMgr"
)
associable 1
)
processDeclarativeBlock *443 (BiTextGroup
uid 1942,0
stg "VerticalLayoutStrategy"
first (Text
uid 1943,0
va (VaSet
font "courier,8,1"
)
xt "-74775,847150,-64275,848050"
st "Process Declarations"
blo "-74775,847850"
)
second (MLText
uid 1944,0
va (VaSet
font "courier,8,0"
)
xt "-74775,848050,-45775,854350"
st "
    variable code_buffer  : std_logic_vector(0 to 9);
    variable decoded_data : std_logic_vector(7 downto 0);
    variable bit_count    : integer;
    variable is_k_var     : boolean;
 variable initial_sync : boolean;

"
tm "FcProcDeclTextMgr"
)
associable 1
)
sensitivityListBlock *444 (BiTextGroup
uid 1945,0
stg "VerticalLayoutStrategy"
first (Text
uid 1946,0
va (VaSet
font "courier,8,1"
)
xt "-74775,841350,-66275,842250"
st "Sensitivity List"
blo "-74775,842050"
)
second (MLText
uid 1947,0
va (VaSet
font "courier,8,0"
)
xt "-74775,842250,-67775,843150"
tm "FcSensListTextMgr"
)
)
)
genChar (FcGenChar
uid 1959,0
machineMode 1
resetActions ""
resetMode 1
resetName ""
resetCondition ""
vlogResetSensitivity ""
resetPolarity 0
clockPolarity 0
clockSigName ""
clockCondition ""
verilogProcessStatementType 0
verilogBlockType 0
instrumentForAnimation 0
insertSetResetPragma 0
setresetPragma 0
)
name "p_tx_decode"
)
]
lastUid 2288,0
LanguageMgr "VhdlLangMgr"
commonDM (CommonDM
ldm (LogicalDM
emptyRow *445 (LEmptyRow
)
optionalChildren [
*446 (RefLabelRowHdr
)
*447 (TitleRowHdr
)
*448 (FilterRowHdr
)
*449 (RefLabelColHdr
tm "RefLabelColHdrMgr"
)
*450 (RowExpandColHdr
tm "RowExpandColHdrMgr"
)
*451 (GroupColHdr
tm "GroupColHdrMgr"
)
*452 (NameColHdr
tm "FcNameColHdrMgr"
)
*453 (ModeColHdr
tm "FcModeColHdrMgr"
)
*454 (TypeColHdr
tm "FcTypeColHdrMgr"
)
*455 (BoundsColHdr
tm "FcBoundsColHdrMgr"
)
*456 (InitColHdr
tm "FcInitColHdrMgr"
)
*457 (EolColHdr
tm "FcEolColHdrMgr"
)
]
)
pdm (PhysicalDM
displayShortBounds 1
editShortBounds 1
optionalChildren [
*458 (Sheet
sheetRow (SheetRow
headerVa (MVa
cellColor "49152,49152,49152"
fontColor "0,0,0"
font "courier,10,0"
)
cellVa (MVa
cellColor "65535,65535,65535"
fontColor "0,0,0"
font "courier,10,0"
)
groupVa (MVa
cellColor "39936,56832,65280"
fontColor "0,0,0"
font "courier,10,0"
)
emptyMRCItem *459 (MRCItem
litem &445
pos 3
dimension 20
)
optionalChildren [
*460 (MRCItem
litem &446
pos 0
dimension 20
)
*461 (MRCItem
litem &447
pos 1
dimension 23
)
*462 (MRCItem
litem &448
pos 2
hidden 1
dimension 20
)
]
)
sheetCol (SheetCol
propVa (MVa
cellColor "0,49152,49152"
fontColor "0,0,0"
font "courier,10,0"
textAngle 90
)
optionalChildren [
*463 (MRCItem
litem &449
pos 0
dimension 20
)
*464 (MRCItem
litem &451
pos 1
dimension 50
)
*465 (MRCItem
litem &452
pos 2
dimension 100
)
*466 (MRCItem
litem &453
pos 3
dimension 50
)
*467 (MRCItem
litem &454
pos 4
dimension 100
)
*468 (MRCItem
litem &455
pos 5
dimension 100
)
*469 (MRCItem
litem &456
pos 6
dimension 50
)
*470 (MRCItem
litem &457
pos 7
dimension 80
)
]
)
fixedCol 4
fixedRow 2
name "Ports"
vaOverrides [
]
)
]
)
)
cdmCfc &1
genericsCommonDM (CommonDM
ldm (LogicalDM
emptyRow *471 (LEmptyRow
)
optionalChildren [
*472 (RefLabelRowHdr
)
*473 (TitleRowHdr
)
*474 (FilterRowHdr
)
*475 (RefLabelColHdr
tm "RefLabelColHdrMgr"
)
*476 (RowExpandColHdr
tm "RowExpandColHdrMgr"
)
*477 (GroupColHdr
tm "GroupColHdrMgr"
)
*478 (NameColHdr
tm "GenericNameColHdrMgr"
)
*479 (TypeColHdr
tm "GenericTypeColHdrMgr"
)
*480 (InitColHdr
tm "GenericValueColHdrMgr"
)
*481 (PragmaColHdr
tm "GenericPragmaColHdrMgr"
)
*482 (EolColHdr
tm "GenericEolColHdrMgr"
)
]
)
pdm (PhysicalDM
displayShortBounds 1
editShortBounds 1
optionalChildren [
*483 (Sheet
sheetRow (SheetRow
headerVa (MVa
cellColor "49152,49152,49152"
fontColor "0,0,0"
font "courier,10,0"
)
cellVa (MVa
cellColor "65535,65535,65535"
fontColor "0,0,0"
font "courier,10,0"
)
groupVa (MVa
cellColor "39936,56832,65280"
fontColor "0,0,0"
font "courier,10,0"
)
emptyMRCItem *484 (MRCItem
litem &471
pos 3
dimension 20
)
optionalChildren [
*485 (MRCItem
litem &472
pos 0
dimension 20
)
*486 (MRCItem
litem &473
pos 1
dimension 23
)
*487 (MRCItem
litem &474
pos 2
hidden 1
dimension 20
)
]
)
sheetCol (SheetCol
propVa (MVa
cellColor "0,49152,49152"
fontColor "0,0,0"
font "courier,10,0"
textAngle 90
)
optionalChildren [
*488 (MRCItem
litem &475
pos 0
dimension 20
)
*489 (MRCItem
litem &477
pos 1
dimension 50
)
*490 (MRCItem
litem &478
pos 2
dimension 100
)
*491 (MRCItem
litem &479
pos 3
dimension 100
)
*492 (MRCItem
litem &480
pos 4
dimension 50
)
*493 (MRCItem
litem &481
pos 5
dimension 50
)
*494 (MRCItem
litem &482
pos 6
dimension 80
)
]
)
fixedCol 3
fixedRow 2
name "Ports"
vaOverrides [
]
)
]
)
type 1
)
defaultActionBox (ActionBox
shape (Rectangle
va (VaSet
vasetType 1
fg "0,65535,65535"
lineColor "0,32768,49152"
lineWidth 2
)
xt "0,0,12000,4000"
)
name (TextAssociate
ps "CenterOffsetStrategy"
text (Text
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "0,-950,1000,-50"
st "a0"
blo "0,-250"
tm "FcNodeNameMgr"
)
)
actions (TextAssociate
ps "CenterOffsetStrategy"
text (MLText
va (VaSet
font "courier,8,0"
)
xt "4000,1550,8000,2450"
st "actions;"
tm "FcActions"
)
)
inConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "5500,-500,6500,500"
)
direction 0
)
outConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "5500,3500,6500,4500"
)
direction 1
position 1
)
)
defaultCompositeActionBox (CompositeActionBox
shape (DoubleRectangle
va (VaSet
vasetType 1
fg "29952,39936,65280"
lineWidth 2
)
xt "0,0,12000,4000"
)
name (TextAssociate
ps "CenterOffsetStrategy"
text (Text
va (VaSet
font "courier,10,1"
)
xt "5400,1500,6600,2500"
st "a0"
ju 0
blo "6000,2300"
tm "FcNodeNameMgr"
)
)
inConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "5500,-500,6500,500"
)
direction 0
)
outConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "5500,3500,6500,4500"
)
direction 1
position 1
)
childDiagram &0
)
defaultDecisionBox (DecisionBox
shape (Diamond
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "0,0,10000,4000"
)
name (TextAssociate
ps "EdgeToEdgeStrategy"
text (Text
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "0,-950,1000,-50"
st "d0"
blo "0,-250"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
ps "EdgeToEdgeStrategy"
text (MLText
va (VaSet
font "courier,8,0"
)
xt "2750,1550,7250,2450"
st "condition"
tm "FcConditionMgr"
)
)
trueLabel (Text
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "5500,4500,6000,5400"
st "T"
blo "5500,5200"
)
falseLabel (Text
va (VaSet
fg "32768,0,0"
font "courier,8,1"
)
xt "10500,600,11000,1500"
st "F"
blo "10500,1300"
)
inConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "4500,-500,5500,500"
)
direction 0
)
trueConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "4500,3500,5500,4500"
)
direction 1
position 1
)
falseConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 90
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "9500,1500,10500,2500"
)
direction 1
position 3
)
elsif 1
)
defaultWaitBox (WaitBox
shape (Octagon
va (VaSet
vasetType 1
fg "65535,0,0"
)
xt "0,0,2000,2000"
)
name (TextAssociate
ps "CenterOffsetStrategy"
text (Text
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "0,-950,1000,-50"
st "w0"
blo "0,-250"
tm "FcNodeNameMgr"
)
)
condition (TextAssociate
ps "CenterOffsetStrategy"
text (MLText
va (VaSet
font "courier,8,0"
)
xt "2250,550,4750,1450"
st "wait;"
tm "FcWaitMgr"
)
)
inConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "500,-500,1500,500"
)
direction 0
)
outConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "500,1500,1500,2500"
)
direction 1
position 1
)
)
defaultStartPoint (StartPoint
shape (RoundedRectangle
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "0,0,6000,2000"
radius 400
)
label (Text
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "1500,500,4500,1500"
st "Start"
ju 0
blo "3000,1300"
)
outConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "2500,1500,3500,2500"
)
direction 1
position 1
)
)
defaultEndPoint (EndPoint
shape (RoundedRectangle
va (VaSet
vasetType 1
fg "49152,0,49152"
lineWidth 2
)
xt "0,0,6000,2000"
radius 400
)
label (Text
va (VaSet
fg "65535,65535,65535"
font "courier,10,1"
)
xt "2100,500,3900,1500"
st "End"
ju 0
blo "3000,1300"
)
inConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "2500,-500,3500,500"
)
direction 0
)
)
defaultStartLoop (StartLoop
shape (Ellipse
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "0,0,6000,2000"
)
label (Text
va (VaSet
font "courier,8,1"
)
xt "2000,550,4000,1450"
st "Loop"
ju 0
blo "3000,1250"
)
name (TextAssociate
ps "CenterOffsetStrategy"
text (Text
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "0,-950,1000,-50"
st "l0"
blo "0,-250"
tm "FcNodeNameMgr"
)
)
loopControlAssoc (TextAssociate
ps "CenterOffsetStrategy"
text (MLText
va (VaSet
font "courier,8,0"
)
xt "3000,1000,3000,1000"
tm "FcLoopTextMgr"
)
)
inConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "2500,-500,3500,500"
)
direction 0
)
outConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "2500,1500,3500,2500"
)
direction 1
position 1
)
loopConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 90
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "-500,500,500,1500"
)
direction 0
position 2
)
)
defaultEndLoop (EndLoop
shape (Ellipse
va (VaSet
vasetType 1
fg "0,65535,0"
lineColor "0,32896,0"
lineWidth 2
)
xt "0,0,6000,2000"
)
label (Text
va (VaSet
font "courier,8,1"
)
xt "1000,550,5000,1450"
st "End Loop"
ju 0
blo "3000,1250"
)
inConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "2500,-500,3500,500"
)
direction 0
)
outConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "2500,1500,3500,2500"
)
direction 1
position 1
)
loopConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 270
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "-500,500,500,1500"
)
direction 1
position 2
)
)
defaultStartCase (StartCase
shape (Pentagon
ro 180
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "0,0,28000,4000"
)
label (Text
va (VaSet
font "courier,8,1"
)
xt "13000,1550,15000,2450"
st "Case"
ju 0
blo "14000,2250"
)
name (TextAssociate
ps "CenterOffsetStrategy"
text (Text
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "0,-950,1000,-50"
st "c0"
blo "0,-250"
tm "FcCaseNameMgr"
)
)
caseExpression (TextAssociate
ps "CenterOffsetStrategy"
text (MLText
va (VaSet
font "courier,8,0"
)
xt "11250,2650,16750,3550"
st "expression"
ju 0
tm "FcCaseExpressionMgr"
)
)
inConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "13500,-500,14500,500"
)
direction 0
)
endCase *495 (EndCase
ps "CenterOffsetStrategy"
shape (Pentagon
va (VaSet
vasetType 1
fg "65535,65535,37120"
lineWidth 2
)
xt "10000,24000,18000,28000"
)
label (Text
va (VaSet
font "courier,8,1"
)
xt "12000,25550,16000,26450"
st "End Case"
ju 0
blo "14000,26250"
)
name (TextAssociate
ps "CenterOffsetStrategy"
text (Text
va (VaSet
fg "0,32768,49152"
font "courier,8,0"
)
xt "10000,23050,11000,23950"
st "c0"
blo "10000,23750"
tm "FcCaseNameMgr"
)
)
inConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "13500,23500,14500,24500"
)
direction 0
)
outConnect (FlowConnect
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
lineColor "65535,0,0"
fillStyle 12
)
xt "13500,27500,14500,28500"
)
direction 1
position 1
)
)
verilogCaseMode 0
)
defaultCasePort (CasePort
ps "OnEdgeStrategy"
shape (Triangle
ro 180
va (VaSet
vasetType 1
fg "65535,0,0"
fillStyle 12
)
xt "0,0,1000,1000"
)
name (TextAssociate
ps "CenterOffsetStrategy"
text (MLText
va (VaSet
font "courier,8,1"
)
xt "1000,500,4000,1400"
st "value0"
tm "FcCasePortNameMgr"
)
)
)
defaultFlow (Flow
shape (OrthoPolyLine
va (VaSet
vasetType 3
)
pts [
"0,0"
"0,0"
]
arrow 1
)
ss 0
es 0
)
defaultFlowJoin (FlowJoin
ps "OnFlowStrategy"
shape (Circle
va (VaSet
vasetType 1
)
xt "-300,-300,300,300"
radius 300
)
)
)
