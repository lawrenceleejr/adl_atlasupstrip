-- VHDL Entity ethernet_v4.eth2x16_top.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
library unisim;
use unisim.vcomponents.all;
use work.eth_types.all;

library utils;
use utils.pkg_types.all;

entity eth2x16_top is
   port( 
      machost_data_i      : in     std_logic_vector (63 downto 0);
      machost_addr_i      : in     std_logic_vector (10 downto 0);
      REFCLK2_i           : in     std_logic;
      REFCLK1_i           : in     std_logic;
      clk_25_50_i         : in     std_logic;
      hostclk_i           : in     std_logic;
      init_i              : in     std_logic;
      host_reset_i        : in     std_logic;
      tx_fifo_clk_i       : in     std_logic;
      sf_ratesel_o        : out    std_logic_vector (1 downto 0);
      sf_txdisable_o      : out    std_logic_vector (1 downto 0);
      sf_scl_o            : out    std_logic_vector (1 downto 0);
      sf_sda_i            : in     std_logic_vector (1 downto 0);
      spare_o0            : out    std_logic_vector (63 downto 0);
      spare_i0            : in     std_logic_vector (63 downto 0);
      spare_o1            : out    std_logic_vector (63 downto 0);
      spare_i1            : in     std_logic_vector (63 downto 0);
      quanta_timer_tick_i : in     std_logic;
      rx_fifo_clk_i       : in     std_logic;
      resetdone_o         : out    std_logic;
      stat_word           : out    slv64_array (1 downto 0);
      mac_stat            : out    slv64_array (1 downto 0);
      sf_sda_o            : out    std_logic_vector (1 downto 0);
      sf_sda_to           : out    std_logic_vector (1 downto 0);
      sf_txfault_i        : in     std_logic_vector (1 downto 0);
      sf_absent_i         : in     std_logic_vector (1 downto 0);
      sfp_los_i           : in     std_logic_vector (1 downto 0);
      --EMAC-MGT link status
      syncacq_o           : out    std_logic_vector (1 downto 0);
      ext_pause_clr       : in     std_logic_vector (1 downto 0);
      ext_pause_req       : in     std_logic_vector (1 downto 0);
      rx_fifo_rst_i       : in     std_logic;
      rxp_i               : in     std_logic_vector (1 downto 0);
      rxn_i               : in     std_logic_vector (1 downto 0);
      txp_o               : out    std_logic_vector (1 downto 0);
      txn_o               : out    std_logic_vector (1 downto 0);
      tx_fifo_rst_i       : in     std_logic;
      machost_wr_i        : in     std_logic_vector (1 downto 0);
      machost_data_o      : out    slv64_array (1 downto 0);
      machost_rd_i        : in     std_logic_vector (1 downto 0);
      tx_ack_o            : out    std_logic_vector (1 downto 0);
      rx_goodframe_o      : out    std_logic_vector (1 downto 0);
      rx_data_o           : out    slv16;
      rx_dst_rdy_i        : in     std_logic;
      rx_sof_o            : out    std_logic;
      rx_src_rdy_o        : out    std_logic;
      rx_eof_o            : out    std_logic;
      tx_data_i           : in     slv16;
      tx_eof_i            : in     std_logic;
      tx_src_rdy_i        : in     std_logic;
      tx_dst_rdy_o        : out    std_logic;
      tx_sof_i            : in     std_logic
   );

-- Declarations

end eth2x16_top ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- ethernet_v4.eth2x16_top.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
library utils;
use utils.pkg_types.all;


architecture struct of eth2x16_top is

   -- Architecture declarations

   -- Internal signal declarations
   signal sfp_sda_o                : std_logic_vector(1 downto 0);
   signal sfp_sda_to               : std_logic_vector(1 downto 0);
   signal tx_ifg_delay_0           : std_logic_vector(7 downto 0);
   signal tx_ifg_delay_1           : std_logic_vector(7 downto 0);
   signal HOSTRDDATA               : std_logic_vector(31 downto 0);
   signal HOSTWRDATA               : std_logic_vector(31 downto 0);
   -- Generic Host Interface
   signal HOSTOPCODE               : std_logic_vector(1 downto 0);
   signal HOSTADDR                 : std_logic_vector(9 downto 0);
   signal PHYAD_1                  : std_logic_vector(4 downto 0);
   signal PHYAD_0                  : std_logic_vector(4 downto 0);
   signal HOSTMIIMRDY              : std_logic;
   signal HOSTREQ                  : std_logic;
   signal HOSTMIIMSEL              : std_logic;
   signal HOSTEMAC1SEL             : std_logic;
   -- 1000BASE-X PCS/PMA RocketIO Reference Clock buffer inputs
   signal mgtclk_extp_unused       : std_logic;
   signal mgtclk_extn_unused       : std_logic;
   signal resetdone1               : std_logic;
   signal resetdone0               : std_logic;
   signal EMACCLIENTRXSTATS        : slv7_array(1 downto 0);
   signal tx_fifo_stat             : slv4_array(1 downto 0);
   signal RX_LL_FIFO_STATUS        : slv4_array(1 downto 0);
   signal tx_status                : slv32_array(1 downto 0);
   signal rxdcount                 : slv32_array(1 downto 0);
   signal rx_status                : slv28_array(1 downto 0);
   signal EMACCLIENTTXSTATS        : slv2;
   signal EMACCLIENTTXSTATSVLD     : slv2;
   signal EMACCLIENTRXSTATSBYTEVLD : slv2;
   signal EMACCLIENTRXSTATSVLD     : slv2;
   signal EMACCLIENTTXSTATSBYTEVLD : slv2;
   -- client interface clocking signals - EMAC0
   signal tx_client_clk0           : std_logic;
   -- client interface clocking signals - EMAC0
   signal tx_client_clk1           : std_logic;
   -- client interface clocking signals - EMAC0
   signal rx_client_clk0           : std_logic;
   -- client interface clocking signals - EMAC0
   signal rx_client_clk1           : std_logic;
   signal rx_overflow              : slv2;
   signal tx_overflow              : slv2;
   signal tx_retransmit            : slv2;
   signal tx_collision             : slv2;
   -- MAC Control Interface - EMAC0
   signal pause_req                : slv2;
   signal EMACCLIENTRXFRAMEDROP    : slv2;
   -- Client Receiver Interface - EMAC0
   signal rx_dvld                  : std_logic_vector(1 downto 0);
   signal pause_val                : slv16_array(1 downto 0);
   signal HI                       : std_logic;
   signal LO                       : std_logic;
   signal rx_eof_n                 : std_logic;
   signal rx_dst_rdy_n             : std_logic;
   signal rx_src_rdy_n             : std_logic;
   signal rx_sof_n                 : std_logic;
   signal tx_eof_n                 : std_logic;
   signal tx_src_rdy_n             : std_logic;
   signal tx_sof_n                 : std_logic;
   signal tx_dst_rdy_n             : std_logic;

   -- Implicit buffer signal declarations
   signal syncacq_o_internal : std_logic_vector (1 downto 0);


   -- Component Declarations
   component eth2x16_locallink_muxed
   port (
      -- Local link Receiver Interface - EMAC0
      RX_LL_CLOCK_0             : in     std_logic ;
      RX_LL_RESET_0             : in     std_logic ;
      RX_LL_DATA_0              : out    std_logic_vector (15 downto 0);
      RX_LL_SOF_N_0             : out    std_logic ;
      RX_LL_EOF_N_0             : out    std_logic ;
      RX_LL_SRC_RDY_N_0         : out    std_logic ;
      RX_LL_DST_RDY_N_0         : in     std_logic ;
      RX_LL_FIFO_STATUS_0       : out    std_logic_vector (3 downto 0);
      -- Local link Transmitter Interface - EMAC0
      TX_LL_CLOCK_0             : in     std_logic ;
      TX_LL_RESET_0             : in     std_logic ;
      TX_LL_DATA_0              : in     std_logic_vector (15 downto 0);
      TX_LL_SOF_N_0             : in     std_logic ;
      TX_LL_EOF_N_0             : in     std_logic ;
      TX_LL_SRC_RDY_N_0         : in     std_logic ;
      TX_LL_DST_RDY_N_0         : out    std_logic ;
      TX_LL_REM_0               : in     std_logic ;                   -- Erdem
      -- Client Receiver Interface - EMAC0
      EMAC0CLIENTRXDVLD         : out    std_logic ;
      EMAC0CLIENTRXFRAMEDROP    : out    std_logic ;
      EMAC0CLIENTRXSTATS        : out    std_logic_vector (6 downto 0);
      EMAC0CLIENTRXSTATSVLD     : out    std_logic ;
      EMAC0CLIENTRXSTATSBYTEVLD : out    std_logic ;
      -- Client Transmitter Interface - EMAC0
      CLIENTEMAC0TXIFGDELAY     : in     std_logic_vector (7 downto 0);
      EMAC0CLIENTTXSTATS        : out    std_logic ;
      EMAC0CLIENTTXSTATSVLD     : out    std_logic ;
      EMAC0CLIENTTXSTATSBYTEVLD : out    std_logic ;
      -- MAC Control Interface - EMAC0
      CLIENTEMAC0PAUSEREQ       : in     std_logic ;
      CLIENTEMAC0PAUSEVAL       : in     std_logic_vector (15 downto 0);
      --EMAC-MGT link status
      EMAC0CLIENTSYNCACQSTATUS  : out    std_logic ;
      -- Clock Signals - EMAC0
      RX_CLIENT_CLK_0           : out    std_logic ;
      TX_CLIENT_CLK_0           : out    std_logic ;
      -- 1000BASE-X PCS/PMA Interface - EMAC0
      TXP_0                     : out    std_logic ;
      TXN_0                     : out    std_logic ;
      RXP_0                     : in     std_logic ;
      RXN_0                     : in     std_logic ;
      PHYAD_0                   : in     std_logic_vector (4 downto 0);
      RESETDONE_0               : out    std_logic ;
      -- MDIO Interface - EMAC0
      MDC_0                     : out    std_logic ;
      MDIO_0_I                  : in     std_logic ;
      MDIO_0_O                  : out    std_logic ;
      MDIO_0_T                  : out    std_logic ;
      -- Local link Receiver Interface - EMAC1
      --      RX_LL_CLOCK_1             : in     std_logic;
      --      RX_LL_RESET_1             : in     std_logic;
      --      RX_LL_DATA_1              : out    std_logic_vector (15 downto 0);
      --      RX_LL_SOF_N_1             : out    std_logic;
      --      RX_LL_EOF_N_1             : out    std_logic;
      --      RX_LL_SRC_RDY_N_1         : out    std_logic;
      --      RX_LL_DST_RDY_N_1         : in     std_logic;
      --      RX_LL_FIFO_STATUS_1       : out    std_logic_vector (3 downto 0);
      -- Local link Transmitter Interface - EMAC1
      --      TX_LL_CLOCK_1             : in     std_logic;
      --      TX_LL_RESET_1             : in     std_logic;
      --      TX_LL_DATA_1              : in     std_logic_vector (15 downto 0);
      --      TX_LL_SOF_N_1             : in     std_logic;
      --      TX_LL_EOF_N_1             : in     std_logic;
      --      TX_LL_SRC_RDY_N_1         : in     std_logic;
      --      TX_LL_DST_RDY_N_1         : out    std_logic;
      --              TX_LL_REM_1                     : in  std_logic;  -- Erdem
      -- Client Receiver Interface - EMAC1
      EMAC1CLIENTRXDVLD         : out    std_logic ;
      EMAC1CLIENTRXFRAMEDROP    : out    std_logic ;
      EMAC1CLIENTRXSTATS        : out    std_logic_vector (6 downto 0);
      EMAC1CLIENTRXSTATSVLD     : out    std_logic ;
      EMAC1CLIENTRXSTATSBYTEVLD : out    std_logic ;
      -- Client Transmitter Interface - EMAC1
      CLIENTEMAC1TXIFGDELAY     : in     std_logic_vector (7 downto 0);
      EMAC1CLIENTTXSTATS        : out    std_logic ;
      EMAC1CLIENTTXSTATSVLD     : out    std_logic ;
      EMAC1CLIENTTXSTATSBYTEVLD : out    std_logic ;
      -- MAC Control Interface - EMAC1
      CLIENTEMAC1PAUSEREQ       : in     std_logic ;
      CLIENTEMAC1PAUSEVAL       : in     std_logic_vector (15 downto 0);
      --EMAC-MGT link status
      EMAC1CLIENTSYNCACQSTATUS  : out    std_logic ;
      -- Clock Signals - EMAC1
      RX_CLIENT_CLK_1           : out    std_logic ;
      TX_CLIENT_CLK_1           : out    std_logic ;
      -- 1000BASE-X PCS/PMA Interface - EMAC1
      TXP_1                     : out    std_logic ;
      TXN_1                     : out    std_logic ;
      RXP_1                     : in     std_logic ;
      RXN_1                     : in     std_logic ;
      PHYAD_1                   : in     std_logic_vector (4 downto 0);
      RESETDONE_1               : out    std_logic ;
      -- MDIO Interface - EMAC1
      MDC_1                     : out    std_logic ;
      MDIO_1_I                  : in     std_logic ;
      MDIO_1_O                  : out    std_logic ;
      MDIO_1_T                  : out    std_logic ;
      -- Generic Host Interface
      HOSTOPCODE                : in     std_logic_vector (1 downto 0);
      HOSTREQ                   : in     std_logic ;
      HOSTMIIMSEL               : in     std_logic ;
      HOSTADDR                  : in     std_logic_vector (9 downto 0);
      HOSTWRDATA                : in     std_logic_vector (31 downto 0);
      HOSTMIIMRDY               : out    std_logic ;
      HOSTRDDATA                : out    std_logic_vector (31 downto 0);
      HOSTEMAC1SEL              : in     std_logic ;
      HOSTCLK                   : in     std_logic ;
      -- 1000BASE-X PCS/PMA RocketIO Reference Clock buffer inputs
      MGTCLK_P                  : in     std_logic ;
      MGTCLK_N                  : in     std_logic ;
      DCLK                      : in     std_logic ;
      -- *** mod start
      REFCLK1_i                 : in     std_logic ;
      REFCLK2_i                 : in     std_logic ;
      tx0_fifo_stat             : out    std_logic_vector (3 downto 0);
      tx0_overflow              : out    std_logic ;
      rx0_overflow              : out    std_logic ;
      tx1_fifo_stat             : out    std_logic_vector (3 downto 0);
      tx1_overflow              : out    std_logic ;
      rx1_overflow              : out    std_logic ;
      tx0_ack                   : out    std_logic ;
      tx0_collision             : out    std_logic ;
      tx0_retransmit            : out    std_logic ;
      tx1_ack                   : out    std_logic ;
      tx1_collision             : out    std_logic ;
      tx1_retransmit            : out    std_logic ;
      an0_interrupt_o           : out    std_logic ;
      an1_interrupt_o           : out    std_logic ;
      rx0_goodframe_o           : out    std_logic ;
      rx1_goodframe_o           : out    std_logic ;
      -- *** mod end
      
      -- Asynchronous Reset
      RESET                     : in     std_logic 
   );
   end component;
   component eth_stat_decoder
   port (
      rx_clk           : in     std_logic ;
      rst              : in     std_logic ;
      tx_clk           : in     std_logic ;
      tx_stats_i       : in     std_logic ;
      tx_stats_valid_i : in     std_logic ;
      tx_status_o      : out    std_logic_vector (31 downto 0);
      rx_stats_i       : in     std_logic_vector (6 downto 0);
      rx_stats_valid_i : in     std_logic ;
      rx_status_o      : out    std_logic_vector (27 downto 0);
      rxdvld_i         : in     std_logic ;
      rxdcount_o       : out    std_logic_vector (31 downto 0)
   );
   end component;
   component host_interface
   port (
      odr_addr_i     : in     std_logic_vector (10 downto 0);
      odr_data_i     : in     std_logic_vector (31 downto 0);
      odr_rd0_i      : in     std_logic ;
      odr_wr0_i      : in     std_logic ;
      odr_data0_o    : out    std_logic_vector (63 downto 0);
      odr_rd1_i      : in     std_logic ;
      odr_wr1_i      : in     std_logic ;
      odr_data1_o    : out    std_logic_vector (63 downto 0);
      HOSTMIIMRDY_i  : in     std_logic ;
      HOSTRDDATA_i   : in     std_logic_vector (31 downto 0);
      HOSTADDR_o     : out    std_logic_vector (9 downto 0);
      HOSTEMAC1SEL_o : out    std_logic ;
      HOSTMIIMSEL_o  : out    std_logic ;
      HOSTOPCODE_o   : out    std_logic_vector (1 downto 0);
      HOSTREQ_o      : out    std_logic ;
      HOSTWRDATA_o   : out    std_logic_vector (31 downto 0);
      reset_i        : in     std_logic ;
      hostclk_125_i  : in     std_logic 
   );
   end component;
   component statword_build
   port (
      clk               : in     std_logic ;
      rst               : in     std_logic ;
      rx_fifo_stat_i    : in     std_logic_vector (3 downto 0);
      syncaqu_i         : in     std_logic ;
      sfp_not_present_i : in     std_logic ;
      sfp_txfault_i     : in     std_logic ;
      rx_status_i       : in     std_logic_vector (27 downto 0);
      tx_status_i       : in     std_logic_vector (31 downto 0);
      tx_fifo_stat_i    : in     std_logic_vector (3 downto 0);
      rxdcount_i        : in     std_logic_vector (31 downto 0);
      sfp_los_i         : in     std_logic ;
      tx_overflow_i     : in     std_logic ;
      rx_overflow_i     : in     std_logic ;
      rx_framedrop_i    : in     std_logic ;
      macstat_o         : out    std_logic_vector (63 downto 0);
      statword_o        : out    std_logic_vector (63 downto 0)
   );
   end component;
   component m_buff
   port (
      i : in     std_logic ;
      o : out    std_logic 
   );
   end component;
   component m_inv
   port (
      i : in     std_logic ;
      o : out    std_logic 
   );
   end component;
   component m_power
   port (
      hi : out    std_logic ;
      lo : out    std_logic 
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 6 eb0
   -- eb0
   tx_ifg_delay_0 <= x"00";
   PHYAD_0 <= "00000";
   

   -- HDL Embedded Text Block 7 eb1
   -- eb1
   tx_ifg_delay_1 <= x"00";
   PHYAD_1 <= "00000";
   


   -- ModuleWare code(v1.12) for instance 'U_0' of 'and'
   resetdone_o <= resetdone0 and resetdone1;

   -- Instance port mappings.
   -- *** mod end
   
   -------------------------------------------------------------------------------
   -- The entity declaration for the local link design.
   -------------------------------------------------------------------------------
   -- -----------------------------------------------------------------------------
   --  The entity declaration for the local link design.
   -- -----------------------------------------------------------------------------
   -- 
   Ueth2xllmux : eth2x16_locallink_muxed
      port map (
         RX_LL_CLOCK_0             => rx_fifo_clk_i,
         RX_LL_RESET_0             => rx_fifo_rst_i,
         RX_LL_DATA_0              => rx_data_o,
         RX_LL_SOF_N_0             => rx_sof_n,
         RX_LL_EOF_N_0             => rx_eof_n,
         RX_LL_SRC_RDY_N_0         => rx_src_rdy_n,
         RX_LL_DST_RDY_N_0         => rx_dst_rdy_n,
         RX_LL_FIFO_STATUS_0       => RX_LL_FIFO_STATUS(0),
         TX_LL_CLOCK_0             => tx_fifo_clk_i,
         TX_LL_RESET_0             => tx_fifo_rst_i,
         TX_LL_DATA_0              => tx_data_i,
         TX_LL_SOF_N_0             => tx_sof_n,
         TX_LL_EOF_N_0             => tx_eof_n,
         TX_LL_SRC_RDY_N_0         => tx_src_rdy_n,
         TX_LL_DST_RDY_N_0         => tx_dst_rdy_n,
         TX_LL_REM_0               => LO,
         EMAC0CLIENTRXDVLD         => rx_dvld(0),
         EMAC0CLIENTRXFRAMEDROP    => EMACCLIENTRXFRAMEDROP(0),
         EMAC0CLIENTRXSTATS        => EMACCLIENTRXSTATS(0),
         EMAC0CLIENTRXSTATSVLD     => EMACCLIENTRXSTATSVLD(0),
         EMAC0CLIENTRXSTATSBYTEVLD => EMACCLIENTRXSTATSBYTEVLD(0),
         CLIENTEMAC0TXIFGDELAY     => tx_ifg_delay_0,
         EMAC0CLIENTTXSTATS        => EMACCLIENTTXSTATS(0),
         EMAC0CLIENTTXSTATSVLD     => EMACCLIENTTXSTATSVLD(0),
         EMAC0CLIENTTXSTATSBYTEVLD => EMACCLIENTTXSTATSBYTEVLD(0),
         CLIENTEMAC0PAUSEREQ       => pause_req(0),
         CLIENTEMAC0PAUSEVAL       => pause_val(0),
         EMAC0CLIENTSYNCACQSTATUS  => syncacq_o_internal(0),
         RX_CLIENT_CLK_0           => rx_client_clk0,
         TX_CLIENT_CLK_0           => tx_client_clk0,
         TXP_0                     => txp_o(0),
         TXN_0                     => txn_o(0),
         RXP_0                     => rxp_i(0),
         RXN_0                     => rxn_i(0),
         PHYAD_0                   => PHYAD_0,
         RESETDONE_0               => resetdone0,
         MDC_0                     => sf_scl_o(0),
         MDIO_0_I                  => sf_sda_i(0),
         MDIO_0_O                  => sfp_sda_o(0),
         MDIO_0_T                  => sfp_sda_to(0),
         EMAC1CLIENTRXDVLD         => rx_dvld(1),
         EMAC1CLIENTRXFRAMEDROP    => EMACCLIENTRXFRAMEDROP(1),
         EMAC1CLIENTRXSTATS        => EMACCLIENTRXSTATS(1),
         EMAC1CLIENTRXSTATSVLD     => EMACCLIENTRXSTATSVLD(1),
         EMAC1CLIENTRXSTATSBYTEVLD => EMACCLIENTRXSTATSBYTEVLD(1),
         CLIENTEMAC1TXIFGDELAY     => tx_ifg_delay_1,
         EMAC1CLIENTTXSTATS        => EMACCLIENTTXSTATS(1),
         EMAC1CLIENTTXSTATSVLD     => EMACCLIENTTXSTATSVLD(1),
         EMAC1CLIENTTXSTATSBYTEVLD => EMACCLIENTTXSTATSBYTEVLD(1),
         CLIENTEMAC1PAUSEREQ       => pause_req(1),
         CLIENTEMAC1PAUSEVAL       => pause_val(1),
         EMAC1CLIENTSYNCACQSTATUS  => syncacq_o_internal(1),
         RX_CLIENT_CLK_1           => rx_client_clk1,
         TX_CLIENT_CLK_1           => tx_client_clk1,
         TXP_1                     => txp_o(1),
         TXN_1                     => txn_o(1),
         RXP_1                     => rxp_i(1),
         RXN_1                     => rxn_i(1),
         PHYAD_1                   => PHYAD_1,
         RESETDONE_1               => resetdone1,
         MDC_1                     => sf_scl_o(1),
         MDIO_1_I                  => sf_sda_i(1),
         MDIO_1_O                  => sfp_sda_o(1),
         MDIO_1_T                  => sfp_sda_to(1),
         HOSTOPCODE                => HOSTOPCODE,
         HOSTREQ                   => HOSTREQ,
         HOSTMIIMSEL               => HOSTMIIMSEL,
         HOSTADDR                  => HOSTADDR,
         HOSTWRDATA                => HOSTWRDATA,
         HOSTMIIMRDY               => HOSTMIIMRDY,
         HOSTRDDATA                => HOSTRDDATA,
         HOSTEMAC1SEL              => HOSTEMAC1SEL,
         HOSTCLK                   => hostclk_i,
         MGTCLK_P                  => mgtclk_extp_unused,
         MGTCLK_N                  => mgtclk_extn_unused,
         DCLK                      => clk_25_50_i,
         REFCLK1_i                 => REFCLK1_i,
         REFCLK2_i                 => REFCLK2_i,
         tx0_fifo_stat             => tx_fifo_stat(0),
         tx0_overflow              => tx_overflow(0),
         rx0_overflow              => rx_overflow(0),
         tx1_fifo_stat             => tx_fifo_stat(1),
         tx1_overflow              => tx_overflow(1),
         rx1_overflow              => rx_overflow(1),
         tx0_ack                   => tx_ack_o(0),
         tx0_collision             => tx_collision(0),
         tx0_retransmit            => tx_retransmit(0),
         tx1_ack                   => tx_ack_o(1),
         tx1_collision             => tx_collision(1),
         tx1_retransmit            => tx_retransmit(1),
         an0_interrupt_o           => open,
         an1_interrupt_o           => open,
         rx0_goodframe_o           => rx_goodframe_o(0),
         rx1_goodframe_o           => rx_goodframe_o(1),
         RESET                     => init_i
      );
   Uhost_interface : host_interface
      port map (
         odr_addr_i     => machost_addr_i,
         odr_data_i     => machost_data_i(31 DOWNTO 0),
         odr_rd0_i      => machost_rd_i(0),
         odr_wr0_i      => machost_wr_i(0),
         odr_data0_o    => machost_data_o(0),
         odr_rd1_i      => machost_rd_i(1),
         odr_wr1_i      => machost_wr_i(1),
         odr_data1_o    => machost_data_o(1),
         HOSTMIIMRDY_i  => HOSTMIIMRDY,
         HOSTRDDATA_i   => HOSTRDDATA,
         HOSTADDR_o     => HOSTADDR,
         HOSTEMAC1SEL_o => HOSTEMAC1SEL,
         HOSTMIIMSEL_o  => HOSTMIIMSEL,
         HOSTOPCODE_o   => HOSTOPCODE,
         HOSTREQ_o      => HOSTREQ,
         HOSTWRDATA_o   => HOSTWRDATA,
         reset_i        => host_reset_i,
         hostclk_125_i  => hostclk_i
      );
   U_39 : m_buff
      port map (
         i => LO,
         o => sf_txdisable_o(0)
      );
   U_40 : m_buff
      port map (
         i => HI,
         o => sf_ratesel_o(0)
      );
   U_41 : m_buff
      port map (
         i => HI,
         o => sf_ratesel_o(1)
      );
   U_42 : m_buff
      port map (
         i => LO,
         o => sf_txdisable_o(1)
      );
   U_81 : m_inv
      port map (
         i => rx_dst_rdy_i,
         o => rx_dst_rdy_n
      );
   U_82 : m_inv
      port map (
         i => rx_src_rdy_n,
         o => rx_src_rdy_o
      );
   U_83 : m_inv
      port map (
         i => tx_src_rdy_i,
         o => tx_src_rdy_n
      );
   U_84 : m_inv
      port map (
         i => tx_sof_i,
         o => tx_sof_n
      );
   U_85 : m_inv
      port map (
         i => rx_sof_n,
         o => rx_sof_o
      );
   U_86 : m_inv
      port map (
         i => tx_dst_rdy_n,
         o => tx_dst_rdy_o
      );
   U_87 : m_inv
      port map (
         i => rx_eof_n,
         o => rx_eof_o
      );
   U_88 : m_inv
      port map (
         i => tx_eof_i,
         o => tx_eof_n
      );
   Umpower : m_power
      port map (
         hi => HI,
         lo => LO
      );

   g0: FOR i IN 0 TO 1 GENERATE
      Uethstatdec : eth_stat_decoder
         port map (
            rx_clk           => rx_fifo_clk_i,
            rst              => host_reset_i,
            tx_clk           => tx_fifo_clk_i,
            tx_stats_i       => EMACCLIENTTXSTATS(i),
            tx_stats_valid_i => EMACCLIENTTXSTATSVLD(i),
            tx_status_o      => tx_status(i),
            rx_stats_i       => EMACCLIENTRXSTATS(i),
            rx_stats_valid_i => EMACCLIENTRXSTATSVLD(i),
            rx_status_o      => rx_status(i),
            rxdvld_i         => rx_dvld(i),
            rxdcount_o       => rxdcount(i)
         );
      Ustatwrdbld : statword_build
         port map (
            clk               => hostclk_i,
            rst               => host_reset_i,
            rx_fifo_stat_i    => RX_LL_FIFO_STATUS(i),
            syncaqu_i         => syncacq_o_internal(i),
            sfp_not_present_i => sf_absent_i(i),
            sfp_txfault_i     => sf_txfault_i(i),
            rx_status_i       => rx_status(i),
            tx_status_i       => tx_status(i),
            tx_fifo_stat_i    => tx_fifo_stat(i),
            rxdcount_i        => rxdcount(i),
            sfp_los_i         => sfp_los_i(i),
            tx_overflow_i     => tx_overflow(i),
            rx_overflow_i     => rx_overflow(i),
            rx_framedrop_i    => EMACCLIENTRXFRAMEDROP(i),
            macstat_o         => mac_stat(i),
            statword_o        => stat_word(i)
         );
   end generate g0;

   -- Implicit buffered output assignments
   syncacq_o <= syncacq_o_internal;

end struct;
