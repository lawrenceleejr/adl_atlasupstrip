-- VHDL Entity ethernet_v4.eth2x_example_design.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library unisim;
use unisim.vcomponents.all;

library ieee;
use ieee.std_logic_1164.all;

-- -----------------------------------------------------------------------------
--  The entity declaration for the example design.
-- -----------------------------------------------------------------------------
-- 
entity eth2x_example_design is
   port( 
      --EMAC-MGT link status
      EMAC0CLIENTSYNCACQSTATUS : out    std_logic;
      -- 1000BASE-X PCS/PMA Interface - EMAC0
      TXP_0                    : out    std_logic;
      TXN_0                    : out    std_logic;
      RXP_0                    : in     std_logic;
      RXN_0                    : in     std_logic;
      -- MDIO Interface - EMAC0
      MDC_0                    : out    std_logic;
      MDIO_0_I                 : in     std_logic;
      MDIO_0_O                 : out    std_logic;
      MDIO_0_T                 : out    std_logic;
      --EMAC-MGT link status
      EMAC1CLIENTSYNCACQSTATUS : out    std_logic;
      -- 1000BASE-X PCS/PMA Interface - EMAC1
      TXP_1                    : out    std_logic;
      TXN_1                    : out    std_logic;
      RXP_1                    : in     std_logic;
      RXN_1                    : in     std_logic;
      -- MDIO Interface - EMAC1
      MDC_1                    : out    std_logic;
      MDIO_1_I                 : in     std_logic;
      MDIO_1_O                 : out    std_logic;
      MDIO_1_T                 : out    std_logic;
      -- Generic Host Interface
      HOSTOPCODE               : in     std_logic_vector (1 downto 0);
      HOSTREQ                  : in     std_logic;
      HOSTMIIMSEL              : in     std_logic;
      HOSTADDR                 : in     std_logic_vector (9 downto 0);
      HOSTWRDATA               : in     std_logic_vector (31 downto 0);
      HOSTMIIMRDY              : out    std_logic;
      HOSTRDDATA               : out    std_logic_vector (31 downto 0);
      HOSTEMAC1SEL             : in     std_logic;
      HOSTCLK                  : in     std_logic;
      -- 1000BASE-X PCS/PMA RocketIO Reference Clock buffer inputs
      MGTCLK_P                 : in     std_logic;
      MGTCLK_N                 : in     std_logic;
      DCLK                     : in     std_logic;
      -- Asynchronous Reset
      RESET                    : in     std_logic;
      EMAC0CLIENTRXDVLD        : out    std_logic;
      --     signal EMAC0CLIENTSYNCACQSTATUS   : std_logic;
      EMAC1CLIENTRXDVLD        : out    std_logic
   );

-- Declarations

end eth2x_example_design ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- ethernet_v4.eth2x_example_design.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
library unisim;
use unisim.vcomponents.all;


architecture struct of eth2x_example_design is

   -- Architecture declarations

   -- Internal signal declarations
   -----------------------------------------------------------------------
-- Signal Declarations
-----------------------------------------------------------------------

    -- Global asynchronous reset
   signal reset_i                   : std_logic;
   -- client interface clocking signals - EMAC0
   signal tx_clk_0_i                : std_logic;
   signal rx_clk_0_i                : std_logic;
   -- address swap transmitter connections - EMAC0
   signal tx_ll_data_0_i            : std_logic_vector(7 downto 0);
   signal tx_ll_sof_n_0_i           : std_logic;
   signal tx_ll_eof_n_0_i           : std_logic;
   signal tx_ll_src_rdy_n_0_i       : std_logic;
   signal tx_ll_dst_rdy_n_0_i       : std_logic;
   -- address swap receiver connections - EMAC0
   signal rx_ll_data_0_i            : std_logic_vector(7 downto 0);
   signal rx_ll_sof_n_0_i           : std_logic;
   signal rx_ll_eof_n_0_i           : std_logic;
   signal rx_ll_src_rdy_n_0_i       : std_logic;
   signal rx_ll_dst_rdy_n_0_i       : std_logic;
   -- create a synchronous reset in the transmitter clock domain
   signal tx_pre_reset_0_i          : std_logic_vector(5 downto 0);
   signal tx_reset_0_i              : std_logic;
   attribute async_reg : string;
ATTRIBUTE async_reg OF tx_pre_reset_0_i : signal IS "true";
   signal resetdone_0_i             : std_logic;
   -- client interface clocking signals - EMAC1
   signal tx_clk_1_i                : std_logic;
   signal rx_clk_1_i                : std_logic;
   -- address swap transmitter connections - EMAC1
   signal tx_ll_data_1_i            : std_logic_vector(7 downto 0);
   signal tx_ll_sof_n_1_i           : std_logic;
   signal tx_ll_eof_n_1_i           : std_logic;
   signal tx_ll_src_rdy_n_1_i       : std_logic;
   signal tx_ll_dst_rdy_n_1_i       : std_logic;
   -- address swap receiver connections - EMAC1
   signal rx_ll_data_1_i            : std_logic_vector(7 downto 0);
   signal rx_ll_sof_n_1_i           : std_logic;
   signal rx_ll_eof_n_1_i           : std_logic;
   signal rx_ll_src_rdy_n_1_i       : std_logic;
   signal rx_ll_dst_rdy_n_1_i       : std_logic;
   -- create a synchronous reset in the transmitter clock domain
   signal tx_pre_reset_1_i          : std_logic_vector(5 downto 0);
   signal tx_reset_1_i              : std_logic;
   signal resetdone_1_i             : std_logic;
   ATTRIBUTE async_reg OF tx_pre_reset_1_i : signal IS "true";

    -- HOSTCLK input to MAC
   signal host_clk_i                : std_logic;
   signal CLIENTEMAC0TXIFGDELAY     : std_logic_vector(7 downto 0);
   signal CLIENTEMAC0PAUSEREQ       : std_logic;
   signal CLIENTEMAC0PAUSEVAL       : std_logic_vector(15 downto 0);
   signal CLIENTEMAC1TXIFGDELAY     : std_logic_vector(7 downto 0);
   signal CLIENTEMAC1PAUSEREQ       : std_logic;
   signal CLIENTEMAC1PAUSEVAL       : std_logic_vector(15 downto 0);
   signal EMAC0CLIENTRXFRAMEDROP    : std_logic;
   signal EMAC0CLIENTRXSTATS        : std_logic_vector(6 downto 0);
   signal EMAC0CLIENTRXSTATSVLD     : std_logic;
   signal EMAC0CLIENTRXSTATSBYTEVLD : std_logic;
   signal EMAC0CLIENTTXSTATS        : std_logic;
   signal EMAC0CLIENTTXSTATSVLD     : std_logic;
   signal EMAC0CLIENTTXSTATSBYTEVLD : std_logic;
   signal EMAC1CLIENTRXFRAMEDROP    : std_logic;
   signal EMAC1CLIENTRXSTATS        : std_logic_vector(6 downto 0);
   signal EMAC1CLIENTRXSTATSVLD     : std_logic;
   signal EMAC1CLIENTRXSTATSBYTEVLD : std_logic;
   signal EMAC1CLIENTTXSTATS        : std_logic;
   signal EMAC1CLIENTTXSTATSVLD     : std_logic;
   signal EMAC1CLIENTTXSTATSBYTEVLD : std_logic;
   --     signal EMAC1CLIENTSYNCACQSTATUS   : std_logic;

     attribute buffer_type : string;
ATTRIBUTE buffer_type OF HOSTCLK : signal IS "ibuf";

     -- *** mod start
   signal refclk2                   : std_logic;                        -- *** mod end
     

-------------------------------------------------------------------------------
-- Main Body of Code
-------------------------------------------------------------------------------


   -- Component Declarations
   component address_swap_module_8
   port (
      rx_ll_clock         : in     std_logic;
      rx_ll_data_in       : in     std_logic_vector (7 downto 0);
      rx_ll_dst_rdy_in_n  : in     std_logic;
      rx_ll_eof_in_n      : in     std_logic;
      rx_ll_reset         : in     std_logic;
      rx_ll_sof_in_n      : in     std_logic;
      rx_ll_src_rdy_in_n  : in     std_logic;
      rx_ll_data_out      : out    std_logic_vector (7 downto 0);
      rx_ll_eof_out_n     : out    std_logic;
      rx_ll_sof_out_n     : out    std_logic;
      rx_ll_src_rdy_out_n : out    std_logic
   );
   end component;
   component eth2x_locallink
   port (
      CLIENTEMAC0PAUSEREQ       : in     std_logic;
      CLIENTEMAC0PAUSEVAL       : in     std_logic_vector (15 downto 0);
      CLIENTEMAC0TXIFGDELAY     : in     std_logic_vector (7 downto 0);
      CLIENTEMAC1PAUSEREQ       : in     std_logic;
      CLIENTEMAC1PAUSEVAL       : in     std_logic_vector (15 downto 0);
      CLIENTEMAC1TXIFGDELAY     : in     std_logic_vector (7 downto 0);
      DCLK                      : in     std_logic;
      HOSTADDR                  : in     std_logic_vector (9 downto 0);
      HOSTCLK                   : in     std_logic;
      HOSTEMAC1SEL              : in     std_logic;
      HOSTMIIMSEL               : in     std_logic;
      HOSTOPCODE                : in     std_logic_vector (1 downto 0);
      HOSTREQ                   : in     std_logic;
      HOSTWRDATA                : in     std_logic_vector (31 downto 0);
      MDIO_0_I                  : in     std_logic;
      MDIO_1_I                  : in     std_logic;
      MGTCLK_N                  : in     std_logic;
      MGTCLK_P                  : in     std_logic;
      PHYAD_0                   : in     std_logic_vector (4 downto 0);
      PHYAD_1                   : in     std_logic_vector (4 downto 0);
      REFCLK1_i                 : in     std_logic;
      REFCLK2_i                 : in     std_logic;
      RESET                     : in     std_logic;
      RXN_0                     : in     std_logic;
      RXN_1                     : in     std_logic;
      RXP_0                     : in     std_logic;
      RXP_1                     : in     std_logic;
      RX_LL_CLOCK_0             : in     std_logic;
      RX_LL_CLOCK_1             : in     std_logic;
      RX_LL_DST_RDY_N_0         : in     std_logic;
      RX_LL_DST_RDY_N_1         : in     std_logic;
      RX_LL_RESET_0             : in     std_logic;
      RX_LL_RESET_1             : in     std_logic;
      TX_LL_CLOCK_0             : in     std_logic;
      TX_LL_CLOCK_1             : in     std_logic;
      TX_LL_DATA_0              : in     std_logic_vector (7 downto 0);
      TX_LL_DATA_1              : in     std_logic_vector (7 downto 0);
      TX_LL_EOF_N_0             : in     std_logic;
      TX_LL_EOF_N_1             : in     std_logic;
      TX_LL_RESET_0             : in     std_logic;
      TX_LL_RESET_1             : in     std_logic;
      TX_LL_SOF_N_0             : in     std_logic;
      TX_LL_SOF_N_1             : in     std_logic;
      TX_LL_SRC_RDY_N_0         : in     std_logic;
      TX_LL_SRC_RDY_N_1         : in     std_logic;
      EMAC0CLIENTRXDVLD         : out    std_logic;
      EMAC0CLIENTRXFRAMEDROP    : out    std_logic;
      EMAC0CLIENTRXSTATS        : out    std_logic_vector (6 downto 0);
      EMAC0CLIENTRXSTATSBYTEVLD : out    std_logic;
      EMAC0CLIENTRXSTATSVLD     : out    std_logic;
      EMAC0CLIENTSYNCACQSTATUS  : out    std_logic;
      EMAC0CLIENTTXSTATS        : out    std_logic;
      EMAC0CLIENTTXSTATSBYTEVLD : out    std_logic;
      EMAC0CLIENTTXSTATSVLD     : out    std_logic;
      EMAC1CLIENTRXDVLD         : out    std_logic;
      EMAC1CLIENTRXFRAMEDROP    : out    std_logic;
      EMAC1CLIENTRXSTATS        : out    std_logic_vector (6 downto 0);
      EMAC1CLIENTRXSTATSBYTEVLD : out    std_logic;
      EMAC1CLIENTRXSTATSVLD     : out    std_logic;
      EMAC1CLIENTSYNCACQSTATUS  : out    std_logic;
      EMAC1CLIENTTXSTATS        : out    std_logic;
      EMAC1CLIENTTXSTATSBYTEVLD : out    std_logic;
      EMAC1CLIENTTXSTATSVLD     : out    std_logic;
      HOSTMIIMRDY               : out    std_logic;
      HOSTRDDATA                : out    std_logic_vector (31 downto 0);
      MDC_0                     : out    std_logic;
      MDC_1                     : out    std_logic;
      MDIO_0_O                  : out    std_logic;
      MDIO_0_T                  : out    std_logic;
      MDIO_1_O                  : out    std_logic;
      MDIO_1_T                  : out    std_logic;
      RESETDONE_0               : out    std_logic;
      RESETDONE_1               : out    std_logic;
      RX_CLIENT_CLK_0           : out    std_logic;
      RX_CLIENT_CLK_1           : out    std_logic;
      RX_LL_DATA_0              : out    std_logic_vector (7 downto 0);
      RX_LL_DATA_1              : out    std_logic_vector (7 downto 0);
      RX_LL_EOF_N_0             : out    std_logic;
      RX_LL_EOF_N_1             : out    std_logic;
      RX_LL_FIFO_STATUS_0       : out    std_logic_vector (3 downto 0);
      RX_LL_FIFO_STATUS_1       : out    std_logic_vector (3 downto 0);
      RX_LL_SOF_N_0             : out    std_logic;
      RX_LL_SOF_N_1             : out    std_logic;
      RX_LL_SRC_RDY_N_0         : out    std_logic;
      RX_LL_SRC_RDY_N_1         : out    std_logic;
      TXN_0                     : out    std_logic;
      TXN_1                     : out    std_logic;
      TXP_0                     : out    std_logic;
      TXP_1                     : out    std_logic;
      TX_CLIENT_CLK_0           : out    std_logic;
      TX_CLIENT_CLK_1           : out    std_logic;
      TX_LL_DST_RDY_N_0         : out    std_logic;
      TX_LL_DST_RDY_N_1         : out    std_logic;
      rx0_overflow              : out    std_logic;
      rx1_overflow              : out    std_logic;
      tx0_fifo_stat             : out    std_logic_vector (3 downto 0);
      tx0_overflow              : out    std_logic;
      tx1_fifo_stat             : out    std_logic_vector (3 downto 0);
      tx1_overflow              : out    std_logic
   );
   end component;
   component IBUF
   port (
      I : in     std_ulogic;
      O : out    std_ulogic
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   CLIENTEMAC0TXIFGDELAY <= X"3F";
   CLIENTEMAC1TXIFGDELAY <= X"3F";
   CLIENTEMAC0PAUSEREQ   <= '0';
   CLIENTEMAC1PAUSEREQ   <= '0';
   CLIENTEMAC0PAUSEVAL   <= X"0000";
   CLIENTEMAC1PAUSEVAL   <= X"0000";
   rx_ll_dst_rdy_n_0_i     <= tx_ll_dst_rdy_n_0_i;

   -- HDL Embedded Text Block 2 gen_tx_reset_emac0
   -- Create synchronous reset in the transmitter clock domain.
       gen_tx_reset_emac0 : process (tx_clk_0_i, reset_i)
       begin
         if reset_i = '1' then
           tx_pre_reset_0_i <= (others => '1');
           tx_reset_0_i     <= '1';
         elsif tx_clk_0_i'event and tx_clk_0_i = '1' then
         if resetdone_0_i = '1' then
           tx_pre_reset_0_i(0)          <= '0';
           tx_pre_reset_0_i(5 downto 1) <= tx_pre_reset_0_i(4 downto 0);
           tx_reset_0_i                 <= tx_pre_reset_0_i(5);
         end if;
         end if;
       end process gen_tx_reset_emac0;

   -- HDL Embedded Text Block 3 eb2
   rx_ll_dst_rdy_n_1_i     <= tx_ll_dst_rdy_n_1_i;

   -- HDL Embedded Text Block 4 gen_tx_reset_emac1
   -- Create synchronous reset in the transmitter clock domain.
       gen_tx_reset_emac1 : process (tx_clk_1_i, reset_i)
       begin
         if reset_i = '1' then
           tx_pre_reset_1_i <= (others => '1');
           tx_reset_1_i     <= '1';
         elsif tx_clk_1_i'event and tx_clk_1_i = '1' then
         if resetdone_1_i = '1' then
           tx_pre_reset_1_i(0)          <= '0';
           tx_pre_reset_1_i(5 downto 1) <= tx_pre_reset_1_i(4 downto 0);
           tx_reset_1_i                 <= tx_pre_reset_1_i(5);
         end if;
         end if;
       end process gen_tx_reset_emac1;


   -- Instance port mappings.
   U_0 : address_swap_module_8
      port map (
         rx_ll_clock         => tx_clk_0_i,
         rx_ll_reset         => tx_reset_0_i,
         rx_ll_data_in       => rx_ll_data_0_i,
         rx_ll_sof_in_n      => rx_ll_sof_n_0_i,
         rx_ll_eof_in_n      => rx_ll_eof_n_0_i,
         rx_ll_src_rdy_in_n  => rx_ll_src_rdy_n_0_i,
         rx_ll_data_out      => tx_ll_data_0_i,
         rx_ll_sof_out_n     => tx_ll_sof_n_0_i,
         rx_ll_eof_out_n     => tx_ll_eof_n_0_i,
         rx_ll_src_rdy_out_n => tx_ll_src_rdy_n_0_i,
         rx_ll_dst_rdy_in_n  => tx_ll_dst_rdy_n_0_i
      );
   -- -------------------------------------------------------------------
   --       Instatiate the address swapping module
   --     -------------------------------------------------------------------
   -- 
   client_side_asm_emac1 : address_swap_module_8
      port map (
         rx_ll_clock         => tx_clk_1_i,
         rx_ll_data_in       => rx_ll_data_1_i,
         rx_ll_dst_rdy_in_n  => tx_ll_dst_rdy_n_1_i,
         rx_ll_eof_in_n      => rx_ll_eof_n_1_i,
         rx_ll_reset         => tx_reset_1_i,
         rx_ll_sof_in_n      => rx_ll_sof_n_1_i,
         rx_ll_src_rdy_in_n  => rx_ll_src_rdy_n_1_i,
         rx_ll_data_out      => tx_ll_data_1_i,
         rx_ll_eof_out_n     => tx_ll_eof_n_1_i,
         rx_ll_sof_out_n     => tx_ll_sof_n_1_i,
         rx_ll_src_rdy_out_n => tx_ll_src_rdy_n_1_i
      );
   -- ----------------------------------------------------------------------
   --      Instantiate the EMAC Wrapper with LL FIFO 
   --      (eth2x_locallink.v)
   --     ----------------------------------------------------------------------
   -- 
   v4_emac_ll : eth2x_locallink
      port map (
         RX_LL_CLOCK_0 => tx_clk_0_i,
         RX_LL_RESET_0 => tx_reset_0_i,
         RX_LL_DATA_0 => rx_ll_data_0_i,
         RX_LL_SOF_N_0 => rx_ll_sof_n_0_i,
         RX_LL_EOF_N_0 => rx_ll_eof_n_0_i,
         RX_LL_SRC_RDY_N_0 => rx_ll_src_rdy_n_0_i,
         RX_LL_DST_RDY_N_0 => rx_ll_dst_rdy_n_0_i,
         TX_LL_CLOCK_0 => tx_clk_0_i,
         TX_LL_RESET_0 => tx_reset_0_i,
         TX_LL_DATA_0 => tx_ll_data_0_i,
         TX_LL_SOF_N_0 => tx_ll_sof_n_0_i,
         TX_LL_EOF_N_0 => tx_ll_eof_n_0_i,
         TX_LL_SRC_RDY_N_0 => tx_ll_src_rdy_n_0_i,
         TX_LL_DST_RDY_N_0 => tx_ll_dst_rdy_n_0_i,
         EMAC0CLIENTRXDVLD => EMAC0CLIENTRXDVLD,
         EMAC0CLIENTRXFRAMEDROP => EMAC0CLIENTRXFRAMEDROP,
         EMAC0CLIENTRXSTATS => EMAC0CLIENTRXSTATS,
         EMAC0CLIENTRXSTATSVLD => EMAC0CLIENTRXSTATSVLD,
         EMAC0CLIENTRXSTATSBYTEVLD => EMAC0CLIENTRXSTATSBYTEVLD,
         CLIENTEMAC0TXIFGDELAY => CLIENTEMAC0TXIFGDELAY,
         EMAC0CLIENTTXSTATS => EMAC0CLIENTTXSTATS,
         EMAC0CLIENTTXSTATSVLD => EMAC0CLIENTTXSTATSVLD,
         EMAC0CLIENTTXSTATSBYTEVLD => EMAC0CLIENTTXSTATSBYTEVLD,
         CLIENTEMAC0PAUSEREQ => CLIENTEMAC0PAUSEREQ,
         CLIENTEMAC0PAUSEVAL => CLIENTEMAC0PAUSEVAL,
         EMAC0CLIENTSYNCACQSTATUS => EMAC0CLIENTSYNCACQSTATUS,
         RX_CLIENT_CLK_0 => rx_clk_0_i,
         TX_CLIENT_CLK_0 => tx_clk_0_i,
         TXP_0 => TXP_0,
         TXN_0 => TXN_0,
         RXP_0 => RXP_0,
         RXN_0 => RXN_0,
         RESETDONE_0 => resetdone_0_i,
         MDC_0 => MDC_0,
         MDIO_0_I => MDIO_0_I,
         MDIO_0_O => MDIO_0_O,
         MDIO_0_T => MDIO_0_T,
         RX_LL_CLOCK_1 => tx_clk_1_i,
         RX_LL_RESET_1 => tx_reset_1_i,
         RX_LL_DATA_1 => rx_ll_data_1_i,
         RX_LL_SOF_N_1 => rx_ll_sof_n_1_i,
         RX_LL_EOF_N_1 => rx_ll_eof_n_1_i,
         RX_LL_SRC_RDY_N_1 => rx_ll_src_rdy_n_1_i,
         RX_LL_DST_RDY_N_1 => rx_ll_dst_rdy_n_1_i,
         TX_LL_CLOCK_1 => tx_clk_1_i,
         TX_LL_RESET_1 => tx_reset_1_i,
         TX_LL_DATA_1 => tx_ll_data_1_i,
         TX_LL_SOF_N_1 => tx_ll_sof_n_1_i,
         TX_LL_EOF_N_1 => tx_ll_eof_n_1_i,
         TX_LL_SRC_RDY_N_1 => tx_ll_src_rdy_n_1_i,
         TX_LL_DST_RDY_N_1 => tx_ll_dst_rdy_n_1_i,
         EMAC1CLIENTRXDVLD => EMAC1CLIENTRXDVLD,
         EMAC1CLIENTRXFRAMEDROP => EMAC1CLIENTRXFRAMEDROP,
         EMAC1CLIENTRXSTATS => EMAC1CLIENTRXSTATS,
         EMAC1CLIENTRXSTATSVLD => EMAC1CLIENTRXSTATSVLD,
         EMAC1CLIENTRXSTATSBYTEVLD => EMAC1CLIENTRXSTATSBYTEVLD,
         CLIENTEMAC1TXIFGDELAY => CLIENTEMAC1TXIFGDELAY,
         EMAC1CLIENTTXSTATS => EMAC1CLIENTTXSTATS,
         EMAC1CLIENTTXSTATSVLD => EMAC1CLIENTTXSTATSVLD,
         EMAC1CLIENTTXSTATSBYTEVLD => EMAC1CLIENTTXSTATSBYTEVLD,
         CLIENTEMAC1PAUSEREQ => CLIENTEMAC1PAUSEREQ,
         CLIENTEMAC1PAUSEVAL => CLIENTEMAC1PAUSEVAL,
         EMAC1CLIENTSYNCACQSTATUS => EMAC1CLIENTSYNCACQSTATUS,
         RX_CLIENT_CLK_1 => rx_clk_1_i,
         TX_CLIENT_CLK_1 => tx_clk_1_i,
         TXP_1 => TXP_1,
         TXN_1 => TXN_1,
         RXP_1 => RXP_1,
         RXN_1 => RXN_1,
         RESETDONE_1 => resetdone_1_i,
         MDC_1 => MDC_1,
         MDIO_1_I => MDIO_1_I,
         MDIO_1_O => MDIO_1_O,
         MDIO_1_T => MDIO_1_T,
         HOSTOPCODE => HOSTOPCODE,
         HOSTREQ => HOSTREQ,
         HOSTMIIMSEL => HOSTMIIMSEL,
         HOSTADDR => HOSTADDR,
         HOSTWRDATA => HOSTWRDATA,
         HOSTMIIMRDY => HOSTMIIMRDY,
         HOSTRDDATA => HOSTRDDATA,
         HOSTEMAC1SEL => HOSTEMAC1SEL,
         HOSTCLK => host_clk_i,
         MGTCLK_P => MGTCLK_P,
         MGTCLK_N => MGTCLK_N,
         DCLK => DCLK,
         REFCLK1_i => MGTCLK_P,
         REFCLK2_i => refclk2,
         RESET => reset_i,
         PHYAD_0 => "00001",
         PHYAD_1 => "00010"
      );
   -- ----------------------------------------------------------------------
   --      HOSTCLK Clock Management - Clock input for the generic management 
   --      interface. This clock could be tied to a 125MHz reference clock 
   --      to save on clocking resources
   --     ----------------------------------------------------------------------
   -- 
   host_clk : IBUF
      port map (
         I => HOSTCLK,
         O => host_clk_i
      );
   --  EMAC0 Client clock outputs to user logic
   --     RX_CLIENT_CLK_0 <= rx_clk_0_i;
   --     TX_CLIENT_CLK_0 <= tx_clk_0_i;
   -- 
   --      EMAC1 Client clock outputs to user logic
   --     RX_CLIENT_CLK_1 <= rx_clk_1_i;
   --     TX_CLIENT_CLK_1 <= tx_clk_1_i;
   -- -------------------------------------------------------------------------
   --      Reset Input Buffer
   --     -------------------------------------------------------------------------
   -- 
   reset_ibuf : IBUF
      port map (
         I => RESET,
         O => reset_i
      );

end struct;
