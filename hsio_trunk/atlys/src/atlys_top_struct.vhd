-- VHDL Entity atlys.atlys_top.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
library utils;
use utils.pkg_types.all;

entity atlys_top is
   port( 
      --#clockpinforAtlysrevCboard
      clk_i          : in     std_logic;
      --#onBoardUSBcontroller
      usb_ast_ni     : in     std_logic;                       --#Bank=0, Pinname=IO_L35P_GCLK17, Schname=U1-FLAGA
      usb_dst_ni     : in     std_logic;                       --#Bank=0, Pinname=IO_L35N_GCLK16, Schname=U1-FLAGB
      usb_flag_i     : in     std_logic;                       --#Bank=0, Pinname=IO_L64P_SCP5, Schname=U1-FLAGC
      usb_wait_i     : in     std_logic;                       --#Bank=0, Pinname=IO_L63P_SCP7, Schname=U1-SLRD
      usb_db_io      : out    std_logic_vector (7 downto 0);   --#Bank=0, Pinname=IO_L2N, Schname=U1-FD0
      usb_clk_i      : in     std_logic;                       --#Bank=0, Pinname=IO_L37P_GCLK13, Schname=U1-IFCLK
      usb_oe_o       : out    std_logic;                       --#Bank=0, Pinname=IO_L64N_SCP4, Schname=U1-SLOE
      usb_wr_o       : out    std_logic;                       --#Bank=0, Pinname=IO_L63N_SCP6, Schname=U1-SLWR
      usb_pktend_o   : out    std_logic;                       --#Bank=0, Pinname=IO_L1N_VREF, Schname=U1-PKTEND
      usb_dir_o      : out    std_logic;                       --#Bank=0, Pinname=IO_L2P, Schname=U1-SLCS
      usb_mode_o     : out    std_logic;                       --#Bank=0, Pinname=IO_L6N, Schname=U1-INT0#
      usb_adr_o      : out    std_logic_vector (1 downto 0);   --#Bank=0, Pinname=IO_L62N_VREF, Schname=U1-FIFOAD0
      --#onBoardQuad-SPIFlash
      flash_clk_o    : out    std_logic;                       --#Bank=2, Pinname=IO_L1P_CCLK_2, Schname=SCK
      flash_cs_o     : out    std_logic;                       --#Bank=2, Pinname=IO_L65N_CSO_B_2, Schname=CS
      flash_dq_i     : in     std_logic_vector (3 downto 0);   --#Bank=2, Pinname=IO_L3N_MOSI_CSI_B_MISO0_2, Schname=SDI
      --#onBoardLeds
      led_o          : out    std_logic_vector (7 downto 0);   --#Bank=1, Pinname=IO_L52N_M1DQ15, Schname=LD0
      --#onBoardPUSHBUTTONS
      btn_i          : in     std_logic_vector (5 downto 0);   --#Bank=2, Pinname=IO_L1N_M0_CMPMISO_2, Schname=M0/RESET
      --#onBoardSWITCHES
      sw_i           : in     std_logic_vector (7 downto 0);   --#Bank=0, Pinname=IO_L37N_GCLK12, Schname=SW0
      --#TEMACEthernetMAC
      eth_rst_o      : out    std_logic;                       --#Bank=1, Pinname=IO_L32N_A16_M1A9, Schname=E-RESET
      eth_txclk_o    : out    std_logic;                       --#Bank=1, Pinname=IO_L41N_GCLK8_M1CASN, Schname=E-TXCLK
      eth_txd_o      : out    std_logic_vector (7 downto 0);   --#Bank=1, Pinname=IO_L37N_A6_M1A1, Schname=E-TXD0
      eth_txen_i     : in     std_logic;                       --#Bank=1, Pinname=IO_L37P_A7_M1A0, Schname=E-TXEN
      eth_txer_i     : in     std_logic;                       --#Bank=1, Pinname=IO_L38N_A4_M1CLKN, Schname=E-TXER
      eth_gtxclk_i   : in     std_logic;                       --#Bank=1, Pinname=IO_L40P_GCLK11_M1A5, Schname=E-GTXCLK
      eth_rxd_i      : in     std_logic_vector (7 downto 0);   --#Bank=1, Pinname=IO_L38P_A5_M1CLK, Schname=E-RXD0
      eth_rxdv_i     : in     std_logic;                       --#Bank=1, Pinname=IO_L35P_A11_M1A7, Schname=E-RXDV
      eth_rxer_i     : in     std_logic;                       --#Bank=1, Pinname=IO_L35N_A10_M1A2, Schname=E-RXER
      eth_rxclk_i    : in     std_logic;                       --#Bank=1, Pinname=IO_L41P_GCLK9_IRDY1_M1RASN, Schname=E-RXCLK
      eth_mdc_i      : in     std_logic;                       --#Bank=1, Pinname=IO_L1N_A24_VREF, Schname=E-MDC
      eth_mdi_i      : in     std_logic;                       --#Bank=1, Pinname=IO_L48P_HDC_M1DQ8, Schname=E-MDIO
      eth_int_i      : in     std_logic;                       --#Bank=1, Pinname=IO_L42N_GCLK6_TRDY1_M1LDM, Schname=E-INT
      --#DDR2
      ddr2_clk0_o    : out    std_logic;                       --#Bank=3, Pinname=IO_L46P_M3CLK, Schname=DDR-CK_P
      ddr2_clk1_o    : out    std_logic;                       --#Bank=3, Pinname=IO_L46N_M3CLKN, Schname=DDR-CK_N
      ddr2_cke_o     : out    std_logic;                       --#Bank=3, Pinname=IO_L53P_M3CKE, Schname=DDR-CKE
      ddr2_ras_no    : out    std_logic;                       --#Bank=3, Pinname=IO_L43P_GCLK23_M3RASN, Schname=DDR-RAS
      ddr2_cas_no    : out    std_logic;                       --#Bank=3, Pinname=IO_L43N_GCLK22_IRDY2_M3CASN, Schname=DDR-CAS
      ddr2_wen_o     : out    std_logic;                       --#Bank=3, Pinname=IO_L50P_M3WE, Schname=DDR-WE
      ddr2_rzq_o     : out    std_logic;                       --#Bank=3, Pinname=IO_L31P, Schname=RZQ
      ddr2_zio_o     : out    std_logic;                       --#Bank=3, Pinname=IO_L83P, Schname=ZIO
      ddr2_ba_o      : out    std_logic_vector (2 downto 0);   --#Bank=3, Pinname=IO_L48P_M3BA0, Schname=DDR-BA0
      ddr2_a_o       : out    std_logic_vector (12 downto 0);  --#Bank=3, Pinname=IO_L47P_M3A0, Schname=DDR-A0
      ddr2_dq_io     : inout  std_logic_vector (15 downto 0);  --#Bank=3, Pinname=IO_L37P_M3DQ0, Schname=DDR-DQ0
      ddr2_udqs_po   : out    std_logic;                       --#Bank=3, Pinname=IO_L34P_M3UDQS, Schname=DDR-UDQS_P
      ddr2_udqs_no   : out    std_logic;                       --#Bank=3, Pinname=IO_L34N_M3UDQSN, Schname=DDR-UDQS_N
      ddr2_ldqs_po   : out    std_logic;                       --#Bank=3, Pinname=IO_L39P_M3LDQS, Schname=DDR-LDQS_P
      ddr2_ldqs_no   : out    std_logic;                       --#Bank=3, Pinname=IO_L39N_M3LDQSN, Schname=DDR-LDQS_N
      ddr2_ldm_o     : out    std_logic;                       --#Bank=3, Pinname=IO_L42N_GCLK24_M3LDM, Schname=DDR-LDM
      ddr2_udm_o     : out    std_logic;                       --#Bank=3, Pinname=IO_L42P_GCLK25_TRDY2_M3UDM, Schname=DDR-UDM
      ddr2_odt_o     : out    std_logic;                       --#Bank=3, Pinname=IO_L45N_M3ODT, Schname=DDR-ODT
      --#onboardHDMIOUT
      hdmi_o_clk_po  : out    std_logic;                       --#Bank=0, Pinname=IO_L8P, Schname=TMDS-TX-CLK_P
      hdmi_o_clk_no  : out    std_logic;                       --#Bank=0, Pinname=IO_L8N_VREF, Schname=TMDS-TX-CLK_N
      hdmi_o_d_po    : out    std_logic_vector (2 downto 0);   --#Bank=0, Pinname=IO_L11P, Schname=TMDS-TX-0_P
      hdmi_o_d_no    : out    std_logic_vector (2 downto 0);   --#Bank=0, Pinname=IO_L11N, Schname=TMDS-TX-0_N
      hdmi_o_scl_io  : inout  std_logic;                       --#Bank=0, Pinname=IO_L34P_GCLK19, Schname=TMDS-TX-SCL
      hdmi_o_sda_io  : inout  std_logic;                       --#Bank=0, Pinname=IO_L34N_GCLK18, Schname=TMDS-TX-SDA
      --#onboardHDMIIN1(PMODA)
      hdmi_i1_clk_pi : in     std_logic;                       --#Bank=0, Pinname=IO_L36P_GCLK15, Schname=TMDS-RXB-CLK_P
      hdmi_i1_clk_ni : in     std_logic;                       --#Bank=0, Pinname=IO_L36N_GCLK14, Schname=TMDS-RXB-CLK_N
      hdmi_i1_d_pi   : in     std_logic_vector (2 downto 0);   --#Bank=0, Pinname=IO_L38P, Schname=TMDS-RXB-0_P
      hdmi_i1_d_ni   : in     std_logic_vector (2 downto 0);   --#Bank=0, Pinname=IO_L38N_VREF, Schname=TMDS-RXB-0_N
      hdmi_i1_scl_io : inout  std_logic;                       --#Bank=0, Pinname=IO_L50P, Schname=PMOD-SCL
      hdmi_i1_sda_io : inout  std_logic;                       --#Bank=0, Pinname=IO_L50N, Schname=PMOD-SDA
      --#onboardHDMIIN2
      hdmi_i2_clk_pi : in     std_logic;                       --#Bank=1, Pinname=IO_L43P_GCLK5_M1DQ4, Schname=TMDS-RX-CLK_P
      hdmi_i2_clk_ni : in     std_logic;                       --#Bank=1, Pinname=IO_L43N_GCLK4_M1DQ5, Schname=TMDS-RX-CLK_N
      hdmi_i2_d_pi   : in     std_logic_vector (2 downto 0);   --#Bank=1, Pinname=IO_L45P_A1_M1LDQS, Schname=TMDS-RX-0_P
      hdmi_i2_d_ni   : in     std_logic_vector (2 downto 0);   --#Bank=1, Pinname=IO_L45N_A0_M1LDQSN, Schname=TMDS-RX-0_N
      hdmi_i2_scl_io : inout  std_logic;                       --#Bank=1, Pinname=IO_L47P_FWE_B_M1DQ0, Schname=TMDS-RX-SCL
      hdmi_i2_sda_io : inout  std_logic;                       --#Bank=1, Pinname=IO_L47N_LDC_M1DQ1, Schname=TMDS-RX-SDA
      --#onboardUSBHostController
      usbhost_clk_o  : out    std_logic;                       --#Bank=1, Pinname=IO_L49P_M1DQ10, Schname=PIC32-SCK1
      usbhost_ss_o   : out    std_logic;                       --#Bank=1, Pinname=IO_L49N_M1DQ11, Schname=PIC32-SS1
      usbhost_sdi_i  : in     std_logic;                       --#Bank=1, Pinname=IO_L50P_M1UDQS, Schname=PIC32-SDI1
      usbhost_sdo_o  : out    std_logic;                       --#Bank=1, Pinname=IO_L48N_M1DQ9, Schname=PIC32-SDO1
      --#Audio
      aud_bitclk_i   : in     std_logic;                       --#Bank=1, Pinname=IO_L40N_GCLK10_M1A6, Schname=AUD-BIT-CLK
      aud_sdi_i      : in     std_logic;                       --#Bank=1, Pinname=IO_L51N_M1DQ13, Schname=AUD-SDI
      aud_sdo_o      : out    std_logic;                       --#Bank=1, Pinname=IO_L50N_M1UDQSN, Schname=AUD-SDO
      aud_sync_o     : out    std_logic;                       --#Bank=1, Pinname=IO_L52P_M1DQ14, Schname=AUD-SYNC
      aud_rst_o      : out    std_logic;                       --#Bank=1, Pinname=IO_L51P_M1DQ12, Schname=AUD-RESET
      --#PMODConnector
      pmod_ja_io     : out    std_logic_vector (7 downto 0);   --#Bank=2, Pinname=IO_L62N_D6, Schname=JA-D0_N
      --#onboardVHDCI
      --#Channnel1connectstoPsignals,Channel2toNsignals
      vmod_exp_pio   : inout  std_logic_vector (20 downto 1);  --#Bank=2, Pinname=IO_L2P_CMPCLK, Schname=EXP-IO1_P
      vmod_exp_nio   : inout  std_logic_vector (20 downto 1);  --#Bank=2, Pinname=IO_L2N_CMPMOSI, Schname=EXP-IO1_N
      --#USBUARTConnector
      usbuart_rx_i   : in     std_logic;                       --#Bank=0, Pinname=IO_L66N_SCP0, Schname=USBB-RXD
      usbuart_tx_o   : out    std_logic                        --#Bank=0, Pinname=IO_L66P_SCP1, Schname=USBB-TXD
   );

-- Declarations

end atlys_top ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- atlys.atlys_top.struct
--
-- Created by Matt Warren 2014
--

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
library utils;
use utils.pkg_types.all;
library unisim;
use unisim.VCOMPONENTS.all;
use ieee.numeric_std.all;


architecture struct of atlys_top is

   -- Architecture declarations

   -- Internal signal declarations
   --#onBoardLeds
   signal fw_version     : std_logic_vector(7 downto 0);             --#Bank=1, Pinname=IO_L52N_M1DQ15, Schname=LD0
   -- Client Receiver Interface - EMAC0
   signal led            : std_logic_vector(7 downto 0);
   --#onboardVHDCI
--#Channnel1connectstoPsignals,Channel2toNsignals
   signal vmodin_dclk    : std_logic;                                --#Bank=2, Pinname=IO_L2P_CMPCLK, Schname=EXP-IO1_P
   --#onboardVHDCI
--#Channnel1connectstoPsignals,Channel2toNsignals
   signal vmodin_l1r     : std_logic;                                --#Bank=2, Pinname=IO_L2P_CMPCLK, Schname=EXP-IO1_P
   signal HI             : std_logic;
   signal LO             : std_logic;
   signal rst            : std_logic;
   signal clk40          : std_logic;
   signal clk80          : std_logic;
   signal vmodin_com     : std_ulogic;
   signal vmod_d         : std_logic_vector(15 downto 0);
   signal clk160         : std_logic;
   signal com            : std_logic;
   signal l0             : std_logic;
   signal l1             : std_logic;
   signal r3s            : std_logic;
   signal clkn40         : std_logic;
   -- Client Receiver Interface - EMAC0
   signal led0           : std_logic_vector(7 downto 0);
   signal tick           : std_logic_vector(MAX_TICTOG downto 0);
   signal tog            : std_logic_vector(MAX_TICTOG downto 0);
   signal tog80          : std_logic_vector(MAX_TICTOG downto 0);
   signal vmodin_bco     : std_logic;
   signal rst_n          : std_logic;
   signal ZERO2          : std_logic_vector(1 downto 0);
   signal ZERO4          : std_logic_vector(3 downto 0);
   signal ZERO8          : std_logic_vector(7 downto 0);
   signal ZERO13         : std_logic_vector(12 downto 0);
   signal ZERO16         : std_logic_vector(15 downto 0);
   signal ext_por_n      : std_logic;
   signal hs_dxin        : std_logic_vector(3 downto 0);
   signal sc_datl_ad     : std_logic;                                -- BDP10   -- DATA_1_P___DATA_L_N  *INVERT
   signal sc_datl_da     : std_logic;                                -- BDP10   -- DATA_1_P___DATA_L_N  *INVERT
   signal sc_datr_ad     : std_logic;                                -- BDP13   -- DATA_R2_P___DATA_R_N  *INVERT
   signal sc_datr_da     : std_logic;                                -- BDP13   -- DATA_R2_P___DATA_R_N  *INVERT
   signal sc_xoffl_ad    : std_logic;                                -- BDP11   -- XOFF_1_P___XOFF_L_P
   signal sc_xoffl_da    : std_logic;                                -- BDP11   -- XOFF_1_P___XOFF_L_P
   signal sc_xoffr_ad    : std_logic;                                -- BDP12   -- XOFF_R2_P___XOFF_R_P
   signal sc_xoffr_da    : std_logic;                                -- BDP12   -- XOFF_R2_P___XOFF_R_P
   signal sc_rst         : std_logic;                                -- RSTB
   signal sc_rstb        : std_logic;                                -- RSTB
   signal sh_l1r3        : std_logic;                                -- R3
   signal sh_coml0       : std_logic;                                -- LO_CMD
   signal sc_sdi_clk     : std_logic;                                -- SDI_CLK          --SCN_I_CK
   signal sc_sdi_bc      : std_logic;                                -- SDI_BC           --SCN_I_BC
   -- 1. HYBRID (all to P3)
-------------------------------------------------------------
   signal hy_data        : std_logic_vector(3 downto 0);
   signal hy_xoff        : std_logic_vector(3 downto 0);
   -- hs_rstb_i         : in     std_logic;  -- used as a hard reset line for all the f/w
-- hs_shunt_ctl_sw_i : in     std_logic;
-- hs_reg_ena_i      : in     std_logic;
-- hs_reg_end_i      : in     std_logic;
-- hs_term_i         : in     std_logic;
-- hs_addr_i         : in     std_logic_vector (4 downto 0);
-- hs_scan_en_i      : in     std_logic;
-- hs_sdi_bc_i       : in     std_logic;
-- hs_sdo_bc_o       : out    std_logic;
-- hs_sdi_clk_i      : in     std_logic;
-- hs_sdo_clk_o      : out    std_logic;
-- hs_sw1_o          : out    std_logic;
   signal hs_p1_spare_i  : std_logic_vector(13 downto 0);
   -- HSIO IB P2
-----------------------------------

-- hs_abcup_i        : in     std_logic;
-- hs_spare1_i       : in     std_logic;
-- hs_spare2_i       : in     std_logic;
-- hs_spare3_i       : in     std_logic;
-- hs_spare4_i       : in     std_logic;
-- hs_spare5_i       : in     std_logic;
   signal hs_p2_spare_i  : std_logic_vector(3 downto 0);
   signal hs_dxout       : std_logic_vector(3 downto 0);
   signal sc_addr        : std_logic_vector(4 downto 0);             -- ADDR0-4
   signal rst_hsio_n     : std_logic;
   signal reg            : slv32_array(127 downto 0);
   signal ddrtx          : std_logic_vector(1 downto 0);
   signal stat           : slv32_array(127 downto 0);
   signal d2_led         : std_logic;
   signal sh_bco         : std_logic;                                -- BCO
   signal sh_drc         : std_logic;                                -- DRC
   signal addr1          : std_logic_vector(4 downto 0);
   signal addr0          : std_logic_vector(4 downto 0);
   signal addr2          : std_logic_vector(4 downto 0);
   signal strobe40       : std_logic;
   signal tmu_coml0_swap : std_logic;                                -- TWOWIRE *
   signal abc_DIN3       : std_logic_vector(255 downto 0);
   signal abc_DIN5       : std_logic_vector(255 downto 0);
   signal abc_DIN2       : std_logic_vector(255 downto 0);
   signal abc_DIN4       : std_logic_vector(255 downto 0);
   signal abc_DIN1       : std_logic_vector(255 downto 0);
   signal sh_bco0        : std_logic;                                -- BCO
   signal sh_drc0        : std_logic;                                -- DRC


   -- Component Declarations
   component driver_main
   port (
      bco              : in     std_logic ;
      clk40            : in     std_logic ;
      clk80            : in     std_logic ;
      clk160           : in     std_logic ;
      rst              : in     std_logic ;
      --ddr_sel_o : out std_logic;
      
      -- HSIO IB P1
      -----------------------------------
      -- hs_bco_i          : in     std_logic;
      hs_coml0_i       : in     std_logic ;
      hs_l1r3_i        : in     std_logic ;
      hs_sp0_i         : in     std_logic ;
      hs_dxout_i       : in     std_logic_vector (3 downto 0);
      hs_dxin_o        : out    std_logic_vector (3 downto 0);
      -- hs_rstb_i         : in     std_logic;  -- used as a hard reset line for all the f/w
      -- hs_shunt_ctl_sw_i : in     std_logic;
      -- hs_reg_ena_i      : in     std_logic;
      -- hs_reg_end_i      : in     std_logic;
      -- hs_term_i         : in     std_logic;
      -- hs_addr_i         : in     std_logic_vector (4 downto 0);
      -- hs_scan_en_i      : in     std_logic;
      -- hs_sdi_bc_i       : in     std_logic;
      -- hs_sdo_bc_o       : out    std_logic;
      -- hs_sdi_clk_i      : in     std_logic;
      -- hs_sdo_clk_o      : out    std_logic;
      -- hs_sw1_o          : out    std_logic;
      hs_p1_spare_i    : in     std_logic_vector (13 downto 0);
      -- HSIO IB P2
      -----------------------------------
      -- hs_abcup_i        : in     std_logic;  -- tmu_data to HSIO
      -- hs_spare1_i       : in     std_logic;  -- tmu_data to HSIO
      -- hs_spare2_i       : in     std_logic;
      -- hs_spare3_i       : in     std_logic;
      -- hs_spare4_i       : in     std_logic;
      -- hs_spare5_i       : in     std_logic;
      hs_p2_spare_i    : in     std_logic_vector (3 downto 0);
      hs_i2c_sdc_io    : inout  std_logic ;
      hs_i2c_sda_io    : inout  std_logic ;
      ------------------------------------------------------------------
      -- DUT
      -------------------------------------------------------------------
      -- Signals split - will be recombined above depending on output below
      sc_select_o      : out    std_logic ;                    -- 0=hybrid, 1=single chip
      sc_highz_en_o    : out    std_logic ;
      -- COMMON(all to P3)
      -------------------------------------------------------------
      sh_shuntctl_o    : out    std_logic ;                    -- SHUNT_CTL_SW, becomes SHUNTCTL
      sh_reg_en_ana_o  : out    std_logic ;                    -- REG_EN_A
      sh_reg_en_dig_o  : out    std_logic ;                    -- REG_EN_D
      sh_bco_o         : out    std_logic ;                    -- BCO
      sh_drc_o         : out    std_logic ;                    -- DRC
      sh_coml0_o       : out    std_logic ;                    -- LO_CMD
      sh_l1r3_o        : out    std_logic ;                    -- R3
      -- 1. HYBRID (all to P3)
      -------------------------------------------------------------
      hy_data_i        : in     std_logic_vector (3 downto 0);
      hy_xoff_i        : in     std_logic_vector (3 downto 0);
      hy_data_o        : out    std_logic_vector (3 downto 0);
      hy_xoff_o        : out    std_logic_vector (3 downto 0);
      hy_dir_dx_o      : out    std_logic_vector (3 downto 0);
      -- 0. ASIC (P3 and P4)
      ---------------------------------------------------------------
      
      -- P3
      -----
      
      --BDP8           : inout std_logic;-- BDP8  -- XOFF_R0_P
      sc_fcclk_o       : out    std_logic ;                    -- BDP9  -- DATA_R0_P___FCCLK_N  *INVERT
      sc_doutfc1_i     : in     std_logic ;                    -- BDP14  -- DATA3_P___FC1_P
      sc_doutfc2_i     : in     std_logic ;                    -- BDP15  -- XOFF_R3_P___FC2_P
      sc_datl_i        : in     std_logic ;                    -- BDP10  -- DATA_1_P___DATA_L_N  *INVERT
      sc_datl_o        : out    std_logic ;                    -- BDP10  -- DATA_1_P___DATA_L_N  *INVERT
      sc_xoffl_i       : in     std_logic ;                    -- BDP11  -- XOFF_1_P___XOFF_L_P
      sc_xoffl_o       : out    std_logic ;                    -- BDP11  -- XOFF_1_P___XOFF_L_P
      sc_dir_dxl_o     : out    std_logic ;
      sc_datr_i        : in     std_logic ;                    -- BDP13  -- DATA_R2_P___DATA_R_N  *INVERT
      sc_datr_o        : out    std_logic ;                    -- BDP13  -- DATA_R2_P___DATA_R_N  *INVERT
      sc_xoffr_i       : in     std_logic ;                    -- BDP12  -- XOFF_R2_P___XOFF_R_P
      sc_xoffr_o       : out    std_logic ;                    -- BDP12  -- XOFF_R2_P___XOFF_R_P
      sc_dir_dxr_o     : out    std_logic ;
      -- P4
      -----
      sc_term_o        : out    std_logic ;                    -- TERM
      sc_addr_o        : out    std_logic_vector (4 downto 0); -- ADDR0-4
      sc_rstb_o        : out    std_logic ;                    -- RSTB
      sc_abcup_o       : out    std_logic ;                    -- ABCUP
      sc_sdo_bc_i      : in     std_logic ;                    -- SDO_BC  --SCN_O_BC
      sc_sdi_bc_o      : out    std_logic ;                    -- SDI_BC  --SCN_I_BC
      sc_sdo_clk_i     : in     std_logic ;                    -- SDO_CLK  --SCN_O_CK
      sc_sdi_clk_o     : out    std_logic ;                    -- SDI_CLK  --SCN_I_CK
      sc_scan_enable_o : out    std_logic ;                    -- SCAN_ENABLE
      sc_switch1_i     : in     std_logic                      -- SWITCH1
   );
   end component;
   component tmu_drv_top
   port (
      clk40        : in     std_logic ;
      clk80        : in     std_logic ;
      coml0_swap_i : in     std_logic ;               -- TWOWIRE *
      hsio_coml0_i : in     std_ulogic ;
      rst          : in     std_logic ;
      stat_i       : in     slv32_array (127 downto 0);
      strobe40_i   : in     std_logic ;
      reg_o        : out    slv32_array (127 downto 0);
      strm_data_o  : out    std_logic                 -- 9 Reg
   );
   end component;
   component abc130x3_top
   port (
      abc_BC_i          : in     std_logic ;
      abc_CLK_i         : in     std_logic ;
      abc_DATL_i        : in     std_logic ;
      abc_DATR_i        : in     std_logic ;
      abc_DIN1_i        : in     std_logic_vector (255 downto 0);
      abc_DIN2_i        : in     std_logic_vector (255 downto 0);
      abc_DIN3_i        : in     std_logic_vector (255 downto 0);
      abc_RSTB_i        : in     std_logic ;
      abc_XOFFL_i       : in     std_logic ;
      abc_XOFFR_i       : in     std_logic ;
      abc_powerUpRstb_i : in     std_logic ;
      addr0_i           : in     std_logic_vector (4 downto 0);
      addr1_i           : in     std_logic_vector (4 downto 0);
      addr2_i           : in     std_logic_vector (4 downto 0);
      com_i             : in     std_logic ;
      l0_i              : in     std_logic ;
      l1_i              : in     std_logic ;
      r3s_i             : in     std_logic ;
      abc_DATL_o        : out    std_logic ;
      abc_DATR_o        : out    std_logic ;
      abc_XOFFL_o       : out    std_logic ;
      abc_XOFFR_o       : out    std_logic 
   );
   end component;
   component strip_data_gen
   generic (
      START_PATT : std_logic_vector(15 downto 0) := X"0001"
   );
   port (
      clk40     : in     std_logic;
      inc_i     : in     std_logic;
      rst       : in     std_logic;
      strips1_o : out    std_logic_vector (255 downto 0);
      strips2_o : out    std_logic_vector (255 downto 0);
      strips3_o : out    std_logic_vector (255 downto 0);
      strips4_o : out    std_logic_vector (255 downto 0);
      strips5_o : out    std_logic_vector (255 downto 0)
   );
   end component;
   component clk_rst_block
   port (
      --#clockpinforAtlysrevCboard
      clk_i         : in     std_logic ;
      rst_o         : out    std_logic ;
      clkn40_o      : out    std_logic ;
      clk160_o      : out    std_logic ;
      clk80_o       : out    std_logic ;
      clk40_o       : out    std_logic ;
      vmodin_bco_i  : in     std_logic ;
      rst_btn_ni    : in     std_logic ;
      rst_no        : out    std_logic ;
      clk_int_sel_i : in     std_logic ;
      ext_por_no    : out    std_logic ;
      strobe40_o    : out    std_logic 
   );
   end component;
   component BUFG
   port (
      I : in     std_ulogic;
      O : out    std_ulogic
   );
   end component;
   component IBUFDS
   generic (
      CAPACITANCE      : string  := "DONT_CARE";
      DIFF_TERM        : boolean := FALSE;
      DQS_BIAS         : string  := "FALSE";
      IBUF_DELAY_VALUE : string  := "0";
      IBUF_LOW_PWR     : boolean := TRUE;
      IFD_DELAY_VALUE  : string  := "AUTO";
      IOSTANDARD       : string  := "DEFAULT"
   );
   port (
      I  : in     std_ulogic;
      IB : in     std_ulogic;
      O  : out    std_ulogic
   );
   end component;
   component IBUFGDS
   generic (
      CAPACITANCE      : string  := "DONT_CARE";
      DIFF_TERM        : boolean := FALSE;
      IBUF_DELAY_VALUE : string  := "0";
      IBUF_LOW_PWR     : boolean := TRUE;
      IOSTANDARD       : string  := "DEFAULT"
   );
   port (
      I  : in     std_ulogic;
      IB : in     std_ulogic;
      O  : out    std_ulogic
   );
   end component;
   component OBUFDS
   generic (
      CAPACITANCE : string := "DONT_CARE";
      IOSTANDARD  : string := "DEFAULT";
      SLEW        : string := "SLOW"
   );
   port (
      I  : in     std_ulogic;
      O  : out    std_ulogic;
      OB : out    std_ulogic
   );
   end component;
   component demux_ddr
   port (
      q0_o       : out    std_logic ;
      q1_o       : out    std_logic ;
      swap_i     : in     std_logic ;
      d_i        : in     std_logic ;
      strobe1x_i : in     std_logic ;
      clk2x      : in     std_logic ;
      rst        : in     std_logic 
   );
   end component;
   component led_pulse
   port (
      clk    : in     std_logic ;
      i      : in     std_logic ;
      tick_i : in     std_logic ;
      rst    : in     std_logic ;
      o      : out    std_logic 
   );
   end component;
   component ticks_gen
   generic (
      SIM_MODE : integer := 0;
      CLK_MHZ  : integer := 80
   );
   port (
      clk      : in     std_logic;
      rst      : in     std_logic;
      tick_o   : out    std_logic_vector (MAX_TICTOG downto 0);
      toggle_o : out    std_logic_vector (MAX_TICTOG downto 0)
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1
   stat(16#70#) <= x"0fec00" & fw_version;

   -- HDL Embedded Text Block 2 eb2
   -- eb2 2
   addr0 <= "00000";
   addr1 <= "00001";
   addr2 <= "00010";

   -- HDL Embedded Text Block 3 eb3
   -- CHANGELOG
   -------------------------------------------------
   -- Q2 2031    v00 born
   -- 26/07/2013 v01 first trials
   -- 30/07/2013 v02 added LEDs and debug outputs
   -- 30/07/2013 v03 reworked denuxer
   -- 31/07/2013 v05 more debug, version display with btn(4), mux uses IDDR again 
   --  1/08/2013 v06 Added local clock option - use sw7 
   --  2/08/2013 v07 moved clock and reset gen to it own block
   --  2/08/2013 v08 fixed inverted reset btn bug
   --  2/08/2013 v09 removed internal clock option - messes with timing
   -- 19/09/2013 v0a strips generator included - 1 bit/column moving with l0
   
   -- Move to chip only version
   -- 20/11/2013 v20 single-chip build.
   -- 22/11/2013 v21 added por
   -- 23/11/2013 v22 dx now on d 1, 4, 7, 10 to match drv
   -- 23/11/2013 v23 swapped ddr of coml0 and l1r3s AGAIN
   -- 26/11/2013 v24 added driver
   -- 28/11/2013 v25 added tmu for testing - it controls nothing
   -- 29/11/2013 v26 fixed tmu d mapping bug, added fw vers to status
   -- 17/03/2014 v27 clk80/strobe40 based ddr, 3xabc a la hccless hyb
   
   fw_version <= x"27";

   -- HDL Embedded Text Block 4 eb4
   -- eb3 3
   HI <= '1';
   LO <= '0';
   ZERO2 <=  "00";
   ZERO4 <=  "0000";
   ZERO8 <=  "00000000";
   ZERO13 <= "0000000000000";
   ZERO16 <= "0000000000000000";

   -- HDL Embedded Text Block 5 eb5
   rst_hsio_n   <= not vmod_exp_pio(20);
   tmu_coml0_swap   <= vmod_exp_nio(20); 
   hs_p1_spare_i(6) <= vmod_exp_pio(19); --RST 
   hs_p1_spare_i(5) <= vmod_exp_nio(19); --Loop
   hs_p1_spare_i(4) <= vmod_exp_pio(18); --High-Z
   hs_p1_spare_i(3) <= vmod_exp_nio(18); --Dir
   hs_p1_spare_i(2) <= vmod_exp_pio(17); --DRC Inv
   hs_p1_spare_i(1) <= vmod_exp_nio(17); --DRCMode1
   hs_p1_spare_i(0) <= vmod_exp_pio(16); --DRCMode0
   
   
   hs_p1_spare_i(13 downto 9) <= "00000";
   
   hs_p2_spare_i(3 downto 0) <= "0000";

   -- HDL Embedded Text Block 6 eb6
   -- eb6 6
   -- used 0,1,2,3,4,6,7,9,10
   vmod_d(5) <= '0';
   vmod_d(8) <= '0';
   vmod_d(15 downto 11) <= "00000";


   -- ModuleWare code(v1.12) for instance 'U_15' of 'buff'
   pmod_ja_io(4) <= vmod_d(1);

   -- ModuleWare code(v1.12) for instance 'U_16' of 'buff'
   pmod_ja_io(5) <= vmod_d(7);

   -- ModuleWare code(v1.12) for instance 'U_17' of 'buff'
   pmod_ja_io(6) <= vmod_d(4);

   -- ModuleWare code(v1.12) for instance 'U_18' of 'buff'
   pmod_ja_io(7) <= vmod_d(10);

   -- ModuleWare code(v1.12) for instance 'U_19' of 'buff'
   led0(4) <= vmod_d(1);

   -- ModuleWare code(v1.12) for instance 'U_20' of 'buff'
   led0(5) <= vmod_d(7);

   -- ModuleWare code(v1.12) for instance 'U_21' of 'buff'
   vmod_d(1) <= hs_dxin(0);

   -- ModuleWare code(v1.12) for instance 'U_22' of 'buff'
   led(7) <= tog(T_2Hz);

   -- ModuleWare code(v1.12) for instance 'U_23' of 'buff'
   usbuart_tx_o <= usbuart_rx_i;

   -- ModuleWare code(v1.12) for instance 'U_24' of 'buff'
   hs_dxout(0) <= vmod_d(0);

   -- ModuleWare code(v1.12) for instance 'U_25' of 'buff'
   vmod_d(4) <= hs_dxin(1);

   -- ModuleWare code(v1.12) for instance 'U_26' of 'buff'
   vmod_d(7) <= hs_dxin(2);

   -- ModuleWare code(v1.12) for instance 'U_27' of 'buff'
   pmod_ja_io(0) <= com;

   -- ModuleWare code(v1.12) for instance 'U_28' of 'buff'
   pmod_ja_io(1) <= l0;

   -- ModuleWare code(v1.12) for instance 'U_29' of 'buff'
   pmod_ja_io(2) <= l1;

   -- ModuleWare code(v1.12) for instance 'U_30' of 'buff'
   pmod_ja_io(3) <= r3s;

   -- ModuleWare code(v1.12) for instance 'U_31' of 'buff'
   led0(0) <= com;

   -- ModuleWare code(v1.12) for instance 'U_32' of 'buff'
   led0(1) <= l0;

   -- ModuleWare code(v1.12) for instance 'U_33' of 'buff'
   led0(2) <= l1;

   -- ModuleWare code(v1.12) for instance 'U_34' of 'buff'
   led0(3) <= r3s;

   -- ModuleWare code(v1.12) for instance 'U_35' of 'buff'
   vmod_d(10) <= hs_dxin(3);

   -- ModuleWare code(v1.12) for instance 'U_36' of 'buff'
   led0(6) <= d2_led;

   -- ModuleWare code(v1.12) for instance 'U_37' of 'buff'
   hs_dxout(1) <= vmod_d(3);

   -- ModuleWare code(v1.12) for instance 'U_38' of 'buff'
   hs_dxout(2) <= vmod_d(6);

   -- ModuleWare code(v1.12) for instance 'U_39' of 'buff'
   hs_dxout(3) <= vmod_d(9);

   -- ModuleWare code(v1.12) for instance 'U_2' of 'inv'
   sc_rst <= not(sc_rstb);

   -- ModuleWare code(v1.12) for instance 'U_1' of 'mux'
   prcu_1combo: process(led, fw_version, btn_i(5))
   begin
      case btn_i(5) is
      when '0'|'L' => led_o <= led;
      when '1'|'H' => led_o <= fw_version;
      when others => led_o <= (others => 'X');
      end case;
   end process prcu_1combo;

   -- ModuleWare code(v1.12) for instance 'U_0' of 'or'
   d2_led <= ddrtx(0) or ddrtx(1);

   -- Instance port mappings.
   Udrv : driver_main
      port map (
         bco              => vmodin_bco,
         clk40            => clk40,
         clk80            => clk80,
         clk160           => clk160,
         rst              => rst,
         hs_coml0_i       => vmodin_com,
         hs_l1r3_i        => vmodin_l1r,
         hs_sp0_i         => vmodin_dclk,
         hs_dxout_i       => hs_dxout,
         hs_dxin_o        => hs_dxin,
         hs_p1_spare_i    => hs_p1_spare_i,
         hs_p2_spare_i    => hs_p2_spare_i,
         hs_i2c_sdc_io    => open,
         hs_i2c_sda_io    => open,
         sc_select_o      => open,
         sc_highz_en_o    => open,
         sh_shuntctl_o    => open,
         sh_reg_en_ana_o  => open,
         sh_reg_en_dig_o  => open,
         sh_bco_o         => sh_bco0,
         sh_drc_o         => sh_drc0,
         sh_coml0_o       => sh_coml0,
         sh_l1r3_o        => sh_l1r3,
         hy_data_i        => hy_data,
         hy_xoff_i        => hy_xoff,
         hy_data_o        => open,
         hy_xoff_o        => open,
         hy_dir_dx_o      => open,
         sc_fcclk_o       => open,
         sc_doutfc1_i     => LO,
         sc_doutfc2_i     => LO,
         sc_datl_i        => sc_datl_ad,
         sc_datl_o        => sc_datl_da,
         sc_xoffl_i       => sc_xoffl_ad,
         sc_xoffl_o       => sc_xoffl_da,
         sc_dir_dxl_o     => open,
         sc_datr_i        => sc_datr_ad,
         sc_datr_o        => sc_datr_da,
         sc_xoffr_i       => sc_xoffr_ad,
         sc_xoffr_o       => sc_xoffr_da,
         sc_dir_dxr_o     => open,
         sc_term_o        => open,
         sc_addr_o        => sc_addr,
         sc_rstb_o        => sc_rstb,
         sc_abcup_o       => open,
         sc_sdo_bc_i      => sc_sdi_bc,
         sc_sdi_bc_o      => sc_sdi_bc,
         sc_sdo_clk_i     => sc_sdi_clk,
         sc_sdi_clk_o     => sc_sdi_clk,
         sc_scan_enable_o => open,
         sc_switch1_i     => LO
      );
   Utmutop : tmu_drv_top
      port map (
         clk40        => clk40,
         clk80        => clk80,
         coml0_swap_i => tmu_coml0_swap,
         hsio_coml0_i => vmodin_com,
         rst          => rst,
         stat_i       => stat,
         strobe40_i   => strobe40,
         reg_o        => reg,
         strm_data_o  => vmod_d(2)
      );
   Ua13 : abc130x3_top
      port map (
         abc_BC_i          => sh_bco,
         abc_CLK_i         => sh_drc,
         abc_DATL_i        => sc_datl_da,
         abc_DATR_i        => sc_datr_da,
         abc_DIN1_i        => abc_DIN1,
         abc_DIN2_i        => abc_DIN2,
         abc_DIN3_i        => abc_DIN3,
         abc_RSTB_i        => sc_rstb,
         abc_XOFFL_i       => sc_xoffl_da,
         abc_XOFFR_i       => sc_xoffr_da,
         abc_powerUpRstb_i => ext_por_n,
         addr0_i           => addr0,
         addr1_i           => addr1,
         addr2_i           => addr2,
         com_i             => com,
         l0_i              => l0,
         l1_i              => l1,
         r3s_i             => r3s,
         abc_DATL_o        => sc_datl_ad,
         abc_DATR_o        => sc_datr_ad,
         abc_XOFFL_o       => sc_xoffl_ad,
         abc_XOFFR_o       => sc_xoffr_ad
      );
   Ustrpgen : strip_data_gen
      generic map (
         START_PATT => X"0001"
      )
      port map (
         inc_i     => l0,
         strips1_o => abc_DIN1,
         strips2_o => abc_DIN2,
         strips3_o => abc_DIN3,
         strips4_o => abc_DIN4,
         strips5_o => abc_DIN5,
         clk40     => sh_bco,
         rst       => sc_rst
      );
   Uclkrstblk : clk_rst_block
      port map (
         clk_i         => clk_i,
         rst_o         => rst,
         clkn40_o      => clkn40,
         clk160_o      => clk160,
         clk80_o       => clk80,
         clk40_o       => clk40,
         vmodin_bco_i  => vmodin_bco,
         rst_btn_ni    => rst_hsio_n,
         rst_no        => rst_n,
         clk_int_sel_i => sw_i(7),
         ext_por_no    => ext_por_n,
         strobe40_o    => strobe40
      );
   Ubufgbco : BUFG
      port map (
         O => sh_bco,
         I => sh_bco0
      );
   Ubufgdrc : BUFG
      port map (
         O => sh_drc,
         I => sh_drc0
      );
   Uvmod1 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "DEFAULT"
      )
      port map (
         O  => vmodin_com,
         I  => vmod_exp_pio(1),
         IB => vmod_exp_nio(1)
      );
   Uvmod2 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "DEFAULT"
      )
      port map (
         O  => vmodin_l1r,
         I  => vmod_exp_pio(2),
         IB => vmod_exp_nio(2)
      );
   Uvmod3 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         DQS_BIAS         => "FALSE",
         IBUF_DELAY_VALUE => "0",
         IBUF_LOW_PWR     => TRUE,
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "DEFAULT"
      )
      port map (
         O  => vmod_d(0),
         I  => vmod_exp_pio(3),
         IB => vmod_exp_nio(3)
      );
   Uvmod6 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         DQS_BIAS         => "FALSE",
         IBUF_DELAY_VALUE => "0",
         IBUF_LOW_PWR     => TRUE,
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "DEFAULT"
      )
      port map (
         O  => vmod_d(3),
         I  => vmod_exp_pio(6),
         IB => vmod_exp_nio(6)
      );
   Uvmod9 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         DQS_BIAS         => "FALSE",
         IBUF_DELAY_VALUE => "0",
         IBUF_LOW_PWR     => TRUE,
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "DEFAULT"
      )
      port map (
         O  => vmod_d(6),
         I  => vmod_exp_pio(9),
         IB => vmod_exp_nio(9)
      );
   Uvmod14 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         DQS_BIAS         => "FALSE",
         IBUF_DELAY_VALUE => "0",
         IBUF_LOW_PWR     => TRUE,
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "DEFAULT"
      )
      port map (
         O  => vmod_d(9),
         I  => vmod_exp_pio(14),
         IB => vmod_exp_nio(14)
      );
   Uvmod10 : IBUFGDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => FALSE,
         IBUF_DELAY_VALUE => "0",
         IOSTANDARD       => "DEFAULT"
      )
      port map (
         O  => vmodin_bco,
         I  => vmod_exp_pio(10),
         IB => vmod_exp_nio(10)
      );
   Uvmod11 : IBUFGDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         IBUF_DELAY_VALUE => "0",
         IOSTANDARD       => "DEFAULT"
      )
      port map (
         O  => vmodin_dclk,
         I  => vmod_exp_pio(11),
         IB => vmod_exp_nio(11)
      );
   Uvmod4 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "DEFAULT"
      )
      port map (
         O  => vmod_exp_pio(4),
         OB => vmod_exp_nio(4),
         I  => vmod_d(1)
      );
   Uvmod5 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "DEFAULT"
      )
      port map (
         O  => vmod_exp_pio(5),
         OB => vmod_exp_nio(5),
         I  => vmod_d(2)
      );
   Uvmod7 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "DEFAULT"
      )
      port map (
         O  => vmod_exp_pio(7),
         OB => vmod_exp_nio(7),
         I  => vmod_d(4)
      );
   Uvmod12 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "DEFAULT"
      )
      port map (
         O  => vmod_exp_pio(12),
         OB => vmod_exp_nio(12),
         I  => vmod_d(7)
      );
   Uvmod15 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "DEFAULT"
      )
      port map (
         O  => vmod_exp_pio(15),
         OB => vmod_exp_nio(15),
         I  => vmod_d(10)
      );
   Uddrcoml0 : demux_ddr
      port map (
         q0_o       => com,
         q1_o       => l0,
         swap_i     => LO,
         d_i        => sh_coml0,
         strobe1x_i => strobe40,
         clk2x      => clk80,
         rst        => rst
      );
   Uddrl1r3s : demux_ddr
      port map (
         q0_o       => l1,
         q1_o       => r3s,
         swap_i     => LO,
         d_i        => sh_l1r3,
         strobe1x_i => strobe40,
         clk2x      => clk80,
         rst        => rst
      );
   Uticksgen : ticks_gen
      generic map (
         SIM_MODE => 0,
         CLK_MHZ  => 40
      )
      port map (
         tick_o   => tick,
         toggle_o => tog,
         clk      => clk40,
         rst      => rst
      );
   Uticksgen1 : ticks_gen
      generic map (
         SIM_MODE => 0,
         CLK_MHZ  => 80
      )
      port map (
         tick_o   => open,
         toggle_o => tog80,
         clk      => clk80,
         rst      => rst
      );

   g0: FOR i IN 0 TO 6 GENERATE
      U_47 : led_pulse
         port map (
            clk    => clk40,
            i      => led0(i),
            tick_i => tick(T_10Hz),
            rst    => rst,
            o      => led(i)
         );
   end generate g0;

end struct;
