-- VHDL Entity abc130_driver.abc130_driver_pcb_top.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity abc130_driver_pcb_top is
   port( 
      -- HSIO EOS P1
      -----------------------------------
      HSIO_BCO_P     : in     std_logic;   -- 0 Seq 0
      HSIO_BCO_N     : in     std_logic;   --
      HSIO_L0_CMD_N  : in     std_logic;   -- 1 Seq 1
      HSIO_L0_CMD_P  : in     std_logic;   --
      HSIO_R3_N      : in     std_logic;   -- 2 Seq 2
      HSIO_R3_P      : in     std_logic;   --
      HSIO_SP0_P     : in     std_logic;   -- 3 Seq 3
      HSIO_SP0_N     : in     std_logic;   -- -
      HSIO_DXOUT0_P  : in     std_logic;   -- 4 Seq 4
      HSIO_DXOUT0_N  : in     std_logic;   -- -
      HSIO_DXIN0_P   : out    std_logic;   -- Sink 0
      HSIO_DXIN0_N   : out    std_logic;   -- -
      HSIO_DXOUT1_P  : in     std_logic;   -- 5 Seq 5
      HSIO_DXOUT1_N  : in     std_logic;   -- -
      HSIO_DXIN1_P   : out    std_logic;   -- Sink 1
      HSIO_DXIN1_N   : out    std_logic;   -- -
      HSIO_DXOUT2_P  : in     std_logic;   -- 6 Seq 6
      HSIO_DXOUT2_N  : in     std_logic;   --
      HSIO_DXIN2_P   : out    std_logic;   -- Sink 2
      HSIO_DXIN2_N   : out    std_logic;   -- -
      HSIO_DXOUT3_P  : in     std_logic;   -- 7 Seq 7
      HSIO_DXOUT3_N  : in     std_logic;   -- -
      HSIO_DXIN3_P   : out    std_logic;   -- Sink 3
      HSIO_DXIN3_N   : out    std_logic;   -- -
      -- HSIO EOS P2
      -----------------------------------
      ABCUP_I        : out    std_logic;   -- 22 Reg
      SPARE1         : out    std_logic;   -- Unknown
      SPARE2         : in     std_logic;   -- Unknown
      SPARE3         : in     std_logic;   -- Unknown
      SPARE4         : in     std_logic;   -- Unknown
      SPARE5         : in     std_logic;   -- Unknown
      I2C_CLK        : inout  std_logic;   -- TWOWIRE
      I2C_DATA       : inout  std_logic;   -- TWOWIRE
      -- HYBRID P3
      -----------------------------------
      SHUNT_CTL_SW   : out    std_logic;   -- becomes SHUNTCTL
      BDP8_P         : inout  std_logic;   -- XOFF_R0_P
      BDP8_N         : inout  std_logic;   -- XOFF_R0_N
      BDP9_P         : inout  std_logic;   -- DATA_R0_P___FCCLK_N
      BDP9_N         : inout  std_logic;   -- DATA_R0_N___FCCLK_P
      BCO_P          : out    std_logic;   --
      BCO_N          : out    std_logic;   --
      DRC_P          : out    std_logic;   --
      DRC_N          : out    std_logic;   --
      L0_CMD_P       : out    std_logic;   --
      L0_CMD_N       : out    std_logic;   --
      R3_P           : out    std_logic;   --
      R3_N           : out    std_logic;   --
      REG_EN_A       : out    std_logic;   --
      REG_EN_D       : out    std_logic;   --
      BDP10_P        : inout  std_logic;   -- DATA_1_P___DATA_L_N
      BDP10_N        : inout  std_logic;   -- DATA_1_N___DATA_L_P
      BDP11_P        : inout  std_logic;   -- XOFF_1_P___XOFF_L_P
      BDP11_N        : inout  std_logic;   -- XOFF_1_N___XOFF_L_N
      BDP12_P        : inout  std_logic;   -- XOFF_R2_P___XOFF_R_P
      BDP12_N        : inout  std_logic;   -- XOFF_R2_N___XOFF_R_N
      BDP13_P        : inout  std_logic;   -- DATA_R2_P___DATA_R_N
      BDP13_N        : inout  std_logic;   -- DATA_R2_N___DATA_R_P
      BDP14_P        : inout  std_logic;   -- DATA3_P___FC1_P
      BDP14_N        : inout  std_logic;   -- DATA3_N___FC1_N
      BDP15_P        : inout  std_logic;   -- XOFF_R3_P___FC2_P
      BDP15_N        : inout  std_logic;   -- XOFF_R3_N___FC2_N
      ABCUP          : out    std_logic;
      ADDR0          : out    std_logic;
      ADDR1          : out    std_logic;
      ADDR2          : out    std_logic;
      ADDR3          : out    std_logic;
      ADDR4          : out    std_logic;
      RSTB           : out    std_logic;
      SCAN_ENABLE    : out    std_logic;
      SDI_BC         : out    std_logic;   --SCN_I_BC
      SDI_CLK        : out    std_logic;   --SCN_I_CK
      SDO_BC         : in     std_logic;   --SCN_O_BC
      SDO_CLK        : in     std_logic;   --SCN_O_CK
      SWITCH1        : in     std_logic;
      -- ASIC P4
      ------------------------------------
      TERM           : out    std_logic;
      ADDR0_I        : in     std_logic;   -- 13 Reg
      ADDR1_I        : in     std_logic;   -- 14 Reg
      ADDR2_I        : in     std_logic;   -- 15 Reg
      ADDR3_I        : in     std_logic;   -- 16 Reg
      ADDR4_I        : in     std_logic;   -- 17 Reg
      REG_ENA_I      : in     std_logic;   -- 10 Reg *
      REG_END_I      : in     std_logic;   -- 11 Reg *
      RSTB_I         : in     std_logic;   -- 8 Reg
      SCAN_EN_I      : in     std_logic;   -- 18 Reg *
      SDI_BC_I       : in     std_logic;   -- 19 TWOWIRE *
      SDI_CLK_I      : in     std_logic;   -- 21 TWOWIRE *
      SDO_BC_O       : in     std_logic;   -- TWOWIRE *
      SDO_CLK_O      : in     std_logic;   -- TWOWIRE *
      SHUNT_CTL_SW_I : in     std_logic;   -- 9 Reg
      SW1_O          : in     std_logic;   -- Status
      TERM_I         : in     std_logic    -- 12 Reg
   );

-- Declarations

end abc130_driver_pcb_top ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- abc130_driver.abc130_driver_pcb_top.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
library unisim;
use unisim.vcomponents.all;
library utils;
use utils.pkg_types.all;


architecture struct of abc130_driver_pcb_top is

   -- Architecture declarations

   -- Internal signal declarations
   signal hsio_dxout     : std_logic_vector(3 downto 0);
   signal hsio_dxin      : std_logic_vector(3 downto 0);
   signal hsio_l1r3_in   : std_ulogic;
   signal hsio_coml0_in  : std_ulogic;
   signal hsio_bco_in    : std_ulogic;
   signal hsio_spare_in  : std_ulogic;
   signal rst_ext        : std_logic;
   signal bco            : std_logic;
   signal drc            : std_logic;
   signal l0_cmd         : std_logic;
   signal r3             : std_logic;
   signal hs_p2_spare_i  : std_logic_vector(3 downto 0);     -- 13 Reg
   signal hs_p1_spare_i  : std_logic_vector(13 downto 0);    -- 13 Reg
   signal singlechip_sel : std_logic;
   signal HI             : std_logic;
   signal LO             : std_logic;
   signal data_rx        : std_logic_vector(3 downto 0);
   signal data_tx        : std_logic_vector(3 downto 0);
   signal xoff_tx        : std_logic_vector(3 downto 0);
   signal xoff_rx        : std_logic_vector(3 downto 0);
   signal dir_xoff       : std_logic_vector(3 downto 0);
   signal dir_data       : std_logic_vector(3 downto 0);
   signal sc_addr        : std_logic_vector(4 downto 0);     -- ADDR0-4
   signal clk40          : std_logic;
   signal clk80          : std_logic;
   signal clk160         : std_logic;
   signal rst            : std_logic;
   signal tmu_data       : std_logic;                        -- 9 Reg
   signal strobe40       : std_logic;
   signal clkn160        : std_ulogic;
   signal tmu_coml0_swap : std_logic;                        -- TWOWIRE *
   signal stat           : slv32_array(127 downto 0);
   signal reg            : slv32_array(127 downto 0);
   signal highz_data     : std_logic_vector(3 downto 0);
   signal highz_xoff     : std_logic_vector(3 downto 0);
   signal clkn80         : std_logic;
   signal clkn40         : std_logic;


   -- Component Declarations
   component clocks_resets
   port (
      hsio_bco_in : in     std_ulogic ;
      rst_ext     : in     std_logic ;
      clk160_o    : out    std_logic ;
      clk40_o     : out    std_logic ;
      clk80_o     : out    std_logic ;
      clkn160_o   : out    std_ulogic ;
      clkn40_o    : out    std_logic ;
      clkn80_o    : out    std_logic ;
      rst_o       : out    std_logic ;
      strobe40_o  : out    std_logic 
   );
   end component;
   component driver_main
   port (
      clk40            : in     std_logic ;
      clk80            : in     std_logic ;
      clk160           : in     std_logic ;
      clkn40           : in     std_logic ;
      clkn80           : in     std_logic ;
      clkn160          : in     std_logic ;
      rst              : in     std_logic ;
      -- HSIO IB P1
      -----------------------------------
      hs_bco_i         : in     std_logic ;
      hs_coml0_i       : in     std_logic ;
      hs_l1r3_i        : in     std_logic ;
      hs_sp0_i         : in     std_logic ;
      hs_dxout_i       : in     std_logic_vector (3 downto 0);
      hs_dxin_o        : out    std_logic_vector (3 downto 0);
      hs_p1_spare_i    : in     std_logic_vector (13 downto 0);
      -- HSIO IB P2
      -----------------------------------
      hs_p2_spare_i    : in     std_logic_vector (3 downto 0);
      hs_i2c_sdc_io    : inout  std_logic ;
      hs_i2c_sda_io    : inout  std_logic ;
      ------------------------------------------------------------------
      -- DUT
      -------------------------------------------------------------------
      singlechip_sel_o : out    std_logic ;                    -- 0=hybrid, 1=single chip
      dir_data_o       : out    std_logic_vector (3 downto 0);
      dir_xoff_o       : out    std_logic_vector (3 downto 0);
      highz_data_o     : out    std_logic_vector (3 downto 0);
      highz_xoff_o     : out    std_logic_vector (3 downto 0);
      -- COMMON (all to P3)
      -------------------------------------------------------------
      shuntctl_o       : out    std_logic ;                    -- SHUNT_CTL_SW, becomes SHUNTCTL
      reg_en_ana_o     : out    std_logic ;                    -- REG_EN_A
      reg_en_dig_o     : out    std_logic ;                    -- REG_EN_D
      bco_o            : out    std_logic ;                    -- BCO
      drc_o            : out    std_logic ;                    -- DRC
      coml0_o          : out    std_logic ;                    -- LO_CMD
      l1r3_o           : out    std_logic ;                    -- R3
      data_i           : in     std_logic_vector (3 downto 0);
      xoff_i           : in     std_logic_vector (3 downto 0);
      data_o           : out    std_logic_vector (3 downto 0);
      xoff_o           : out    std_logic_vector (3 downto 0);
      -- BDP8                             -- XOFF_R0_P
      -- BDP9                             -- DATA_R0_P___FCCLK_N  *INVERT
      -- BDP14                            -- DATA3_P___FC1_P
      -- BDP15                            -- XOFF_R3_P___FC2_P
      -- BDP10                            -- DATA_1_P___DATA_L_N  *INVERT
      -- BDP10                            -- DATA_1_P___DATA_L_N  *INVERT
      -- BDP11                            -- XOFF_1_P___XOFF_L_P
      -- BDP11                            -- XOFF_1_P___XOFF_L_P
      -- BDP13                            -- DATA_R2_P___DATA_R_N  *INVERT
      -- BDP13                            -- DATA_R2_P___DATA_R_N  *INVERT
      -- BDP12                            -- XOFF_R2_P___XOFF_R_P
      -- BDP12                            -- XOFF_R2_P___XOFF_R_P
      
      -- ASIC Only Signals (P4)
      ---------------------------------------------------------------
      sc_term_o        : out    std_logic ;                    -- TERM
      sc_addr_o        : out    std_logic_vector (4 downto 0); -- ADDR0-4
      sc_rstb_o        : out    std_logic ;                    -- RSTB
      sc_abcup_o       : out    std_logic ;                    -- ABCUP
      sc_sdo_bc_i      : in     std_logic ;                    -- SDO_BC           --SCN_O_BC
      sc_sdi_bc_o      : out    std_logic ;                    -- SDI_BC           --SCN_I_BC
      sc_sdo_clk_i     : in     std_logic ;                    -- SDO_CLK          --SCN_O_CK
      sc_sdi_clk_o     : out    std_logic ;                    -- SDI_CLK          --SCN_I_CK
      sc_scan_enable_o : out    std_logic ;                    -- SCAN_ENABLE
      sc_switch1_i     : in     std_logic ;                    -- SWITCH1
      -- Infra
      ---------------------------------------------------------------
      reg              : in     slv32_array (127 downto 0)
   );
   end component;
   component mux_io
   generic (
      SCDATA_INV : integer := 0;
      SCXOFF_INV : integer := 0;
      DATAONLY   : integer := 0
   );
   port (
      data_tx_i        : in     std_logic ;
      dir_data_i       : in     std_logic ;
      dir_xoff_i       : in     std_logic ;
      highz_data_i     : in     std_logic ;
      highz_xoff_i     : in     std_logic ;
      singlechip_sel_i : in     std_logic ;
      xoff_tx_i        : in     std_logic ;
      data_rx_o        : out    std_logic ;
      xoff_rx_o        : out    std_logic ;
      data_nio         : inout  std_logic ; -- DATA_R0_N___FCCLK_P
      data_pio         : inout  std_logic ; -- DATA_R0_P___FCCLK_N
      xoff_nio         : inout  std_logic ; -- XOFF_R0_N
      xoff_pio         : inout  std_logic   -- XOFF_R0_P
   );
   end component;
   component tmu_drv_top
   port (
      clk40        : in     std_logic ;
      clk80        : in     std_logic ;
      coml0_swap_i : in     std_logic ;               -- TWOWIRE *
      hsio_coml0_i : in     std_ulogic ;
      rst          : in     std_logic ;
      stat_i       : in     slv32_array (127 downto 0);
      strobe40_i   : in     std_logic ;
      reg_o        : out    slv32_array (127 downto 0);
      strm_data_o  : out    std_logic                 -- 9 Reg
   );
   end component;
   component IBUFDS
   generic (
      CAPACITANCE      : string  := "DONT_CARE";
      DIFF_TERM        : boolean := FALSE;
      DQS_BIAS         : string  := "FALSE";
      IBUF_DELAY_VALUE : string  := "0";
      IBUF_LOW_PWR     : boolean := TRUE;
      IFD_DELAY_VALUE  : string  := "AUTO";
      IOSTANDARD       : string  := "DEFAULT"
   );
   port (
      I  : in     std_ulogic;
      IB : in     std_ulogic;
      O  : out    std_ulogic
   );
   end component;
   component IBUFGDS
   generic (
      CAPACITANCE      : string  := "DONT_CARE";
      DIFF_TERM        : boolean := FALSE;
      IBUF_DELAY_VALUE : string  := "0";
      IBUF_LOW_PWR     : boolean := TRUE;
      IOSTANDARD       : string  := "DEFAULT"
   );
   port (
      I  : in     std_ulogic;
      IB : in     std_ulogic;
      O  : out    std_ulogic
   );
   end component;
   component OBUFDS
   generic (
      CAPACITANCE : string := "DONT_CARE";
      IOSTANDARD  : string := "DEFAULT";
      SLEW        : string := "SLOW"
   );
   port (
      I  : in     std_ulogic;
      O  : out    std_ulogic;
      OB : out    std_ulogic
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   HI <= '1';
   LO <= '0';

   -- HDL Embedded Text Block 2 eb2
   -- eb1 1
   stat(16#70#) <= x"1234d034";
   stat(16#71#) <= x"0000000" & "000" & SWITCH1;


   -- ModuleWare code(v1.12) for instance 'U_9' of 'buff'
   ADDR0 <= sc_addr(0);

   -- ModuleWare code(v1.12) for instance 'U_10' of 'buff'
   ADDR1 <= sc_addr(1);

   -- ModuleWare code(v1.12) for instance 'U_11' of 'buff'
   ADDR2 <= sc_addr(2);

   -- ModuleWare code(v1.12) for instance 'U_12' of 'buff'
   ADDR3 <= sc_addr(3);

   -- ModuleWare code(v1.12) for instance 'U_13' of 'buff'
   ADDR4 <= sc_addr(4);

   -- ModuleWare code(v1.12) for instance 'U_33' of 'buff'
   hs_p1_spare_i(0) <= RSTB_I;

   -- ModuleWare code(v1.12) for instance 'U_34' of 'buff'
   hs_p1_spare_i(1) <= SHUNT_CTL_SW_I;

   -- ModuleWare code(v1.12) for instance 'U_35' of 'buff'
   hs_p1_spare_i(2) <= REG_ENA_I;

   -- ModuleWare code(v1.12) for instance 'U_37' of 'buff'
   hs_p1_spare_i(3) <= REG_END_I;

   -- ModuleWare code(v1.12) for instance 'U_38' of 'buff'
   hs_p1_spare_i(4) <= TERM_I;

   -- ModuleWare code(v1.12) for instance 'U_39' of 'buff'
   hs_p1_spare_i(5) <= ADDR0_I;

   -- ModuleWare code(v1.12) for instance 'U_40' of 'buff'
   hs_p1_spare_i(6) <= ADDR1_I;

   -- ModuleWare code(v1.12) for instance 'U_41' of 'buff'
   hs_p1_spare_i(7) <= ADDR2_I;

   -- ModuleWare code(v1.12) for instance 'U_42' of 'buff'
   hs_p1_spare_i(8) <= ADDR3_I;

   -- ModuleWare code(v1.12) for instance 'U_43' of 'buff'
   hs_p1_spare_i(9) <= ADDR4_I;

   -- ModuleWare code(v1.12) for instance 'U_44' of 'buff'
   hs_p1_spare_i(10) <= SCAN_EN_I;

   -- ModuleWare code(v1.12) for instance 'U_45' of 'buff'
   hs_p1_spare_i(11) <= SDI_BC_I;

   -- ModuleWare code(v1.12) for instance 'U_46' of 'buff'
   hs_p1_spare_i(12) <= SDO_BC_O;

   -- ModuleWare code(v1.12) for instance 'U_47' of 'buff'
   hs_p1_spare_i(13) <= SDI_CLK_I;

   -- ModuleWare code(v1.12) for instance 'U_48' of 'buff'
   hs_p2_spare_i(0) <= SPARE2;

   -- ModuleWare code(v1.12) for instance 'U_49' of 'buff'
   hs_p2_spare_i(1) <= SPARE3;

   -- ModuleWare code(v1.12) for instance 'U_50' of 'buff'
   hs_p2_spare_i(2) <= SPARE4;

   -- ModuleWare code(v1.12) for instance 'U_51' of 'buff'
   hs_p2_spare_i(3) <= SPARE5;

   -- ModuleWare code(v1.12) for instance 'U_52' of 'buff'
   tmu_coml0_swap <= SDO_CLK_O;

   -- ModuleWare code(v1.12) for instance 'U_53' of 'buff'
   rst_ext <= SW1_O;

   -- Instance port mappings.
   Uclkrst : clocks_resets
      port map (
         hsio_bco_in => hsio_bco_in,
         rst_ext     => rst_ext,
         clk160_o    => clk160,
         clk40_o     => clk40,
         clk80_o     => clk80,
         clkn160_o   => clkn160,
         clkn40_o    => clkn40,
         clkn80_o    => clkn80,
         rst_o       => rst,
         strobe40_o  => strobe40
      );
   Udrivermain : driver_main
      port map (
         clk40            => clk40,
         clk80            => clk80,
         clk160           => clk160,
         clkn40           => clkn40,
         clkn80           => clkn80,
         clkn160          => clkn160,
         rst              => rst,
         hs_bco_i         => hsio_bco_in,
         hs_coml0_i       => hsio_coml0_in,
         hs_l1r3_i        => hsio_l1r3_in,
         hs_sp0_i         => hsio_spare_in,
         hs_dxout_i       => hsio_dxout,
         hs_dxin_o        => hsio_dxin,
         hs_p1_spare_i    => hs_p1_spare_i,
         hs_p2_spare_i    => hs_p2_spare_i,
         hs_i2c_sdc_io    => I2C_CLK,
         hs_i2c_sda_io    => I2C_DATA,
         singlechip_sel_o => singlechip_sel,
         dir_data_o       => dir_data,
         dir_xoff_o       => dir_xoff,
         highz_data_o     => highz_data,
         highz_xoff_o     => highz_xoff,
         shuntctl_o       => SHUNT_CTL_SW,
         reg_en_ana_o     => REG_EN_A,
         reg_en_dig_o     => REG_EN_D,
         bco_o            => bco,
         drc_o            => drc,
         coml0_o          => l0_cmd,
         l1r3_o           => r3,
         data_i           => data_rx,
         xoff_i           => xoff_rx,
         data_o           => data_tx,
         xoff_o           => xoff_tx,
         sc_term_o        => TERM,
         sc_addr_o        => sc_addr,
         sc_rstb_o        => RSTB,
         sc_abcup_o       => ABCUP,
         sc_sdo_bc_i      => SDO_BC,
         sc_sdi_bc_o      => SDI_BC,
         sc_sdo_clk_i     => SDO_CLK,
         sc_sdi_clk_o     => SDI_CLK,
         sc_scan_enable_o => SCAN_ENABLE,
         sc_switch1_i     => SWITCH1,
         reg              => reg
      );
   Umuxio0 : mux_io
      generic map (
         SCDATA_INV => 1,
         SCXOFF_INV => 0,
         DATAONLY   => 0
      )
      port map (
         data_tx_i        => data_tx(0),
         dir_data_i       => dir_data(0),
         dir_xoff_i       => dir_xoff(0),
         highz_data_i     => highz_data(0),
         highz_xoff_i     => highz_xoff(0),
         singlechip_sel_i => singlechip_sel,
         xoff_tx_i        => xoff_tx(0),
         data_rx_o        => data_rx(0),
         xoff_rx_o        => xoff_rx(0),
         data_nio         => BDP9_N,
         data_pio         => BDP9_P,
         xoff_nio         => BDP8_N,
         xoff_pio         => BDP8_P
      );
   Umuxio1 : mux_io
      generic map (
         SCDATA_INV => 1,
         SCXOFF_INV => 0,
         DATAONLY   => 0
      )
      port map (
         data_tx_i        => data_tx(1),
         dir_data_i       => dir_data(1),
         dir_xoff_i       => dir_xoff(1),
         highz_data_i     => highz_data(1),
         highz_xoff_i     => highz_xoff(1),
         singlechip_sel_i => singlechip_sel,
         xoff_tx_i        => xoff_tx(1),
         data_rx_o        => data_rx(1),
         xoff_rx_o        => xoff_rx(1),
         data_nio         => BDP10_N,
         data_pio         => BDP10_P,
         xoff_nio         => BDP11_N,
         xoff_pio         => BDP11_P
      );
   Umuxio2 : mux_io
      generic map (
         SCDATA_INV => 1,
         SCXOFF_INV => 0,
         DATAONLY   => 0
      )
      port map (
         data_tx_i        => data_tx(2),
         dir_data_i       => dir_data(2),
         dir_xoff_i       => dir_xoff(2),
         highz_data_i     => highz_data(2),
         highz_xoff_i     => highz_xoff(2),
         singlechip_sel_i => singlechip_sel,
         xoff_tx_i        => xoff_tx(2),
         data_rx_o        => data_rx(2),
         xoff_rx_o        => xoff_rx(2),
         data_nio         => BDP13_N,
         data_pio         => BDP13_P,
         xoff_nio         => BDP12_N,
         xoff_pio         => BDP12_P
      );
   Umuxio3 : mux_io
      generic map (
         SCDATA_INV => 0,
         SCXOFF_INV => 0,
         DATAONLY   => 1
      )
      port map (
         data_tx_i        => data_tx(3),
         dir_data_i       => dir_data(3),
         dir_xoff_i       => dir_xoff(3),
         highz_data_i     => highz_data(3),
         highz_xoff_i     => highz_xoff(3),
         singlechip_sel_i => singlechip_sel,
         xoff_tx_i        => xoff_tx(3),
         data_rx_o        => data_rx(3),
         xoff_rx_o        => xoff_rx(3),
         data_nio         => BDP14_N,
         data_pio         => BDP14_P,
         xoff_nio         => BDP15_N,
         xoff_pio         => BDP15_P
      );
   Utmutop : tmu_drv_top
      port map (
         clk40        => clk40,
         clk80        => clk80,
         coml0_swap_i => tmu_coml0_swap,
         hsio_coml0_i => hsio_coml0_in,
         rst          => rst,
         stat_i       => stat,
         strobe40_i   => strobe40,
         reg_o        => reg,
         strm_data_o  => tmu_data
      );
   Uib0 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => FALSE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => hsio_dxout(0),
         I  => HSIO_DXOUT0_P,
         IB => HSIO_DXOUT0_N
      );
   Uib1 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => FALSE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => hsio_dxout(1),
         I  => HSIO_DXOUT1_P,
         IB => HSIO_DXOUT1_N
      );
   Uib2 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => FALSE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => hsio_dxout(2),
         I  => HSIO_DXOUT2_P,
         IB => HSIO_DXOUT2_N
      );
   Uib3 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => FALSE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => hsio_dxout(3),
         I  => HSIO_DXOUT3_P,
         IB => HSIO_DXOUT3_N
      );
   Uib4 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => FALSE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => hsio_coml0_in,
         I  => HSIO_L0_CMD_P,
         IB => HSIO_L0_CMD_N
      );
   Uib5 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => FALSE,
         DQS_BIAS         => "FALSE",
         IBUF_DELAY_VALUE => "0",
         IBUF_LOW_PWR     => TRUE,
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => hsio_l1r3_in,
         I  => HSIO_BCO_P,
         IB => HSIO_BCO_N
      );
   Uib6 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => FALSE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => hsio_spare_in,
         I  => HSIO_SP0_P,
         IB => HSIO_SP0_N
      );
   Uibg5 : IBUFGDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => FALSE,
         IBUF_DELAY_VALUE => "0",
         IBUF_LOW_PWR     => TRUE,
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => hsio_bco_in,
         I  => HSIO_R3_P,
         IB => HSIO_R3_N
      );
   Uob0 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => HSIO_DXIN0_P,
         OB => HSIO_DXIN0_N,
         I  => hsio_dxin(0)
      );
   Uob1 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => HSIO_DXIN1_P,
         OB => HSIO_DXIN1_N,
         I  => hsio_dxin(1)
      );
   Uob2 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => HSIO_DXIN2_P,
         OB => HSIO_DXIN2_N,
         I  => hsio_dxin(2)
      );
   Uob3 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => HSIO_DXIN3_P,
         OB => HSIO_DXIN3_N,
         I  => hsio_dxin(3)
      );
   Uob4 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "BLVDS_25"
      )
      port map (
         O  => SPARE1,
         OB => ABCUP_I,
         I  => tmu_data
      );
   Uob10 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => BCO_P,
         OB => BCO_N,
         I  => bco
      );
   Uob11 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => DRC_P,
         OB => DRC_N,
         I  => drc
      );
   Uob12 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => L0_CMD_P,
         OB => L0_CMD_N,
         I  => l0_cmd
      );
   Uob13 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => R3_P,
         OB => R3_N,
         I  => r3
      );

end struct;
