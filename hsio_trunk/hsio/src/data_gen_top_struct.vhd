-- VHDL Entity hsio.data_gen_top.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library utils;
use utils.pkg_types.all;
library hsio;
use work.pkg_core_globals.all;

entity data_gen_top is
   port( 
      bcid_i          : in     std_logic_vector (11 downto 0);
      clk             : in     std_logic;
      l1id_i          : in     std_logic_vector (23 downto 0);
      mode40_strobe_i : in     std_logic;
      -- registers
      reg             : in     t_reg_bus;
      rst             : in     std_logic;
      trig80_i        : in     std_logic;
      gen13data80_o   : out    slv2_array (1 downto 0);
      gen13data_o     : out    slv2_array (1 downto 0);
      gendata0_o      : out    std_logic;
      gendata1_o      : out    std_logic;
      simdata0_o      : out    std_logic;
      simdata1_o      : out    std_logic
   );

-- Declarations

end data_gen_top ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- hsio.data_gen_top.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library utils;
use utils.pkg_types.all;

library hsio;
use hsio.pkg_core_globals.all;


architecture struct of data_gen_top is

   -- Architecture declarations

   -- Internal signal declarations
   signal HI              : std_logic;
   signal gen13abc_en     : std_logic;
   signal gen13data_en    : std_logic;
   signal len0            : std_logic_vector(11 downto 0);
   signal len1            : std_logic_vector(11 downto 0);
   signal sg0_config_word : std_logic_vector( 31 downto 0);
   signal sg0_rnd_seed    : std_logic_vector( 7 downto 0);
   signal sg1_config_word : std_logic_vector( 31 downto 0);
   signal sg1_rnd_seed    : std_logic_vector( 7 downto 0);


   -- Component Declarations
   component ro_datagen
   port (
      mode40_strobe_i : in     std_logic ;
      start_i         : in     std_logic ;
      abc_gendata_o   : out    std_logic ;
      len_i           : in     std_logic_vector (11 downto 0);
      clk             : in     std_logic ;
      rst             : in     std_logic 
   );
   end component;
   component sct_sim_module
   generic (
      -- The top two bits of the chip number (to allow streams starting from 32 and 64)
      -- eg: "01" = column starting with chip number of 32
      --     "10" = column starting with chip number of 64
      CHIPOFFSET : slv2 := "00"
   );
   port (
      bc_count         : in     std_logic_vector (7 downto 0);
      clk              : in     std_logic;
      config_in        : in     std_logic_vector (31 downto 0);
      l1_trigger_count : in     std_logic_vector (3 downto 0);
      level1_trigger   : in     std_logic;
      mode40_strobe_i  : in     std_logic;
      rnd_seed         : in     std_logic_vector (7 downto 0);
      rst              : in     std_logic;
      outlink          : out    std_logic
   );
   end component;
   component ro13_datagen
   generic (
      DOFFSET : std_logic_vector(15 downto 0) := x"0100"
   );
   port (
      mode_abc_i    : in     std_logic ;
      start_i       : in     std_logic ;
      abc130_data_o : out    slv2 ;
      len_i         : in     std_logic_vector (11 downto 0);
      en            : in     std_logic ;
      clk           : in     std_logic ;
      rst           : in     std_logic 
   );
   end component;
   component ro13_datagen80
   generic (
      DOFFSET : std_logic_vector(15 downto 0) := x"0100"
   );
   port (
      mode_abc_i    : in     std_logic ;
      start_i       : in     std_logic ;
      abc130_data_o : out    slv2 ;
      len_i         : in     std_logic_vector (11 downto 0);
      en            : in     std_logic ;
      clk           : in     std_logic ;
      rst           : in     std_logic 
   );
   end component;
   component m_power
   port (
      hi : out    std_logic ;
      lo : out    std_logic 
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1
   len0 <= reg(R_LEN0)(11 downto 0);
   len1 <= reg(R_LEN1)(11 downto 0);
   
   sg0_config_word <= reg(R_SG0_CONF_HI) & reg(R_SG0_CONF_LO);
   sg0_rnd_seed <= reg(R_SG_RNDSEEDS)(7 downto 0);
   
   sg1_config_word <= reg(R_SG1_CONF_HI) & reg(R_SG1_CONF_LO);
   sg1_rnd_seed <= reg(R_SG_RNDSEEDS)(15 downto 8);
   
   gen13data_en  <= reg(R_CONTROL)(CTL_GEN13DATA_EN);
   gen13abc_en  <= reg(R_CONTROL)(CTL_GEN13ABC_EN);


   -- Instance port mappings.
   Udatagen : ro_datagen
      port map (
         mode40_strobe_i => mode40_strobe_i,
         start_i         => trig80_i,
         abc_gendata_o   => gendata0_o,
         len_i           => len0,
         clk             => clk,
         rst             => rst
      );
   Udatagen1 : ro_datagen
      port map (
         mode40_strobe_i => mode40_strobe_i,
         start_i         => trig80_i,
         abc_gendata_o   => gendata1_o,
         len_i           => len1,
         clk             => clk,
         rst             => rst
      );
   Usimgen0 : sct_sim_module
      port map (
         clk              => clk,
         mode40_strobe_i  => HI,
         rst              => rst,
         rnd_seed         => sg0_rnd_seed,
         config_in        => sg0_config_word,
         level1_trigger   => trig80_i,
         l1_trigger_count => l1id_i(3 downto 0),
         bc_count         => bcid_i(7 downto 0),
         outlink          => simdata0_o
      );
   Usimgen1 : sct_sim_module
      port map (
         clk              => clk,
         mode40_strobe_i  => HI,
         rst              => rst,
         rnd_seed         => sg1_rnd_seed,
         config_in        => sg1_config_word,
         level1_trigger   => trig80_i,
         l1_trigger_count => l1id_i(3 downto 0),
         bc_count         => bcid_i(7 downto 0),
         outlink          => simdata1_o
      );
   Uro13dg0 : ro13_datagen
      generic map (
         DOFFSET => x"0000"
      )
      port map (
         mode_abc_i    => gen13abc_en,
         start_i       => trig80_i,
         abc130_data_o => gen13data_o(0),
         len_i         => len0,
         en            => gen13data_en,
         clk           => clk,
         rst           => rst
      );
   Uro13dg1 : ro13_datagen
      generic map (
         DOFFSET => x"0000"
      )
      port map (
         mode_abc_i    => gen13abc_en,
         start_i       => trig80_i,
         abc130_data_o => gen13data_o(1),
         len_i         => len1,
         en            => gen13data_en,
         clk           => clk,
         rst           => rst
      );
   Uro13dg2 : ro13_datagen80
      generic map (
         DOFFSET => x"0000"
      )
      port map (
         mode_abc_i    => gen13abc_en,
         start_i       => trig80_i,
         abc130_data_o => gen13data80_o(1),
         len_i         => len1,
         en            => gen13data_en,
         clk           => clk,
         rst           => rst
      );
   Uro13dg3 : ro13_datagen80
      generic map (
         DOFFSET => x"0000"
      )
      port map (
         mode_abc_i    => gen13abc_en,
         start_i       => trig80_i,
         abc130_data_o => gen13data80_o(0),
         len_i         => len0,
         en            => gen13data_en,
         clk           => clk,
         rst           => rst
      );
   Umpower : m_power
      port map (
         hi => HI,
         lo => open
      );

end struct;
