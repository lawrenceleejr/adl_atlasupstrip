-- VHDL Entity hsio.net_usb_top.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use work.pkg_hsio_globals.all;
library utils;
use utils.pkg_types.all;

--use work.all;


entity net_usb_top is
   generic( 
      MAC0_SF_MAP : integer := 0;
      MAC1_SF_MAP : integer := 1
   );
   port( 
      clk             : in     std_logic;
      clk125          : in     std_logic;
      clk_25_50       : in     std_logic;
      clk_idelay      : in     std_logic;
      gmii_col_i      : in     std_logic;                       -- ETH_COL
      gmii_crs_i      : in     std_logic;                       -- ETH_CRS
      gmii_rx_clk_i   : in     std_logic;
      gmii_rx_dv_i    : in     std_logic;                       -- ETH_DV
      gmii_rx_er_i    : in     std_logic;                       -- ETH_ER
      gmii_rxd_i      : in     std_logic_vector (7 downto 0);   -- ETH_RXD
      init_i          : in     std_logic;
      macaddress_i    : in     std_logic_vector (47 downto 0);
      marv_int_ni     : in     std_logic;                       -- ETH_CRS
      marv_md_i       : in     std_logic;                       -- ETH_MDIO
      mii_tx_clk_i    : in     std_logic;
      refclk1         : in     std_logic;
      rst_in          : in     std_logic;
      rx_fifo_rst_i   : in     std_logic;
      rx_lld_i        : in     std_logic;

      -- PGP Interface

      -- MGT Serial Pins
      pgpRefClk    : in  std_logic;
      pgpClk       : in  std_logic;
      mgtRxN       : in  std_logic;
      mgtRxP       : in  std_logic;
      mgtTxN       : out std_logic;
      mgtTxP       : out std_logic;

      -- end PGP interface

      sf_absent_i     : in     std_logic_vector (3 downto 0);
      sf_rxm          : in     std_logic_vector (3 downto 0);   --LANE_7_RX_M  IB09 net: IB09 Net: CE1_LANE6_RX_M (RD-)
      sf_rxp          : in     std_logic_vector (3 downto 0);   --LANE_7_RX_P  IB09 net: IB09 Net: CE1_LANE6_RX_P (RD+)
      sf_sda_i        : in     std_logic_vector (3 downto 0);   --GPIO_19  IB09 net: IB09 Net: CD_FO_SDAT1 (SDA)
      sf_txfault_i    : in     std_logic_vector (3 downto 0);
      sfp_los_i       : in     std_logic_vector (3 downto 0);
      tx_fifo_rst_i   : in     std_logic;
      tx_lls_i        : in     t_llsrc;
      usb_clk         : in     std_logic;
      usb_rst         : in     std_logic;
      usb_rxf_i       : in     std_logic;                       --USB_RXF_N
      usb_txe_i       : in     std_logic;                       --USB_TXE_N
      dbg_bus_o       : out    std_logic_vector (31 downto 0);
      gmii_gtx_clk_o  : out    std_logic;                       -- ETH_GTX_CLK
      gmii_tx_en_o    : out    std_logic;                       -- ETH_EN
      gmii_tx_er_o    : out    std_logic;                       -- ETH_ER
      -- GMII Interface - EMAC0
      gmii_txd_o      : out    std_logic_vector (7 downto 0);   -- ETH_TXD
      init_done_o     : out    std_logic;
      marv_coma_o     : out    std_logic;                       -- ETH_GTX_CLK
      marv_md_o       : out    std_logic;                       -- ETH_MDIO
      marv_md_to      : out    std_logic;                       -- ETH_MDIO
      -- MDIO Interface - EMAC0
      marv_mdc_o      : out    std_logic;                       -- ETH_MDC
      marv_reset_no   : out    std_logic;                       -- ETH_GTX_CLK
      rx_lls_o        : out    t_llsrc;
      rx_ok_o         : out    std_logic;
      sf_mac_stat_o   : out    slv64_array (1 downto 0);
      sf_ratesel_o    : out    std_logic_vector (3 downto 0);
      sf_scl_o        : out    std_logic_vector (3 downto 0);   --GPIO_18  IB09 net: IB09 Net: CD_FO_SCLK1 (SCL)
      sf_sda_o        : out    std_logic_vector (3 downto 0);   --GPIO_18  IB09 net: IB09 Net: CD_FO_SCLK1 (SCL)
      sf_sda_to       : out    std_logic_vector (3 downto 0);   --GPIO_18  IB09 net: IB09 Net: CD_FO_SCLK1 (SCL)
      sf_stat_word_o  : out    slv64_array (1 downto 0);
      sf_syncacq_o    : out    std_logic_vector (1 downto 0);
      -- ZONE3 (ATCA) CONNECTOR
      sf_tx_dis_o     : out    std_logic_vector (3 downto 0);   --GPIO_13  IB09 net: IB09 Net: CE1_FO_TX_DIS1 (TX_DISABLE)
      sf_txm          : out    std_logic_vector (3 downto 0);   --LANE_7_TX_M  IB09 net: IB09 Net: CE1_LANE6_TX_M (TD-)
      sf_txp          : out    std_logic_vector (3 downto 0);   --LANE_7_TX_M  IB09 net: IB09 Net: CE1_LANE6_TX_M (TD-)
      stat_word_cu_o  : out    std_logic_vector (63 downto 0);
      stat_word_usb_o : out    std_logic_vector (63 downto 0);
      tx_lld_o        : out    std_logic;
      tx_ok_o         : out    std_logic;
      usb_rd_o        : out    std_logic;                       --USB_RD_N
      usb_wr_o        : out    std_logic;                       --USB_WR
      -- USB INTERFACE
      usb_d_io        : inout  std_logic_vector (7 downto 0)    --USB_D7
   );

-- Declarations

end net_usb_top ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- hsio.net_usb_top.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library utils;
use utils.pkg_types.all;

library hsio;
use hsio.pkg_core_globals.all;
use hsio.pkg_hsio_globals.all;


architecture struct of net_usb_top is

   -- Architecture declarations

   -- Internal signal declarations
   signal CLIENTEMAC0PAUSEREQ       : std_logic;
   signal CLIENTEMAC0PAUSEVAL       : std_logic_vector(15 downto 0);
   signal CLIENTEMAC0TXIFGDELAY     : std_logic_vector(7 downto 0);
   signal EMAC0CLIENTRXSTATS        : std_logic_vector(6 downto 0);
   signal EMAC0CLIENTRXSTATSBYTEVLD : std_logic;
   signal EMAC0CLIENTRXSTATSVLD     : std_logic;
   signal EMAC0CLIENTTXSTATS        : std_logic;
   signal EMAC0CLIENTTXSTATSBYTEVLD : std_logic;
   signal EMAC0CLIENTTXSTATSVLD     : std_logic;
   signal LO                        : std_logic;
   signal cu_rx_dvld                : std_logic;
   signal cu_rx_framedrop           : std_logic;
   signal cu_rx_goodframe           : std_logic;
   signal cu_rx_overflow            : std_logic;
   signal cu_rxll_fifo_status       : std_logic_vector(3 downto 0);
   signal cu_tx_ack                 : std_logic;
   signal cu_tx_collision           : std_logic;
   signal cu_tx_overflow            : std_logic;
   signal cu_tx_retransmit          : std_logic;
   -- *** mod start
   signal cu_txll_fifo_status       : std_logic_vector(3 downto 0);
   signal ext_pause_clr             : std_logic_vector(1 downto 0);
   signal ext_pause_req             : std_logic_vector(1 downto 0);
   -- client interface clocking signals - EMAC0
   signal gmii_tx_clk_o             : std_logic;
   signal machost_addr              : std_logic_vector(10 downto 0);
   signal machost_data              : std_logic_vector(63 downto 0);
   signal machost_data_out_sf       : slv64_array(1 downto 0);
   signal machost_rd                : std_logic_vector(1 downto 0);
   signal machost_wr                : std_logic_vector(1 downto 0);
   signal mode_cu                   : std_logic;
   signal mode_sf                   : std_logic;
   signal mode_usb                  : std_logic;
   signal net_data                  : std_logic_vector(15 downto 0);
   signal net_datab                 : std_logic_vector(15 downto 0);
   signal net_dst_rdy               : std_logic;
   signal net_dst_rdyb              : std_logic;
   signal net_eof                   : std_logic;
   signal net_eofb                  : std_logic;
   signal net_sof                   : std_logic;
   signal net_sofb                  : std_logic;
   signal net_src_rdy               : std_logic;
   signal net_src_rdyb              : std_logic;
   signal quanta_timer_tick         : std_logic;
   signal rst                       : std_logic;
   signal rx_data                   : std_logic_vector(15 downto 0);
   signal rx_dst_rdy                : std_logic;
   signal rx_eof                    : std_logic;
   signal rx_ok                     : std_logic;
   signal rx_ok_q                   : std_logic_vector(1 downto 0);
   signal rx_sof                    : std_logic;
   signal rx_src_mac                : std_logic_vector(47 downto 0);
   signal rx_src_rdy                : std_logic;
   signal rxfrst                    : std_logic;
   -- address swap receiver connections - EMAC0
   signal rxll_data_cu              : std_logic_vector(15 downto 0);
   signal rxll_data_sf              : slv16;
   signal rxll_dst_rdy_cu           : std_logic;
   signal rxll_dst_rdy_cu_n         : std_logic;
   signal rxll_dst_rdy_sf           : std_logic;
   signal rxll_eof_cu               : std_logic;
   signal rxll_eof_cu_n             : std_logic;
   signal rxll_eof_sf               : std_logic;
   signal rxll_sof_cu               : std_logic;
   signal rxll_sof_cu_n             : std_logic;
   signal rxll_sof_sf               : std_logic;
   signal rxll_src_rdy_cu           : std_logic;
   signal rxll_src_rdy_cu_n         : std_logic;
   signal rxll_src_rdy_sf           : std_logic;
   -- Client Receiver Interface - EMAC0
   signal sf_rx_goodframe           : std_logic_vector(1 downto 0);
   signal sf_sel                    : std_logic_vector(1 downto 0);
   signal sf_tx_ack                 : std_logic_vector(1 downto 0);
   signal sm_host_addr              : std_logic_vector(9 downto 0);
   signal sm_host_miimsel           : std_logic;
   signal sm_host_opcode            : std_logic_vector(1 downto 0);
   signal sm_host_req               : std_logic;
   signal sm_host_wrdata            : std_logic_vector(31 downto 0);
   signal sparein0                  : std_logic_vector(63 downto 0);
   signal sparein1                  : std_logic_vector(63 downto 0);
   signal tx_data                   : std_logic_vector(15 downto 0);
   signal tx_dst_rdy_net            : std_logic;
   signal tx_dst_rdy_usb            : std_logic;
   signal tx_eof                    : std_logic;
   signal tx_ok                     : std_logic;
   signal tx_ok_q                   : std_logic_vector(1 downto 0);
   signal tx_sof                    : std_logic;
   signal tx_src_rdy                : std_logic;
   signal txfrst                    : std_logic;
   -- net client side (output) interface
   signal txll_data_net             : std_logic_vector(15 downto 0);
   -- net client side (output) interface
   signal txll_data_net0            : std_logic_vector(15 downto 0);
   signal txll_dst_rdy_cu           : std_logic;
   signal txll_dst_rdy_cu_n         : std_logic;
   signal txll_dst_rdy_net          : std_logic;
   signal txll_dst_rdy_sf           : std_logic;
   signal txll_dst_rdy_sf_int       : std_logic;
   signal txll_eof_cu_n             : std_logic;
   signal txll_eof_net              : std_logic;
   signal txll_eof_sf               : std_logic;
   signal txll_sof_cu_n             : std_logic;
   signal txll_sof_net              : std_logic;
   signal txll_sof_sf               : std_logic;
   signal txll_src_rdy_cu_n         : std_logic;
   signal txll_src_rdy_net          : std_logic;
   signal txll_src_rdy_sf           : std_logic;
   signal usb_rd_data               : std_logic_vector(15 downto 0);
   signal usb_rd_dst_ready          : std_logic;
   signal usb_rd_eof                : std_logic;
   signal usb_rd_sof                : std_logic;
   signal usb_rd_src_ready          : std_logic;
   signal usb_wr_data               : std_logic_vector(15 downto 0);
   signal usb_wr_dst_ready          : std_logic;
   signal usb_wr_eof                : std_logic;
   signal usb_wr_sof                : std_logic;
   signal usb_wrl_src_ready         : std_logic;

   -- Implicit buffer signal declarations
   signal sf_syncacq_o_internal : std_logic_vector (1 downto 0);





   -- PGP Front End Wrapper                                                                                                                                                                                                                                                     
   component BUFGMUX port (O: out std_logic; I0: in std_logic; I1: in std_logic; S: in std_logic); end component;
   component PgpFrontEnd
      generic (
      MgtMode    : string  := "A";
      RefClkSel  : string  := "REFCLK1"
      );
      port (
      pgpRefClk1       : in  std_logic;
      pgpRefClk2       : in  std_logic;
      mgtRxRecClk      : out std_logic;
      pgpClk           : in  std_logic;
      pgpReset         : in  std_logic;
      pgpDispA         : out std_logic_vector(7 downto 0);
      pgpDispB         : out std_logic_vector(7 downto 0);
      resetOut         : out std_logic;
      locClk           : in  std_logic;
      locReset         : in  std_logic;
      cmdEn            : out std_logic;
      cmdOpCode        : out std_logic_vector(7  downto 0);
      cmdCtxOut        : out std_logic_vector(23 downto 0);
      regReq           : out std_logic;
      regOp            : out std_logic;
      regInp           : out std_logic;
      regAck           : in  std_logic;
      regFail          : in  std_logic;
      regAddr          : out std_logic_vector(23 downto 0);
      regDataOut       : out std_logic_vector(31 downto 0);
      regDataIn        : in  std_logic_vector(31 downto 0);
      frameTxEnable    : in  std_logic;
      frameTxSOF       : in  std_logic;
      frameTxEOF       : in  std_logic;
      frameTxEOFE      : in  std_logic;
      frameTxData      : in  std_logic_vector(15 downto 0);
      frameTxAFull     : out std_logic;
      frameRxValid     : out std_logic;
      frameRxReady     : in  std_logic;
      frameRxSOF       : out std_logic;
      frameRxEOF       : out std_logic;
      frameRxEOFE      : out std_logic;
      frameRxData      : out std_logic_vector(15 downto 0);
      valid            : out std_logic;
      eof              :out std_logic;
      sof              :out std_logic;
      mgtRxN           : in  std_logic;
      mgtRxP           : in  std_logic;
      mgtTxN           : out std_logic;
      mgtTxP           : out std_logic;
      mgtCombusIn      : in  std_logic_vector(15 downto 0);
      mgtCombusOut     : out std_logic_vector(15 downto 0)
      );
   end component;

   -- Component Declarations
   component PauseQuantaTimer
   port (
      clk           : in     std_logic ;
      rst           : in     std_logic ;
      quanta_tick_o : out    std_logic 
   );
   end component;
   component eth2x16_top
   port (
      machost_data_i      : in     std_logic_vector (63 downto 0);
      machost_addr_i      : in     std_logic_vector (10 downto 0);
      REFCLK2_i           : in     std_logic ;
      REFCLK1_i           : in     std_logic ;
      clk_25_50_i         : in     std_logic ;
      hostclk_i           : in     std_logic ;
      init_i              : in     std_logic ;
      host_reset_i        : in     std_logic ;
      tx_fifo_clk_i       : in     std_logic ;
      sf_ratesel_o        : out    std_logic_vector (1 downto 0);
      sf_txdisable_o      : out    std_logic_vector (1 downto 0);
      sf_scl_o            : out    std_logic_vector (1 downto 0);
      sf_sda_i            : in     std_logic_vector (1 downto 0);
      spare_o0            : out    std_logic_vector (63 downto 0);
      spare_i0            : in     std_logic_vector (63 downto 0);
      spare_o1            : out    std_logic_vector (63 downto 0);
      spare_i1            : in     std_logic_vector (63 downto 0);
      quanta_timer_tick_i : in     std_logic ;
      rx_fifo_clk_i       : in     std_logic ;
      resetdone_o         : out    std_logic ;
      stat_word           : out    slv64_array (1 downto 0);
      mac_stat            : out    slv64_array (1 downto 0);
      sf_sda_o            : out    std_logic_vector (1 downto 0);
      sf_sda_to           : out    std_logic_vector (1 downto 0);
      sf_txfault_i        : in     std_logic_vector (1 downto 0);
      sf_absent_i         : in     std_logic_vector (1 downto 0);
      sfp_los_i           : in     std_logic_vector (1 downto 0);
      --EMAC-MGT link status
      syncacq_o           : out    std_logic_vector (1 downto 0);
      ext_pause_clr       : in     std_logic_vector (1 downto 0);
      ext_pause_req       : in     std_logic_vector (1 downto 0);
      rx_fifo_rst_i       : in     std_logic ;
      rxp_i               : in     std_logic_vector (1 downto 0);
      rxn_i               : in     std_logic_vector (1 downto 0);
      txp_o               : out    std_logic_vector (1 downto 0);
      txn_o               : out    std_logic_vector (1 downto 0);
      tx_fifo_rst_i       : in     std_logic ;
      machost_wr_i        : in     std_logic_vector (1 downto 0);
      machost_data_o      : out    slv64_array (1 downto 0);
      machost_rd_i        : in     std_logic_vector (1 downto 0);
      tx_ack_o            : out    std_logic_vector (1 downto 0);
      rx_goodframe_o      : out    std_logic_vector (1 downto 0);
      rx_data_o           : out    slv16 ;
      rx_dst_rdy_i        : in     std_logic ;
      rx_sof_o            : out    std_logic ;
      rx_src_rdy_o        : out    std_logic ;
      rx_eof_o            : out    std_logic ;
      tx_data_i           : in     slv16 ;
      tx_eof_i            : in     std_logic ;
      tx_src_rdy_i        : in     std_logic ;
      tx_dst_rdy_o        : out    std_logic ;
      tx_sof_i            : in     std_logic 
   );
   end component;
   component eth_gmii16_locallink
   port (
      -- Local link Receiver Interface - EMAC0
      RX_LL_CLOCK_0             : in     std_logic ;
      RX_LL_RESET_0             : in     std_logic ;
      RX_LL_DATA_0              : out    std_logic_vector (15 downto 0);
      RX_LL_SOF_N_0             : out    std_logic ;
      RX_LL_EOF_N_0             : out    std_logic ;
      RX_LL_SRC_RDY_N_0         : out    std_logic ;
      RX_LL_DST_RDY_N_0         : in     std_logic ;
      RX_LL_FIFO_STATUS_0       : out    std_logic_vector (3 downto 0);
      -- Local link Transmitter Interface - EMAC0
      TX_LL_CLOCK_0             : in     std_logic ;
      TX_LL_RESET_0             : in     std_logic ;
      TX_LL_DATA_0              : in     std_logic_vector (15 downto 0);
      TX_LL_SOF_N_0             : in     std_logic ;
      TX_LL_EOF_N_0             : in     std_logic ;
      TX_LL_SRC_RDY_N_0         : in     std_logic ;
      TX_LL_DST_RDY_N_0         : out    std_logic ;
      -- Client Receiver Interface - EMAC0
      EMAC0CLIENTRXDVLD         : out    std_logic ;
      EMAC0CLIENTRXFRAMEDROP    : out    std_logic ;
      EMAC0CLIENTRXSTATS        : out    std_logic_vector (6 downto 0);
      EMAC0CLIENTRXSTATSVLD     : out    std_logic ;
      EMAC0CLIENTRXSTATSBYTEVLD : out    std_logic ;
      -- Client Transmitter Interface - EMAC0
      CLIENTEMAC0TXIFGDELAY     : in     std_logic_vector (7 downto 0);
      EMAC0CLIENTTXSTATS        : out    std_logic ;
      EMAC0CLIENTTXSTATSVLD     : out    std_logic ;
      EMAC0CLIENTTXSTATSBYTEVLD : out    std_logic ;
      -- MAC Control Interface - EMAC0
      CLIENTEMAC0PAUSEREQ       : in     std_logic ;
      CLIENTEMAC0PAUSEVAL       : in     std_logic_vector (15 downto 0);
      -- Clock Signals - EMAC0
      GTX_CLK_0                 : in     std_logic ;
      RX_CLIENT_CLK_0           : out    std_logic ;
      TX_CLIENT_CLK_0           : out    std_logic ;
      -- GMII Interface - EMAC0
      GMII_TXD_0                : out    std_logic_vector (7 downto 0);
      GMII_TX_EN_0              : out    std_logic ;
      GMII_TX_ER_0              : out    std_logic ;
      GMII_TX_CLK_0             : out    std_logic ;
      GMII_RXD_0                : in     std_logic_vector (7 downto 0);
      GMII_RX_DV_0              : in     std_logic ;
      GMII_RX_ER_0              : in     std_logic ;
      GMII_RX_CLK_0             : in     std_logic ;
      MII_TX_CLK_0              : in     std_logic ;
      GMII_COL_0                : in     std_logic ;
      GMII_CRS_0                : in     std_logic ;
      -- MDIO Interface - EMAC0
      MDC_0                     : out    std_logic ;
      MDIO_0_I                  : in     std_logic ;
      MDIO_0_O                  : out    std_logic ;
      MDIO_0_T                  : out    std_logic ;
      -- Generic Host Interface
      HOSTOPCODE                : in     std_logic_vector (1 downto 0);
      HOSTREQ                   : in     std_logic ;
      HOSTMIIMSEL               : in     std_logic ;
      HOSTADDR                  : in     std_logic_vector (9 downto 0);
      HOSTWRDATA                : in     std_logic_vector (31 downto 0);
      HOSTMIIMRDY               : out    std_logic ;
      HOSTRDDATA                : out    std_logic_vector (31 downto 0);
      HOSTEMAC1SEL              : in     std_logic ;
      HOSTCLK                   : in     std_logic ;
      -- Reference clock for RGMII IODELAYs
      REFCLK                    : in     std_logic ;
      -- *** mod start
      tx_fifo_stat              : out    std_logic_vector (3 downto 0);
      tx_overflow               : out    std_logic ;
      rx_overflow               : out    std_logic ;
      tx_ack                    : out    std_logic ;
      tx_collision              : out    std_logic ;
      tx_retransmit             : out    std_logic ;
      rx_goodframe              : out    std_logic ;
      -- *** mod end
      
      -- Asynchronous Reset
      RESET                     : in     std_logic 
   );
   end component;
   component net_rx_pktfmt16
   generic (
      BYTESWAP : integer := 1
   );
   port (
      -- net side input interface
      net_data_i     : in     slv16 ;          -- Erdem slv8;
      net_sof_i      : in     std_logic ;
      net_eof_i      : in     std_logic ;
      net_dst_rdy_o  : out    std_logic ;
      net_src_rdy_i  : in     std_logic ;
      -- hsio side side (output) interface
      hsio_data_o    : out    slv16  := x"0000";
      hsio_sof_o     : out    std_logic ;
      hsio_eof_o     : out    std_logic ;
      hsio_dst_rdy_i : in     std_logic ;
      hsio_src_rdy_o : out    std_logic ;
      rx_src_mac_o   : out    slv48 ;
      clk            : in     std_logic ;
      rst            : in     std_logic 
   );
   end component;
   component net_tx_pktfmt16
   port (
      --alt_dest_type_en_i : in std_logic;
      --***    alt_dest_mac_en_i : in std_logic;
      --***    mac_alt_dest_i   : in  std_logic_vector (47 downto 0);
      
      -- input interface
      data_i       : in     std_logic_vector (15 downto 0);
      sof_i        : in     std_logic ;
      eof_i        : in     std_logic ;
      dst_rdy_o    : out    std_logic ;
      src_rdy_i    : in     std_logic ;
      --data_length_i : in  std_logic_vector (15 downto 0);  -- HSIO length field
      mac_dest_i   : in     std_logic_vector (47 downto 0);
      mac_source_i : in     std_logic_vector (47 downto 0);
      -- net client side (output) interface
      ll_data_o    : out    std_logic_vector (15 downto 0); --(7 downto 0);  -- Erdem
      ll_sof_o     : out    std_logic ;
      ll_eof_o     : out    std_logic ;
      ll_dst_rdy_i : in     std_logic ;
      ll_src_rdy_o : out    std_logic ;
      clk          : in     std_logic ;
      rst          : in     std_logic 
   );
   end component;
   component ll_mux_passive
   generic (
      DATA_WIDTH : integer := 16
   );
   port (
      -- Common
      sof_o      : out    std_logic ;
      eof_o      : out    std_logic ;
      src_rdy_o  : out    std_logic ;
      dst_rdy_i  : in     std_logic ;
      data_o     : out    std_logic_vector (DATA_WIDTH-1 downto 0);
      -- Port 0
      sof0_i     : in     std_logic ;
      eof0_i     : in     std_logic ;
      src_rdy0_i : in     std_logic ;
      dst_rdy0_o : out    std_logic ;
      data0_i    : in     std_logic_vector (DATA_WIDTH-1 downto 0);
      -- Port 1
      sof1_i     : in     std_logic ;
      eof1_i     : in     std_logic ;
      src_rdy1_i : in     std_logic ;
      dst_rdy1_o : out    std_logic ;
      data1_i    : in     std_logic_vector (DATA_WIDTH-1 downto 0);
      sel        : in     std_logic 
   );
   end component;
   component lls_break
   port (
      lls_i     : in     t_llsrc;
      data_o    : out    std_logic_vector (15 downto 0);
      eof_o     : out    std_logic;
      sof_o     : out    std_logic;
      src_rdy_o : out    std_logic
   );
   end component;
   component lls_make
   port (
      data_i    : in     std_logic_vector (15 downto 0);
      eof_i     : in     std_logic;
      sof_i     : in     std_logic;
      src_rdy_i : in     std_logic;
      lls       : out    t_llsrc
   );
   end component;
   component ll_enbuff
   port (
      srci : in     std_logic ;
      sofi : in     std_logic ;
      eofi : in     std_logic ;
      dsto : out    std_logic ;
      srco : out    std_logic ;
      sofo : out    std_logic ;
      eofo : out    std_logic ;
      dsti : in     std_logic ;
      en   : in     std_logic 
   );
   end component;
   component ll_enbuffn
   port (
      srci  : in     std_logic ;
      sofi  : in     std_logic ;
      eofi  : in     std_logic ;
      dsto  : out    std_logic ;
      srcno : out    std_logic ;
      sofno : out    std_logic ;
      eofno : out    std_logic ;
      dstni : in     std_logic ;
      en    : in     std_logic 
   );
   end component;
   component m_power
   port (
      hi : out    std_logic ;
      lo : out    std_logic 
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1                                        
   
   
   stat_word_cu_o(15 downto 12) <=  cu_txll_fifo_status;
   stat_word_cu_o(11) <=  cu_tx_collision;
   stat_word_cu_o(10) <=  cu_tx_retransmit;
   stat_word_cu_o(9) <=  cu_tx_overflow;
   stat_word_cu_o(8) <=  cu_tx_ack;
   
   stat_word_cu_o(7 downto 4) <= cu_rxll_fifo_status;
   stat_word_cu_o(3) <= cu_rx_goodframe;
   stat_word_cu_o(2) <= cu_rx_overflow;
   stat_word_cu_o(1) <= cu_rx_framedrop;
   stat_word_cu_o(0) <= cu_rx_dvld;
   
   
   
   

   -- HDL Embedded Text Block 2 eb2
   -- eb1 1
   sm_host_req     <= '0';
   sm_host_addr    <= (others => '0');
   sm_host_opcode  <= "00";
   sm_host_wrdata <= (others => '0');
   sm_host_miimsel <= '0';

   -- HDL Embedded Text Block 3 eb3
   -- eb1 1
   -- zeroing unused busses
   machost_addr <= (others => '0');
   machost_data <= (others => '0');
   

   -- HDL Embedded Text Block 4 eb4
   -- eb4
   
   -- priority
   sf_sel <= "00" when (sf_syncacq_o_internal(0) = '1') else
             "01" when (sf_syncacq_o_internal(1) = '1') else
             "11";
   
   -- discrete enables
   
   mode_sf <= '1' when sf_sel = "00" else
              '1' when sf_sel = "01" else
              '0';
   
   mode_usb <= '0';
   
   mode_cu <= '1' when sf_sel = "11" else
              '0';
   
   
   -- signals
   
   tx_ok <= sf_tx_ack(0) when sf_sel = "00" else
            sf_tx_ack(1) when sf_sel = "01" else
            cu_tx_ack    when sf_sel = "11" else
            '0';
   
   rx_ok <= sf_rx_goodframe(0) when sf_sel = "00" else
            sf_rx_goodframe(1) when sf_sel = "01" else
            cu_rx_goodframe    when sf_sel = "11" else
            '0';
   
   
   oks_sync : process (clk)
   begin
     if falling_edge(clk) then
       tx_ok_q(0) <= tx_ok;
       rx_ok_q(0) <= rx_ok;
     end if;
   
     if rising_edge(clk) then
       tx_ok_q(1) <= tx_ok;
       rx_ok_q(1) <= rx_ok;
       tx_ok_o    <= tx_ok_q(0) or tx_ok_q(1);
       rx_ok_o    <= rx_ok_q(0) or rx_ok_q(1);
     end if;
   end process;
   

   -- HDL Embedded Text Block 5 eb5
   CLIENTEMAC0TXIFGDELAY <= X"3F";
   CLIENTEMAC0PAUSEREQ   <= '0';
   CLIENTEMAC0PAUSEVAL   <= X"0000";

   -- HDL Embedded Text Block 6 eb6
   -- eb6 6 -- seperate downstream resets
   rst <= rst_in when rising_edge(clk);

   -- HDL Embedded Text Block 7 eb7
   -- byte swap
   txll_data_net <= 
    txll_data_net0(7 downto 0) & 
    txll_data_net0(15 downto 8);


   -- ModuleWare code(v1.12) for instance 'Ubuff0' of 'buff'
   gmii_gtx_clk_o <= clk125;

   -- ModuleWare code(v1.12) for instance 'Ubuff2' of 'buff'
   marv_coma_o <= LO;

   -- ModuleWare code(v1.12) for instance 'Ubuffrxclk' of 'buff'
   rxfrst <= rx_fifo_rst_i;

   -- ModuleWare code(v1.12) for instance 'Ubuffrxclk1' of 'buff'
   rx_dst_rdy <= rx_lld_i;

   -- ModuleWare code(v1.12) for instance 'Ubufftxfclk' of 'buff'
   txfrst <= tx_fifo_rst_i;

   -- ModuleWare code(v1.12) for instance 'Uconstval0' of 'constval'
   stat_word_usb_o <= "0000000000000000000000000000000000000000000000000000000000000000";

   -- ModuleWare code(v1.12) for instance 'U_1' of 'inv'
   marv_reset_no <= not(rst);

   -- ModuleWare code(v1.12) for instance 'U_2' of 'inv'
   rxll_sof_cu <= not(rxll_sof_cu_n);

   -- ModuleWare code(v1.12) for instance 'U_3' of 'inv'
   rxll_eof_cu <= not(rxll_eof_cu_n);

   -- ModuleWare code(v1.12) for instance 'U_4' of 'inv'
   rxll_src_rdy_cu <= not(rxll_src_rdy_cu_n);

   -- ModuleWare code(v1.12) for instance 'U_5' of 'inv'
   rxll_dst_rdy_cu_n <= not(rxll_dst_rdy_cu);

   -- ModuleWare code(v1.12) for instance 'Unetmux' of 'mux'
   prcunetmuxcombo: process(txll_dst_rdy_sf, txll_dst_rdy_cu, mode_cu)
   begin
      case mode_cu is
      when '0'|'L' => txll_dst_rdy_net <= txll_dst_rdy_sf;
      when '1'|'H' => txll_dst_rdy_net <= txll_dst_rdy_cu;
      when others => txll_dst_rdy_net <= 'X';
      end case;
   end process prcunetmuxcombo;

   -- ModuleWare code(v1.12) for instance 'Unetmux1' of 'mux'
   prcunetmux1combo: process(tx_dst_rdy_net, tx_dst_rdy_usb, mode_usb)
   begin
      case mode_usb is
      when '0'|'L' => tx_lld_o <= tx_dst_rdy_net;
      when '1'|'H' => tx_lld_o <= tx_dst_rdy_usb;
      when others => tx_lld_o <= 'X';
      end case;
   end process prcunetmux1combo;

   -- Instance port mappings.
   Upqt : PauseQuantaTimer
      port map (
         clk           => clk,
         rst           => rst,
         quanta_tick_o => quanta_timer_tick
      );
   Usfeth2x16 : eth2x16_top
      port map (
         machost_data_i      => machost_data,
         machost_addr_i      => machost_addr,
         REFCLK2_i           => LO,
         REFCLK1_i           => refclk1,
         clk_25_50_i         => clk_25_50,
         hostclk_i           => clk,
         init_i              => init_i,
         host_reset_i        => rst,
         tx_fifo_clk_i       => clk,
         sf_ratesel_o        => sf_ratesel_o(1 DOWNTO 0),
         sf_txdisable_o      => sf_tx_dis_o(1 DOWNTO 0),
         sf_scl_o            => sf_scl_o(1 DOWNTO 0),
         sf_sda_i            => sf_sda_i(1 DOWNTO 0),
         spare_o0            => open,
         spare_i0            => sparein0,
         spare_o1            => open,
         spare_i1            => sparein1,
         quanta_timer_tick_i => quanta_timer_tick,
         rx_fifo_clk_i       => clk,
         resetdone_o         => init_done_o,
         stat_word           => sf_stat_word_o,
         mac_stat            => sf_mac_stat_o,
         sf_sda_o            => sf_sda_o(1 DOWNTO 0),
         sf_sda_to           => sf_sda_to(1 DOWNTO 0),
         sf_txfault_i        => sf_txfault_i(1 DOWNTO 0),
         sf_absent_i         => sf_absent_i(1 DOWNTO 0),
         sfp_los_i           => sfp_los_i(1 DOWNTO 0),
         syncacq_o           => sf_syncacq_o_internal,
         ext_pause_clr       => ext_pause_clr,
         ext_pause_req       => ext_pause_req,
         rx_fifo_rst_i       => rxfrst,
         rxp_i               => sf_rxp(1 DOWNTO 0),
         rxn_i               => sf_rxm(1 DOWNTO 0),
         txp_o               => sf_txp(1 DOWNTO 0),
         txn_o               => sf_txm(1 DOWNTO 0),
         tx_fifo_rst_i       => txfrst,
         machost_wr_i        => machost_wr,
         machost_data_o      => machost_data_out_sf,
         machost_rd_i        => machost_rd,
         tx_ack_o            => sf_tx_ack,
         rx_goodframe_o      => sf_rx_goodframe,
         rx_data_o           => rxll_data_sf,
         rx_dst_rdy_i        => rxll_dst_rdy_sf,
         rx_sof_o            => rxll_sof_sf,
         rx_src_rdy_o        => rxll_src_rdy_sf,
         rx_eof_o            => rxll_eof_sf,
         tx_data_i           => txll_data_net,
         tx_eof_i            => txll_eof_sf,
         tx_src_rdy_i        => txll_src_rdy_sf,
         tx_dst_rdy_o        => txll_dst_rdy_sf_int,
         tx_sof_i            => txll_sof_sf
      );
   -------------------------------------------------------------------------------
   -- The entity declaration for the local link design.
   -------------------------------------------------------------------------------
   -------------------------------------------------------------------------------
   -- The entity declaration for the local link design.
   -------------------------------------------------------------------------------
   Ugmii_locallink : eth_gmii16_locallink
      port map (
         RX_LL_CLOCK_0             => clk,
         RX_LL_RESET_0             => rxfrst,
         RX_LL_DATA_0              => rxll_data_cu,
         RX_LL_SOF_N_0             => rxll_sof_cu_n,
         RX_LL_EOF_N_0             => rxll_eof_cu_n,
         RX_LL_SRC_RDY_N_0         => rxll_src_rdy_cu_n,
         RX_LL_DST_RDY_N_0         => rxll_dst_rdy_cu_n,
         RX_LL_FIFO_STATUS_0       => cu_rxll_fifo_status,
         TX_LL_CLOCK_0             => clk,
         TX_LL_RESET_0             => txfrst,
         TX_LL_DATA_0              => txll_data_net,
         TX_LL_SOF_N_0             => txll_sof_cu_n,
         TX_LL_EOF_N_0             => txll_eof_cu_n,
         TX_LL_SRC_RDY_N_0         => txll_src_rdy_cu_n,
         TX_LL_DST_RDY_N_0         => txll_dst_rdy_cu_n,
         EMAC0CLIENTRXDVLD         => cu_rx_dvld,
         EMAC0CLIENTRXFRAMEDROP    => cu_rx_framedrop,
         EMAC0CLIENTRXSTATS        => EMAC0CLIENTRXSTATS,
         EMAC0CLIENTRXSTATSVLD     => EMAC0CLIENTRXSTATSVLD,
         EMAC0CLIENTRXSTATSBYTEVLD => EMAC0CLIENTRXSTATSBYTEVLD,
         CLIENTEMAC0TXIFGDELAY     => CLIENTEMAC0TXIFGDELAY,
         EMAC0CLIENTTXSTATS        => EMAC0CLIENTTXSTATS,
         EMAC0CLIENTTXSTATSVLD     => EMAC0CLIENTTXSTATSVLD,
         EMAC0CLIENTTXSTATSBYTEVLD => EMAC0CLIENTTXSTATSBYTEVLD,
         CLIENTEMAC0PAUSEREQ       => CLIENTEMAC0PAUSEREQ,
         CLIENTEMAC0PAUSEVAL       => CLIENTEMAC0PAUSEVAL,
         GTX_CLK_0                 => clk125,
         RX_CLIENT_CLK_0           => open,
         TX_CLIENT_CLK_0           => open,
         GMII_TXD_0                => gmii_txd_o,
         GMII_TX_EN_0              => gmii_tx_en_o,
         GMII_TX_ER_0              => gmii_tx_er_o,
         GMII_TX_CLK_0             => gmii_tx_clk_o,
         GMII_RXD_0                => gmii_rxd_i,
         GMII_RX_DV_0              => gmii_rx_dv_i,
         GMII_RX_ER_0              => gmii_rx_er_i,
         GMII_RX_CLK_0             => gmii_rx_clk_i,
         MII_TX_CLK_0              => mii_tx_clk_i,
         GMII_COL_0                => gmii_col_i,
         GMII_CRS_0                => gmii_crs_i,
         MDC_0                     => marv_mdc_o,
         MDIO_0_I                  => marv_md_i,
         MDIO_0_O                  => marv_md_o,
         MDIO_0_T                  => marv_md_to,
         HOSTOPCODE                => sm_host_opcode,
         HOSTREQ                   => sm_host_req,
         HOSTMIIMSEL               => sm_host_miimsel,
         HOSTADDR                  => sm_host_addr,
         HOSTWRDATA                => sm_host_wrdata,
         HOSTMIIMRDY               => open,
         HOSTRDDATA                => open,
         HOSTEMAC1SEL              => LO,
         HOSTCLK                   => clk,
         REFCLK                    => clk_idelay,
         tx_fifo_stat              => cu_txll_fifo_status,
         tx_overflow               => cu_tx_overflow,
         rx_overflow               => cu_rx_overflow,
         tx_ack                    => cu_tx_ack,
         tx_collision              => cu_tx_collision,
         tx_retransmit             => cu_tx_retransmit,
         rx_goodframe              => cu_rx_goodframe,
         RESET                     => rst
      );
   --use ieee.std_logic_unsigned.all;
   Unetrxpktfmt : net_rx_pktfmt16
      port map (
         net_data_i     => net_data,
         net_sof_i      => net_sof,
         net_eof_i      => net_eof,
         net_dst_rdy_o  => net_dst_rdy,
         net_src_rdy_i  => net_src_rdy,
         hsio_data_o    => net_datab,
         hsio_sof_o     => net_sofb,
         hsio_eof_o     => net_eofb,
         hsio_dst_rdy_i => net_dst_rdyb,
         hsio_src_rdy_o => net_src_rdyb,
         rx_src_mac_o   => rx_src_mac,
         clk            => clk,
         rst            => rxfrst
      );
   Utx_pkt_fmt : net_tx_pktfmt16
      port map (
         data_i       => tx_data,
         sof_i        => tx_sof,
         eof_i        => tx_eof,
         dst_rdy_o    => tx_dst_rdy_net,
         src_rdy_i    => tx_src_rdy,
         mac_dest_i   => rx_src_mac,
         mac_source_i => macaddress_i,
         ll_data_o    => txll_data_net0,
         ll_sof_o     => txll_sof_net,
         ll_eof_o     => txll_eof_net,
         ll_dst_rdy_i => txll_dst_rdy_net,
         ll_src_rdy_o => txll_src_rdy_net,
         clk          => clk,
         rst          => txfrst
      );
   Ullmuxrxnet : ll_mux_passive
      generic map (
         DATA_WIDTH => 16
      )
      port map (
         sof_o      => net_sof,
         eof_o      => net_eof,
         src_rdy_o  => net_src_rdy,
         dst_rdy_i  => net_dst_rdy,
         data_o     => net_data,
         sof0_i     => rxll_sof_sf,
         eof0_i     => rxll_eof_sf,
         src_rdy0_i => rxll_src_rdy_sf,
         dst_rdy0_o => rxll_dst_rdy_sf,
         data0_i    => rxll_data_sf,
         sof1_i     => rxll_sof_cu,
         eof1_i     => rxll_eof_cu,
         src_rdy1_i => rxll_src_rdy_cu,
         dst_rdy1_o => rxll_dst_rdy_cu,
         data1_i    => rxll_data_cu,
         sel        => mode_cu
      );
   Ullmuxrxusb : ll_mux_passive
      generic map (
         DATA_WIDTH => 16
      )
      port map (
         sof_o      => rx_sof,
         eof_o      => rx_eof,
         src_rdy_o  => rx_src_rdy,
         dst_rdy_i  => rx_dst_rdy,
         data_o     => rx_data,
         sof0_i     => net_sofb,
         eof0_i     => net_eofb,
         src_rdy0_i => net_src_rdyb,
         dst_rdy0_o => net_dst_rdyb,
         data0_i    => net_datab,
         sof1_i     => usb_rd_sof,
         eof1_i     => usb_rd_eof,
         src_rdy1_i => usb_rd_src_ready,
         dst_rdy1_o => usb_rd_dst_ready,
         data1_i    => usb_rd_data,
         sel        => mode_usb
      );
   Ullsbreak : lls_break
      port map (
         data_o    => tx_data,
         eof_o     => tx_eof,
         sof_o     => tx_sof,
         src_rdy_o => tx_src_rdy,
         lls_i     => tx_lls_i
      );
   Ullsmake : lls_make
      port map (
         lls       => rx_lls_o,
         src_rdy_i => rx_src_rdy,
         sof_i     => rx_sof,
         eof_i     => rx_eof,
         data_i    => rx_data
      );
   Ullenbuf_sf : ll_enbuff
      port map (
         srci => txll_src_rdy_net,
         sofi => txll_sof_net,
         eofi => txll_eof_net,
         dsto => txll_dst_rdy_sf,
         srco => txll_src_rdy_sf,
         sofo => txll_sof_sf,
         eofo => txll_eof_sf,
         dsti => txll_dst_rdy_sf_int,
         en   => mode_sf
      );
   Ullenbuffn_cu : ll_enbuffn
      port map (
         srci  => txll_src_rdy_net,
         sofi  => txll_sof_net,
         eofi  => txll_eof_net,
         dsto  => txll_dst_rdy_cu,
         srcno => txll_src_rdy_cu_n,
         sofno => txll_sof_cu_n,
         eofno => txll_eof_cu_n,
         dstni => txll_dst_rdy_cu_n,
         en    => mode_cu
      );
   Umpower : m_power
      port map (
         hi => open,
         lo => LO
      );

   g0: FOR i IN 0 TO 1 GENERATE

      -- ModuleWare code(v1.12) for instance 'Ubuffrxclk2' of 'buff'
      machost_rd(i) <= LO;

      -- ModuleWare code(v1.12) for instance 'Ubuffrxclk3' of 'buff'
      machost_wr(i) <= LO;

      -- ModuleWare code(v1.12) for instance 'Ubuffrxclk4' of 'buff'
      ext_pause_req(i) <= LO;

      -- ModuleWare code(v1.12) for instance 'Ubuffrxclk5' of 'buff'
      ext_pause_clr(i) <= LO;
   end generate g0;

   -- Implicit buffered output assignments
   sf_syncacq_o <= sf_syncacq_o_internal;





   -- PGP Front End                                                                                                                                                                                                                                                             
   U_PgpFrontEnd: PgpFrontEnd port map (
      pgpRefClk1    => pgpRefClk,    
      pgpRefClk2    => '0',
      mgtRxRecClk   => open,    -- left open    
      pgpClk        => pgpClk,
      pgpReset      => '0',        
      pgpDispA      => open,
      pgpDispB      => open,       
      resetOut      => open,
      locClk        => '0',     
      locReset      => '0',
      cmdEn         => open,       
      cmdOpCode     => open,
      cmdCtxOut     => open,       
      regReq        => open,
      regInp        => open,
      regOp         => open,       
      regAck        => '0',
      regFail       => '0',        
      regAddr       => open,
      regDataOut    => open,       
      regDataIn     => (others=>'0'),
      frameTxEnable => '0',  
      frameTxSOF    => '0',
      frameTxEOF    => '0',      
      frameTxEOFE   => '0',
      frameTxData   => (others=>'0'),       
      frameTxAFull  => open,
      frameRxValid  => open,
      frameRxReady  => '0',   
      frameRxSOF    => open,
      frameRxEOF    => open,     
      frameRxEOFE   => open,
      frameRxData   => open,    
      valid => open,
      eof => open, 
      sof => open,
      mgtRxN        => mgtRxN,
      mgtRxP        => mgtRxP,
      mgtTxN        => mgtTxN,
      mgtTxP        => mgtTxP,
      mgtCombusIn   => (others=>'0'), -- left 0s
      mgtCombusOut  => open -- left open
   );





end struct;
