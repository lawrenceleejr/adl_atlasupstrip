-- VHDL Entity hsio.dio_ibeos_drv.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
library utils;
use utils.pkg_types.all;

library hsio;
use hsio.pkg_core_globals.all;

entity dio_ibeos_drv is
   generic( 
      LINK_ID_MIN : integer := 0
   );
   port( 
      clk            : in     std_logic;
      coml0_i        : in     std_logic;
      --idelay_ce_o   : out    std_logic_vector (71 downto 0);
      --idelay_inc_o  : out    std_logic;
      --idelay_zero_o : out    std_logic_vector (71 downto 0);
      idelay_ctl_i   : in     t_idelay_ctl;
      l1r3_i         : in     std_logic;
      noise_i        : in     std_logic;
      rawsigs_i      : in     std_logic_vector (15 downto 0);
      -- registers
      reg            : in     t_reg_bus;
      rst            : in     std_logic;
      rst_drv_i      : in     std_logic;
      strobe40_i     : in     std_logic;
      bco_no         : out    std_logic;                       -- HARDRESETB (J32.6/J33.14) HRSTB (J26.B3)
      bco_po         : out    std_logic;                       -- HARDRESET (J32.5/J33.13) HRST (J26.A3)
      coml0_no       : out    std_logic;                       -- COMMANB (J32.6/J33.2) COM_INB (J26.D3)
      coml0_po       : out    std_logic;                       -- COMMAND (J32.5/J33.1) COM_IN (J26.C3)
      --dbg_sig_o  : out    std_logic;
      dbg_coml0_o    : out    std_logic;
      --dbg_sig_o  : out    std_logic;
      dbg_l1r3_o     : out    std_logic;
      --dbg_sig_o  : out    std_logic;
      dbg_spare_o    : out    std_logic;
      l1r3_no        : out    std_logic;                       -- LONEB (J32.10/J33.6) LONE_INB (J26.F3)
      l1r3_po        : out    std_logic;                       -- LONE (J32.9/J33.5) LONE_IN (J26.E3)
      rx_link_idly_o : out    std_logic_vector (23 downto 0);
      rx_strm_o      : out    std_logic_vector (47 downto 0);
      spare_no       : out    std_logic;                       -- LONEB (J32.10/J33.6) LONE_INB (J26.F3)
      spare_po       : out    std_logic;                       -- LONE (J32.9/J33.5) LONE_IN (J26.E3)
      dat_nio        : inout  std_logic_vector (23 downto 0);  -- ID0_1 (J33.11) ID0_1_BUF (J26.A4)
      dat_pio        : inout  std_logic_vector (23 downto 0)   -- ID0_1 (J33.11) ID0_1_BUF (J26.A4)
   );

-- Declarations

end dio_ibeos_drv ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- hsio.dio_ibeos_drv.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
library utils;
use utils.pkg_types.all;
library hsio;
use hsio.pkg_core_globals.all;

library unisim;
use unisim.VCOMPONENTS.all;


architecture struct of dio_ibeos_drv is

   -- Architecture declarations

   -- Internal signal declarations
   signal HI           : std_ulogic;
   signal LO           : std_logic;
   signal bco          : std_logic;
   signal bco_ddr      : std_logic;
   signal bco_ddr_n    : std_logic;
   signal bco_en       : std_logic;
   signal ddri         : std_logic_vector(7 downto 4);
   signal ddri_atl_tmu : std_logic;
   signal ddri_drv_tmu : std_logic;
   signal ddro         : std_logic_vector(7 downto 0);
   signal rawout_en    : std_logic;
   signal txsigs       : std_logic_vector(15 downto 0);


attribute KEEP : string;
--attribute KEEP of reg_control_i : signal is "true";
--attribute KEEP of reg_com_enable_i : signal is "true";
--attribute KEEP of dbg_sig_o : signal is "true";
--attribute KEEP of sink_sig_o : signal is "true";

   -- Component Declarations
   component idelay_block
   generic (
      LINK_ID : integer := 0
   );
   port (
      clk                    : in     std_logic ;
      ddrdata_i              : in     std_logic ;
      --idelay_ce_o   : out    std_logic_vector (71 downto 0);
      --idelay_inc_o  : out    std_logic;
      --idelay_zero_o : out    std_logic_vector (71 downto 0);
      idelay_ctl_i           : in     t_idelay_ctl ;
      loopdata0_i            : in     std_logic ;
      loopdata1_i            : in     std_logic ;
      rst                    : in     std_logic ;
      dbg_ddrdata_idelayed_o : out    std_logic ;
      stream0_o              : out    std_logic ;
      stream1_o              : out    std_logic 
   );
   end component;
   component IBUFDS
   generic (
      CAPACITANCE      : string  := "DONT_CARE";
      DIFF_TERM        : boolean := FALSE;
      DQS_BIAS         : string  := "FALSE";
      IBUF_DELAY_VALUE : string  := "0";
      IBUF_LOW_PWR     : boolean := TRUE;
      IFD_DELAY_VALUE  : string  := "AUTO";
      IOSTANDARD       : string  := "DEFAULT"
   );
   port (
      I  : in     std_ulogic;
      IB : in     std_ulogic;
      O  : out    std_ulogic
   );
   end component;
   component OBUFDS
   generic (
      CAPACITANCE : string := "DONT_CARE";
      IOSTANDARD  : string := "DEFAULT";
      SLEW        : string := "SLOW"
   );
   port (
      I  : in     std_ulogic;
      O  : out    std_ulogic;
      OB : out    std_ulogic
   );
   end component;
   component ODDR
   generic (
      DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
      INIT         : bit    := '0';
      SRTYPE       : string := "SYNC"
   );
   port (
      C  : in     std_ulogic;
      CE : in     std_ulogic;
      D1 : in     std_ulogic;
      D2 : in     std_ulogic;
      R  : in     std_ulogic;
      S  : in     std_ulogic;
      Q  : out    std_ulogic
   );
   end component;
   component m_power
   port (
      hi : out    std_logic ;
      lo : out    std_logic 
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   prc_modes : process (rawout_en, reg, coml0_i, l1r3_i, txsigs)
   begin
     if (rawout_en = '1') then
       txsigs <= rawsigs_i;
     else
        txsigs(OD_COML0) <= coml0_i;
        txsigs(OD_L1R3) <=  l1r3_i;
        txsigs(OD_SPARE) <= reg(R_CONTROL1)(CTL_DRV_SP0); --SCAN_EN
        txsigs(3) <=  '0'; -- n/a
        txsigs(4) <=  reg(R_CONTROL1)(CTL_DRV_DXOUT0); -- DXL
        txsigs(5) <=  reg(R_CONTROL1)(CTL_DRV_DXOUT1); -- DXR
        txsigs(6) <=  reg(R_CONTROL1)(CTL_DRV_DXOUT2); -- SDO_BC
        txsigs(7) <=  reg(R_CONTROL1)(CTL_DRV_DXOUT3); -- SDO_CLK
        txsigs(15 downto 8) <= txsigs(7 downto 0);
     end if;
   end process;

   -- HDL Embedded Text Block 2 eb2
   -- eb1 1
   bco_en <= reg(R_COM_ENA)(B_BCO_EN);
   -- for compat reasons bco is inverted
   bco_ddr <= strobe40_i when (reg(R_COM_ENA)(B_BCO_INV) = '1') else
               not strobe40_i;
   

   -- HDL Embedded Text Block 3 eb3
   rx_strm_o(0) <= '0';
   rx_strm_o(1) <= '0';
   
   
   --rx_strm_o(4) <= '0';
   --rx_strm_o(5) <= '0';
   rx_strm_o(6) <= '0';
   rx_strm_o(7) <= '0';
   
   
   rx_strm_o(10) <= '0';
   rx_strm_o(11) <= '0';
   rx_strm_o(12) <= '0';
   rx_strm_o(13) <= '0';
   
   
   rx_strm_o(16) <= '0';
   rx_strm_o(17) <= '0';
   rx_strm_o(18) <= '0';
   rx_strm_o(19) <= '0';
   
   
   rx_strm_o(22) <= '0';
   rx_strm_o(23) <= '0';

   -- HDL Embedded Text Block 4 eb4
   rx_link_idly_o(0) <= '0';
   
   --rx_link_idly_o(2) <= '0';
   rx_link_idly_o(3) <= '0';
   
   rx_link_idly_o(5) <= '0';
   rx_link_idly_o(6) <= '0';
   
   rx_link_idly_o(8) <= '0';
   rx_link_idly_o(9) <= '0';
   
   rx_link_idly_o(11) <= '0';

   -- HDL Embedded Text Block 5 eb5
   -- eb5 5 --------------------------
   dat_pio(19) <= '0';
   dat_nio(19) <= '0';  -- 49 D19M
   --t_pio(18)          -- 48 D18P
   dat_nio(18) <= '0';  -- 47 D18M
   dat_pio(17) <= '0';  -- 46 D17P
   dat_nio(17) <= '0';  -- 45 D17M
   dat_pio(16) <= '0';  -- 44 D16P
   dat_nio(16) <= '0';  -- 43 D16M
   
   dat_pio(15) <= reg(R_DRV_CONF)( 8); -- rst_ext        -- 42 D15P, VIO20P
   dat_nio(15) <= reg(R_DRV_CONF)( 7); -- tmu_coml0_swap -- 41 D15M, VIO20M
   dat_pio(14) <= reg(R_DRV_CONF)( 6); --                -- 40 D14P, VIO19P
   dat_nio(14) <= reg(R_DRV_CONF)( 5); --                -- 39 D14M, VIO19M
   dat_pio(13) <= reg(R_DRV_CONF)( 4); --                -- 38 D13P, VIO18P
   dat_nio(13) <= reg(R_DRV_CONF)( 3); --                -- 37 D13M, VIO18M
   dat_pio(12) <= reg(R_DRV_CONF)( 2); --                -- 36 D12P, VIO17P
   dat_nio(12) <= reg(R_DRV_CONF)( 1); --                -- 35 D12M, VIO17M
   dat_pio(11) <= reg(R_DRV_CONF)( 0); --                -- 34 D11P, VIO16P

   -- HDL Embedded Text Block 6 eb6
   rawout_en <= reg(R_CONTROL1)(CTL_RAWOUT_EN);


   -- ModuleWare code(v1.12) for instance 'U_6' of 'buff'
   dbg_coml0_o <= txsigs(OD_COML0);

   -- ModuleWare code(v1.12) for instance 'U_7' of 'buff'
   dbg_l1r3_o <= txsigs(OD_L1R3);

   -- ModuleWare code(v1.12) for instance 'U_8' of 'buff'
   dbg_spare_o <= txsigs(OD_SPARE);

   -- ModuleWare code(v1.12) for instance 'U_0' of 'inv'
   bco_ddr_n <= not(bco_ddr);

   -- Instance port mappings.
   Uidelayblk : idelay_block
      generic map (
         LINK_ID => 1+LINK_ID_MIN
      )
      port map (
         clk                    => clk,
         ddrdata_i              => ddri(ID_DX0),
         idelay_ctl_i           => idelay_ctl_i,
         loopdata0_i            => LO,
         loopdata1_i            => LO,
         rst                    => rst,
         dbg_ddrdata_idelayed_o => rx_link_idly_o(1),
         stream0_o              => rx_strm_o(2),
         stream1_o              => rx_strm_o(3)
      );
   Uidelayblk1 : idelay_block
      generic map (
         LINK_ID => 4+LINK_ID_MIN
      )
      port map (
         clk                    => clk,
         ddrdata_i              => ddri(ID_DX1),
         idelay_ctl_i           => idelay_ctl_i,
         loopdata0_i            => LO,
         loopdata1_i            => LO,
         rst                    => rst,
         dbg_ddrdata_idelayed_o => rx_link_idly_o(4),
         stream0_o              => rx_strm_o(8),
         stream1_o              => rx_strm_o(9)
      );
   Uidelayblk2 : idelay_block
      generic map (
         LINK_ID => 7+LINK_ID_MIN
      )
      port map (
         clk                    => clk,
         ddrdata_i              => ddri(ID_DX2),
         idelay_ctl_i           => idelay_ctl_i,
         loopdata0_i            => LO,
         loopdata1_i            => LO,
         rst                    => rst,
         dbg_ddrdata_idelayed_o => rx_link_idly_o(7),
         stream0_o              => rx_strm_o(14),
         stream1_o              => rx_strm_o(15)
      );
   Uidelayblk3 : idelay_block
      generic map (
         LINK_ID => 10+LINK_ID_MIN
      )
      port map (
         clk                    => clk,
         ddrdata_i              => ddri(ID_DX3),
         idelay_ctl_i           => idelay_ctl_i,
         loopdata0_i            => LO,
         loopdata1_i            => LO,
         rst                    => rst,
         dbg_ddrdata_idelayed_o => rx_link_idly_o(10),
         stream0_o              => rx_strm_o(20),
         stream1_o              => rx_strm_o(21)
      );
   Uidelayblk4 : idelay_block
      generic map (
         LINK_ID => 20+LINK_ID_MIN
      )
      port map (
         clk                    => clk,
         ddrdata_i              => ddri_drv_tmu,
         idelay_ctl_i           => idelay_ctl_i,
         loopdata0_i            => LO,
         loopdata1_i            => LO,
         rst                    => rst,
         dbg_ddrdata_idelayed_o => rx_link_idly_o(20),
         stream0_o              => rx_strm_o(40),
         stream1_o              => rx_strm_o(41)
      );
   Uidelayblk5 : idelay_block
      generic map (
         LINK_ID => 2+LINK_ID_MIN
      )
      port map (
         clk                    => clk,
         ddrdata_i              => ddri_atl_tmu,
         idelay_ctl_i           => idelay_ctl_i,
         loopdata0_i            => LO,
         loopdata1_i            => LO,
         rst                    => rst,
         dbg_ddrdata_idelayed_o => rx_link_idly_o(2),
         stream0_o              => rx_strm_o(4),
         stream1_o              => rx_strm_o(5)
      );
   Uib : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => ddri(ID_DX0),
         I  => dat_pio(1),
         IB => dat_nio(1)
      );
   Uib1 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => ddri(ID_DX1),
         I  => dat_pio(4),
         IB => dat_nio(4)
      );
   Uib2 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => ddri(ID_DX2),
         I  => dat_pio(7),
         IB => dat_nio(7)
      );
   Uib3 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => ddri(ID_DX3),
         I  => dat_pio(10),
         IB => dat_nio(10)
      );
   Uib4 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => ddri_drv_tmu,
         I  => dat_pio(20),
         IB => dat_nio(20)
      );
   Uib5 : IBUFDS
      generic map (
         CAPACITANCE      => "DONT_CARE",
         DIFF_TERM        => TRUE,
         IBUF_DELAY_VALUE => "0",
         IFD_DELAY_VALUE  => "AUTO",
         IOSTANDARD       => "LVDS_25"
      )
      port map (
         O  => ddri_atl_tmu,
         I  => dat_pio(2),
         IB => dat_nio(2)
      );
   Uob0 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => coml0_po,
         OB => coml0_no,
         I  => ddro(OD_COML0)
      );
   Uob1 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => l1r3_po,
         OB => l1r3_no,
         I  => ddro(OD_L1R3)
      );
   Uob2 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => spare_po,
         OB => spare_no,
         I  => ddro(OD_SPARE)
      );
   Uob4 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => dat_pio(0),
         OB => dat_nio(0),
         I  => ddro(OD_DX0)
      );
   Uob5 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => dat_pio(3),
         OB => dat_nio(3),
         I  => ddro(OD_DX1)
      );
   Uob6 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => dat_pio(6),
         OB => dat_nio(6),
         I  => ddro(OD_DX2)
      );
   Uob7 : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => dat_pio(9),
         OB => dat_nio(9),
         I  => ddro(OD_DX3)
      );
   Uobbco : OBUFDS
      generic map (
         CAPACITANCE => "DONT_CARE",
         IOSTANDARD  => "LVDS_25"
      )
      port map (
         O  => bco_po,
         OB => bco_no,
         I  => bco
      );
   Uoddrbco : ODDR
      generic map (
         DDR_CLK_EDGE => "SAME_EDGE",
         INIT         => '0',
         SRTYPE       => "SYNC"
      )
      port map (
         Q  => bco,
         C  => clk,
         CE => HI,
         D1 => bco_ddr,
         D2 => bco_ddr_n,
         R  => rst,
         S  => LO
      );
   Umpower : m_power
      port map (
         hi => HI,
         lo => LO
      );

   g0: IF 1=2 GENERATE
      -- HDL Embedded Text Block 7 eb7
      -- eb5 5 -----------------------------  pcb name only
      dat_pio(11) <= reg(R_DRV_CONF)( 0);  -- RSTB         34 D11P
      dat_nio(12) <= reg(R_DRV_CONF)( 1);  -- SHUNT_CTL_SW 35 D12M
      dat_pio(12) <= reg(R_DRV_CONF)( 2);  -- REG_ENA      36 D12P
      dat_nio(13) <= reg(R_DRV_CONF)( 3);  -- REG_END      37 D13M
      dat_pio(13) <= reg(R_DRV_CONF)( 4);  -- TERM         38 D13P
      dat_nio(14) <= reg(R_DRV_CONF)( 5);  -- ADDR0        39 D14M
      dat_pio(14) <= reg(R_DRV_CONF)( 6);  -- ADDR1        40 D14P
      dat_nio(15) <= reg(R_DRV_CONF)( 7);  -- ADDR2        41 D15M
      dat_pio(15) <= reg(R_DRV_CONF)( 8);  -- ADDR3        42 D15P
      dat_nio(16) <= reg(R_DRV_CONF)( 9);  -- ADDR4        43 D16M
      dat_pio(16) <= reg(R_DRV_CONF)(10);  -- SCAN_EN      44 D16P
      dat_nio(17) <= reg(R_DRV_CONF)(11);  -- SDI_BC       45 D17M
      dat_pio(17) <= reg(R_DRV_CONF)(12);  -- SDO_BC       46 D17P
      dat_nio(18) <= reg(R_DRV_CONF)(13);  -- SDI_CLK      47 D18M
      --t_pio(18)                          --              48 D18P
      dat_nio(19) <= reg(R_DRV_CONF)(14);  -- SDO_CLK      49 D19M
      dat_pio(19) <= reg(R_DRV_CONF)(15)
                     or  rst_drv_i;        -- SW1          50 D19P
      
      -- following 2 used as TMU data return
      --t_nio(20) <= reg(R_DRV_CONF)(10);  -- ABCUP      P2 1 D20M
      --t_pio(20) <= reg(R_DRV_CONF)(11);  -- SPARE1     P2 2 D20P
      
      -- SPARE
      --dat_nio(21) <= ;  -- SPARE2     P2 3 D21M
      --dat_pio(21) <= ;  -- SPARE3     P2 4 D21P
      --dat_nio(22) <= ;  -- SPARE4     P2 5 D22M
      --dat_pio(22) <= ;  -- SPARE5     P2 6 D22P
      
      
      

   end generate g0;

   gdo3: FOR ni2 IN 21 TO 23 GENERATE

      -- ModuleWare code(v1.12) for instance 'U_9' of 'buff'
      rx_strm_o(ni2*2) <= LO;

      -- ModuleWare code(v1.12) for instance 'U_12' of 'buff'
      rx_strm_o(ni2*2+1) <= LO;

      -- ModuleWare code(v1.12) for instance 'U_13' of 'buff'
      rx_link_idly_o(ni2) <= LO;
   end generate gdo3;

   gdo1: FOR ni IN 12 TO 19 GENERATE

      -- ModuleWare code(v1.12) for instance 'U_5' of 'buff'
      rx_strm_o(ni*2) <= LO;

      -- ModuleWare code(v1.12) for instance 'U_10' of 'buff'
      rx_link_idly_o(ni) <= LO;

      -- ModuleWare code(v1.12) for instance 'U_11' of 'buff'
      rx_strm_o(ni*2+1) <= LO;
   end generate gdo1;

   gdo2: FOR c IN 0 TO 7 GENERATE
      Uoddr1 : ODDR
         generic map (
            DDR_CLK_EDGE => "SAME_EDGE",
            INIT         => '0',
            SRTYPE       => "SYNC"
         )
         port map (
            Q  => ddro(c),
            C  => clk,
            CE => HI,
            D1 => txsigs(c),
            D2 => txsigs(c+8),
            R  => rst,
            S  => LO
         );
   end generate gdo2;

end struct;
