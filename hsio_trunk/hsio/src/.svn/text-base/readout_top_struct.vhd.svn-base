-- VHDL Entity hsio.readout_top.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library utils;
use utils.pkg_types.all;

library hsio;
use hsio.pkg_core_globals.all;

entity readout_top is
   generic( 
      MOD_PRES : std_logic_vector(35 downto 0) := x"000000000";
      MOD_RAW  : std_logic_vector(35 downto 0) := x"000000000";
      MOD_HST  : std_logic_vector(35 downto 0) := x"000000000";
      MOD_TYPE : std_logic_vector(35 downto 0) := x"000000000";
      MOD_IDBG : std_logic_vector(35 downto 0) := x"000000000"
   );
   port( 
      bcid_i          : in     std_logic_vector (11 downto 0);
      clk             : in     std_logic;
      l1id_i          : in     std_logic_vector (23 downto 0);
      ocraw_start_i   : in     std_logic;
      -- registers
      reg             : in     t_reg_bus;
      rst             : in     std_logic;
      s_lld_i         : in     std_logic_vector (135 downto 0);
      strm_cmd_i      : in     slv16_array (143 downto 0);
      strm_i          : in     std_logic_vector (135 downto 0);
      strm_reg_i      : in     slv16_array (143 downto 0);
      -- streams interface
      strm_req_stat_i : in     std_logic_vector (143 downto 0);
      strobe40_i      : in     std_logic;
      tick            : in     std_logic_vector (MAX_TICTOG downto 0);
      trig80_i        : in     std_logic;
      --ht_delta_max_i   : in  slv6;
      busy_o          : out    std_logic;
      gen13data80_o   : out    slv2_array (1 downto 0);
      gen13data_o     : out    slv2_array (1 downto 0);
      gendata0_o      : out    std_logic;
      gendata1_o      : out    std_logic;
      s_lls_o         : out    t_llsrc_array (135 downto 0);
      simdata0_o      : out    std_logic;
      simdata1_o      : out    std_logic
   );

-- Declarations

end readout_top ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- hsio.readout_top.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library utils;
use utils.pkg_types.all;

library hsio;
use hsio.pkg_core_globals.all;


architecture struct of readout_top is

   -- Architecture declarations

   -- Internal signal declarations
   signal HI                : std_logic;
   signal HIHI              : std_logic_vector(1 downto 0);
   signal HILO              : std_logic_vector(1 downto 0);
   signal LO                : std_logic;
   signal LOHI              : std_logic_vector(1 downto 0);
   signal LOLO              : std_logic_vector(1 downto 0);
   signal LOLO2             : slv2_array(1 downto 0);
   signal RAW_MULTI_EN      : std_logic;
   signal SLV_MOD_HST       : std_logic_vector(35 downto 0);
   signal SLV_MOD_RAW       : std_logic_vector(35 downto 0);
   signal STREAM_IDS        : integer_array(135 downto 0);
   --ht_delta_max_i   : in  slv6;
   signal busy_bus          : std_logic_vector(135 downto 0);
   signal capture_start     : std_logic;
   signal capture_start80   : std_logic;
   signal capture_start80_q : std_logic;
   signal gen13data         : slv2_array(1 downto 0);
   signal gen13data80       : slv2_array(1 downto 0);
   signal gendata0          : std_logic;
   signal gendata1          : std_logic;
   signal mode40_strobe     : std_logic;
   signal simdata0          : std_logic;
   signal simdata1          : std_logic;
   signal strm16            : std_logic_vector(135 downto 0);
   signal strm32            : std_logic_vector(135 downto 0);


   -- Component Declarations
   component data_gen_top
   port (
      bcid_i          : in     std_logic_vector (11 downto 0);
      clk             : in     std_logic ;
      l1id_i          : in     std_logic_vector (23 downto 0);
      mode40_strobe_i : in     std_logic ;
      -- registers
      reg             : in     t_reg_bus ;
      rst             : in     std_logic ;
      trig80_i        : in     std_logic ;
      gen13data80_o   : out    slv2_array (1 downto 0);
      gen13data_o     : out    slv2_array (1 downto 0);
      gendata0_o      : out    std_logic ;
      gendata1_o      : out    std_logic ;
      simdata0_o      : out    std_logic ;
      simdata1_o      : out    std_logic 
   );
   end component;
   component ro_unit
   port (
      HST_EN          : in     std_logic ;
      RAW_EN          : in     std_logic ;
      RAW_MULTI_EN    : in     std_logic ;
      STREAM_ID       : in     integer ;
      bcid_i          : in     std_logic_vector (11 downto 0) bus;
      capture_start_i : in     std_logic ;
      clk             : in     std_logic ;
      gendata0_i      : in     std_logic ;
      gendata1_i      : in     std_logic ;
      l1id_i          : in     std_logic_vector (23 downto 0) bus;
      lld_i           : in     std_logic ;
      mode40_strobe_i : in     std_logic ;
      -- registers
      reg             : in     t_reg_bus ;
      req_stat_i      : in     std_logic ;
      rst             : in     std_logic ;
      serdata16_i     : in     std_logic ;
      serdata32_i     : in     std_logic ;
      serdata_i       : in     std_logic ;
      simdata0_i      : in     std_logic ;
      simdata1_i      : in     std_logic ;
      strm_cmd_i      : in     std_logic_vector (15 downto 0);
      strm_reg_i      : in     std_logic_vector (15 downto 0);
      trig80_i        : in     std_logic ;
      --ht_delta_max_i   : in  slv6;
      busy_o          : out    std_logic ;
      --out
      lls_o           : out    t_llsrc 
   );
   end component;
   component ro13_link
   generic (
      STREAM_ID : integer   := 0;
      HST_EN    : std_logic := '0';
      RAW_EN    : std_logic := '0'
   );
   port (
      bcid_i          : in     std_logic_vector (11 downto 0) bus;
      capture_start_i : in     std_logic ;
      clk             : in     std_logic ;
      gen13data80_i   : in     slv2_array (1 downto 0);
      gen13data_i     : in     slv2_array (1 downto 0);
      l1id_i          : in     std_logic_vector (23 downto 0) bus;
      lld_i           : in     std_logic ;
      -- registers
      reg             : in     t_reg_bus ;
      -- stats
      req_stat_i      : in     std_logic ;
      rst             : in     std_logic ;
      s40             : in     std_logic ;
      ser13data_i     : in     slv2 ;
      sim13data_i     : in     slv2_array (1 downto 0);
      strm_cmd_i      : in     std_logic_vector (15 downto 0);
      strm_reg_i      : in     std_logic_vector (15 downto 0);
      tick            : in     std_logic_vector (MAX_TICTOG downto 0);
      trig80_i        : in     std_logic ;
      --ht_delta_max_i   : in  slv6;
      busy_o          : out    std_logic ;
      --out
      lls_o           : out    t_llsrc 
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1
   mode40_strobe <= '1' when (reg(R_CONTROL)(CTL_DCLK40_MODE) = '0') else 
                    not(strobe40_i); -- *** this is because we usually "if (strobe40_i='0') ..."
   
   capture_start80 <= trig80_i when (reg(R_CONTROL)(CTL_CAP_START_SRC) = '1') else
                      ocraw_start_i;
   capture_start80_q <= capture_start80 when rising_edge(clk);
   capture_start <= capture_start80 or capture_start80_q;

   -- HDL Embedded Text Block 2 eb2
   -- eb2 2
   --busy_bus(127 downto 112) <= x"0000";
   --busy_bus(63 downto 48) <= x"0000";
   --                              1234567890123456789012345678901234
   busy_o <= '0' when busy_bus = x"0000000000000000000000000000000000" else '1';

   -- HDL Embedded Text Block 7 eb7
   -- eb1 1
   HI   <= '1';
   LO   <= '0';
   HIHI <= "11";
   LOLO <= "00";
   HILO <= "10";
   LOHI <= "01";
   LOLO2(0) <= "00";
   LOLO2(1) <= "00";

   -- HDL Embedded Text Block 8 eb8
   -- eb8 8
   gen13data_o <= gen13data;
   gen13data80_o <= gen13data80;               


   -- ModuleWare code(v1.12) for instance 'U_12' of 'buff'
   gendata0_o <= gendata0;

   -- ModuleWare code(v1.12) for instance 'U_16' of 'buff'
   gendata1_o <= gendata1;

   -- ModuleWare code(v1.12) for instance 'U_17' of 'buff'
   simdata0_o <= simdata0;

   -- ModuleWare code(v1.12) for instance 'U_18' of 'buff'
   simdata1_o <= simdata1;

   -- Instance port mappings.
   Udatagentop : data_gen_top
      port map (
         bcid_i          => bcid_i,
         clk             => clk,
         l1id_i          => l1id_i,
         mode40_strobe_i => mode40_strobe,
         reg             => reg,
         rst             => rst,
         trig80_i        => trig80_i,
         gen13data80_o   => gen13data80,
         gen13data_o     => gen13data,
         gendata0_o      => gendata0,
         gendata1_o      => gendata1,
         simdata0_o      => simdata0,
         simdata1_o      => simdata1
      );

   g_rawmulti1: IF (C_RAW_MULTI_EN = '1')  GENERATE
      -- HDL Embedded Text Block 9 eb9
      -- eb9 9
      strm16( 15 downto  0) <= strm_i(31 downto 16);
      strm16( 63 downto 16) <= (others => '0'); 
      strm16( 79 downto 64) <= strm_i(95 downto 80);
      strm16(135 downto 80) <= (others => '0');
       
      strm32( 15 downto  0) <= strm_i(47 downto 32);
      strm32( 63 downto 16) <= (others => '0'); 
      strm32( 79 downto 64) <= strm_i(111 downto 96);
      strm32(135 downto 80) <= (others => '0');
      
      RAW_MULTI_EN <= '1';

   end generate g_rawmulti1;

   g_rawmulti2: IF (C_RAW_MULTI_EN = '0')  GENERATE
      -- HDL Embedded Text Block 10 eb10
      -- eb9 9
      strm16 <= (others => '0'); 
      strm32 <= (others => '0'); 
      
      RAW_MULTI_EN <= '0';

   end generate g_rawmulti2;

   g_modules: FOR m IN 0 TO 33 GENERATE
      g_abcn: IF (MOD_PRES(m) = '1') and (MOD_TYPE(m) = '0')  GENERATE
         g_rounit : for h in 0 to 3  GENERATE
            -- HDL Embedded Text Block 11 eb11
            --eb11 11
            STREAM_IDS(m*4+h) <= m*4+h;
            --RAW_MULTI_EN <= C_MULTI_RAW_EN;

            Uunitt : ro_unit
               port map (
                  HST_EN          => SLV_MOD_HST(m),
                  RAW_EN          => SLV_MOD_RAW(m),
                  RAW_MULTI_EN    => RAW_MULTI_EN,
                  STREAM_ID       => STREAM_IDS(m*4+h),
                  bcid_i          => bcid_i,
                  capture_start_i => capture_start,
                  clk             => clk,
                  gendata0_i      => gendata0,
                  gendata1_i      => gendata1,
                  l1id_i          => l1id_i,
                  lld_i           => s_lld_i(m*4+h),
                  mode40_strobe_i => mode40_strobe,
                  reg             => reg,
                  req_stat_i      => strm_req_stat_i(m*4+h),
                  rst             => rst,
                  serdata16_i     => strm16(m*4+h),
                  serdata32_i     => strm32(m*4+h),
                  serdata_i       => strm_i(m*4+h),
                  simdata0_i      => simdata0,
                  simdata1_i      => simdata1,
                  strm_cmd_i      => strm_cmd_i(m*4+h),
                  strm_reg_i      => strm_reg_i(m*4+h),
                  trig80_i        => trig80_i,
                  busy_o          => busy_bus(m*4+h),
                  lls_o           => s_lls_o(m*4+h)
               );
         end generate g_rounit;

      end generate g_abcn;

      gif_tn: IF (MOD_PRES(m) = '0')  GENERATE
         -- HDL Embedded Text Block 3 eb3
         -- eb3 3
         busy_bus(m*4+3 downto m*4) <= "0000";

      end generate gif_tn;

      gr1: IF (MOD_RAW(m)='1') GENERATE
         -- HDL Embedded Text Block 12 eb12
         -- eb12 12
         SLV_MOD_RAW(m) <= '1';

      end generate gr1;

      g_abc130: IF (MOD_PRES(m) = '1') and (MOD_TYPE(m) = '1')  GENERATE
         -- HDL Embedded Text Block 5 eb5
         -- eb3 3
         busy_bus(m*4+3) <= '0';
         busy_bus(m*4+1) <= '0';

         g_rounit1: for s in 0 to 1  GENERATE
            Uro13link : ro13_link
               generic map (
                  STREAM_ID => m*4+s*2,
                  HST_EN    => MOD_HST(m),
                  RAW_EN    => MOD_RAW(m)
               )
               port map (
                  bcid_i          => bcid_i,
                  capture_start_i => capture_start,
                  clk             => clk,
                  gen13data80_i   => gen13data80,
                  gen13data_i     => gen13data,
                  l1id_i          => l1id_i,
                  lld_i           => s_lld_i(m*4+s*2),
                  reg             => reg,
                  req_stat_i      => strm_req_stat_i(m*4+s*2),
                  rst             => rst,
                  s40             => strobe40_i,
                  ser13data_i     => strm_i(m*4+s*2+1 downto m*4+s*2),
                  sim13data_i     => LOLO2,
                  strm_cmd_i      => strm_cmd_i(m*4+s*2),
                  strm_reg_i      => strm_reg_i(m*4+s*2),
                  tick            => tick,
                  trig80_i        => trig80_i,
                  busy_o          => busy_bus(m*4+s*2),
                  lls_o           => s_lls_o(m*4+s*2)
               );
         end generate g_rounit1;

      end generate g_abc130;

      gh1: IF (MOD_HST(m)='1') GENERATE
         -- HDL Embedded Text Block 14 eb14
         -- eb12 12
         SLV_MOD_HST(m) <= '1';

      end generate gh1;

      gh2: IF (MOD_HST(m)='0') GENERATE
         -- HDL Embedded Text Block 15 eb15
         -- eb12 12
         SLV_MOD_HST(m) <= '0';

      end generate gh2;

      gr2: IF (MOD_RAW(m)='0') GENERATE
         -- HDL Embedded Text Block 13 eb13
         -- eb12 12
         SLV_MOD_RAW(m) <= '0';

      end generate gr2;

   end generate g_modules;

end struct;
