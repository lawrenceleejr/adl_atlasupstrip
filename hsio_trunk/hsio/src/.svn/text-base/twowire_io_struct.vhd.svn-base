-- VHDL Entity hsio.twowire_io.symbol
--
-- Created by Matt Warren 2014
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity twowire_io is
   port( 
      sck_i           : in     std_logic_vector (15 downto 0);
      sck_ti          : in     std_logic_vector (15 downto 0);
      sda_rx10_i      : in     std_logic;
      sda_rx11_i      : in     std_logic;
      sda_ti          : in     std_logic_vector (15 downto 0);
      sda_tx_i        : in     std_logic_vector (15 downto 0);
      ibemon_scl_o    : out    std_logic_vector (2 downto 0);
      ibemon_sclt_o   : out    std_logic_vector (2 downto 0);
      ibewire_scl_o   : out    std_logic;
      ibewire_sclt_o  : out    std_logic;
      sda_rx_o        : out    std_logic_vector (15 downto 0);
      -- IDC CONNECTORS (P2-5)
      aux_io          : inout  std_logic_vector (7 downto 0);   --IDC_P2
      -- IDC CONNECTORS (P2-5)
      ibe_pll_scl_io  : inout  std_logic;                       --IDC_P2
      -- IDC CONNECTORS (P2-5)
      ibe_pll_sda_io  : inout  std_logic;                       --IDC_P2
      ibemon_sda_io   : inout  std_logic_vector (2 downto 0);
      ibemon_sdat_io  : inout  std_logic_vector (2 downto 0);
      ibewire_sda_io  : inout  std_logic;
      ibewire_sdat_io : inout  std_logic
   );

-- Declarations

end twowire_io ;

-- VHDL from Block Diagram 
-- Generated by Mentor Graphics HDL Designer(TM) 2013.1 (Build 6) 
--
-- hsio.twowire_io.struct
--
-- Created by Matt Warren 2014
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;


architecture struct of twowire_io is

   -- Architecture declarations

   -- Internal signal declarations


   -- Component Declarations
   component PULLUP
   port (
      O : out    std_ulogic  := 'H'
   );
   end component;
   component twowire_tri
   port (
      sck_i   : in     std_logic;
      sck_ti  : in     std_logic;
      sda_i   : in     std_logic;
      sda_ti  : in     std_logic;
      sck_pin : out    std_logic;
      sda_o   : out    std_logic;
      sda_pin : inout  std_logic
   );
   end component;


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1
   sda_rx_o(10) <= sda_rx10_i;
   sda_rx_o(11) <= sda_rx11_i;


   -- Instance port mappings.
   Upullup6 : PULLUP
      port map (
         O => ibewire_sclt_o
      );
   Upullup7 : PULLUP
      port map (
         O => ibewire_sdat_io
      );
   Upullup8 : PULLUP
      port map (
         O => ibe_pll_sda_io
      );
   Upullup9 : PULLUP
      port map (
         O => ibe_pll_scl_io
      );
   Upullup10 : PULLUP
      port map (
         O => ibewire_sda_io
      );
   Upullup11 : PULLUP
      port map (
         O => ibewire_scl_o
      );
   Utwowirepll : twowire_tri
      port map (
         sck_i   => sck_i(8),
         sck_ti  => sck_ti(8),
         sck_pin => ibe_pll_scl_io,
         sda_i   => sda_tx_i(8),
         sda_o   => sda_rx_o(8),
         sda_ti  => sda_ti(8),
         sda_pin => ibe_pll_sda_io
      );
   Utwowiretri3 : twowire_tri
      port map (
         sck_i   => sck_i(3),
         sck_ti  => sck_ti(3),
         sck_pin => ibewire_sclt_o,
         sda_i   => sda_tx_i(3),
         sda_o   => sda_rx_o(3),
         sda_ti  => sda_ti(3),
         sda_pin => ibewire_sdat_io
      );
   Utwowiretri4 : twowire_tri
      port map (
         sck_i   => sck_i(7),
         sck_ti  => sck_ti(7),
         sck_pin => ibewire_scl_o,
         sda_i   => sda_tx_i(7),
         sda_o   => sda_rx_o(7),
         sda_ti  => sda_ti(7),
         sda_pin => ibewire_sda_io
      );

   g1: FOR t IN 0 TO 2 GENERATE
      Upullup5 : PULLUP
         port map (
            O => ibemon_sclt_o(t)
         );
      Utwowiretri0 : twowire_tri
         port map (
            sck_i   => sck_i(t),
            sck_ti  => sck_ti(t),
            sck_pin => ibemon_sclt_o(t),
            sda_i   => sda_tx_i(t),
            sda_o   => sda_rx_o(t),
            sda_ti  => sda_ti(t),
            sda_pin => ibemon_sdat_io(t)
         );
      Upullup4 : PULLUP
         port map (
            O => ibemon_sdat_io(t)
         );
   end generate g1;

   g2: FOR b IN 0 TO 2 GENERATE
      Upullup1 : PULLUP
         port map (
            O => ibemon_scl_o(b)
         );
      Utwowiretri1 : twowire_tri
         port map (
            sck_i   => sck_i(b+4),
            sck_ti  => sck_ti(b+4),
            sck_pin => ibemon_scl_o(b),
            sda_i   => sda_tx_i(b+4),
            sda_o   => sda_rx_o(b+4),
            sda_ti  => sda_ti(b+4),
            sda_pin => ibemon_sda_io(b)
         );
      Upullup0 : PULLUP
         port map (
            O => ibemon_sda_io(b)
         );
   end generate g2;

   g4: FOR a IN 0 TO 3 GENERATE
      Upullup2 : PULLUP
         port map (
            O => aux_io(a*2)
         );
      Utwowiretri2 : twowire_tri
         port map (
            sck_i   => sck_i(a+12),
            sck_ti  => sck_ti(a+12),
            sck_pin => aux_io(a*2),
            sda_i   => sda_tx_i(a+12),
            sda_o   => sda_rx_o(a+12),
            sda_ti  => sda_ti(a+12),
            sda_pin => aux_io((a*2)+1)
         );
      Upullup3 : PULLUP
         port map (
            O => aux_io((a*2)+1)
         );
   end generate g4;

end struct;
